"use strict";

const {
  PeriodicExportingMetricReader: OpenTelemetryPeriodicExportingMetricReader,
} = require("@opentelemetry/sdk-metrics");

const MetricFormatter = require("../utils/metric-formatter.js");

class PeriodicExportingMetricReader extends OpenTelemetryPeriodicExportingMetricReader {
  /**
   * @param {string} meterProviderName Name of the meter provider.
   * @param {object} options Options of the {@link UuApp.Metrics.MetricReader}.
   * @param {object} options.exporter
   * @param {array.<string>} options.instrumentNameIncludeList
   * @param {array.<string>} [options.instrumentNameExcludeList]
   * @param {number} [options.exportIntervalMillis]
   * @param {number} [options.exportTimeoutMillis]
   */
  constructor(meterProviderName, options) {
    const { instrumentNameIncludeList, instrumentNameExcludeList, ...openTelemetryOptions } = options;
    super(openTelemetryOptions);
    this._meterProviderName = meterProviderName;
    this._instrumentNameIncludeList = instrumentNameIncludeList || [];
    this._instrumentNameExcludeList = instrumentNameExcludeList || [];
  }

  /**
   * Collects all metrics from the associated MetricProducer.
   *
   * @param {object} [options] Collection options.
   * @param {number} [options.timeoutMillis] Collection timeout.
   *
   * @returns {Promise<{}>} Collection result.
   */
  async collect(options) {
    return MetricFormatter.format(
      await super.collect(options),
      this._meterProviderName,
      this._instrumentNameIncludeList,
      this._instrumentNameExcludeList,
    );
  }
}

module.exports = PeriodicExportingMetricReader;
