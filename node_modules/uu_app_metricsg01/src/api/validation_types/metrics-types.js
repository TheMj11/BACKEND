/* eslint-disable */

const instrumentTypeList = [
  "gauge",
  "histogram",
  "counter",
  "upDownCounter",
  "observableGauge",
  "observableCounter",
  "observableUpDownCounter",
];

const instrumentType = shape({
  type: oneOf(instrumentTypeList).isRequired(),
  name: string(1, 255).isRequired(),
  description: string(1, 4000),
  unit: string(1, 255),
  valueType: oneOf("int", "double"),
  advice: shape({
    explicitBucketBoundaries: array(integer().isRequired(), 255),
  }),
});

const viewType = shape({
  name: string(1, 255),
  description: string(1, 4000),
  attributeKeys: array(string(1, 255).isRequired(), 255),
  // TODO aggregation
  instrumentType: oneOf(instrumentTypeList).isRequired(["instrumentName", "meterName", "meterVersion", "meterSchemaUrl"]),
  instrumentName: string(1, 255).isRequired(["instrumentType", "meterName", "meterVersion", "meterSchemaUrl"]),
  instrumentUnit: string(1, 255),
  meterName: string(1, 255).isRequired(["instrumentType", "instrumentName", "meterVersion", "meterSchemaUrl"]),
  meterVersion: string(1, 255).isRequired(["instrumentType", "instrumentName", "meterName", "meterSchemaUrl"]),
  meterSchemaUrl: string(1, 255).isRequired(["instrumentType", "instrumentName", "meterName", "meterVersion"]),
});

const meterMapType = map(string(/^[^|]{1,255}$/), shape({
  version: string(/^[^|]{1,255}$/),
  meterProvider: string(1, 255),
  instrumentList: array(instrumentType().isRequired(), 255),
  options: shape({
    attributeKeys: array(string(1, 255).isRequired(), 10),
    schemaUrl: string(1, 255),
  }),
}).isRequired(), 1000);

const meterProviderMapType = map(string(1, 255), shape({
  resource: map(string(1, 255), string(1, 255), 255),
  views: array(viewType().isRequired(), 1000),
  readers: array(shape({
    name: string(1, 255).isRequired(),
    realization: string(1, 255).isRequired(),
    exporter: shape({
      realization: string(1, 255).isRequired(),
      aggregationTemporality: oneOf("delta", "cumulative"),
    }),
    exportIntervalMillis: oneOf(integer(0, null), string(1, 255)),
    exportIntervalMillisDefault: integer(0, null),
    instrumentNameIncludeList: array(string(1, 255).isRequired(), 1, 100).isRequired(),
    instrumentNameIncludeListOverride: array(string(1, 255).isRequired(), 100),
    instrumentNameExcludeList: array(string(1, 255).isRequired(), 100),
    instrumentNameExcludeListOverride: array(string(1, 255).isRequired(), 100)
  }).isRequired(), 1000),
}).isRequired(), 100);

const metricsType = shape({
  meterProviderMap: meterProviderMapType(),
  meterMap: meterMapType(),
});

const meterProviderMapPartialType = map(string(1, 255), shape({
  resource: map(string(1, 255), string(1, 255).isRequired(), 255),
  views: array(viewType().isRequired(), 1000),
  readers: array(shape({
    name: string(1, 255).isRequired(),
    realization: string(1, 255),
    exporter: shape({
      realization: string(1, 255),
      aggregationTemporality: oneOf("delta", "cumulative"),
    }),
    exportIntervalMillis: oneOf(integer(0, null), string(1, 255)),
    exportIntervalMillisDefault: integer(0, null),
    instrumentNameIncludeList: array(string(1, 255).isRequired(), 100),
    instrumentNameIncludeListOverride: array(string(1, 255).isRequired(), 100),
    instrumentNameExcludeList: array(string(1, 255).isRequired(), 100),
    instrumentNameExcludeListOverride: array(string(1, 255).isRequired(), 100)
  }).isRequired(), 1000),
}).isRequired(), 100);

const metricsPartialType = shape({
  meterProviderMap: meterProviderMapPartialType(),
  meterMap: meterMapType(),
});
