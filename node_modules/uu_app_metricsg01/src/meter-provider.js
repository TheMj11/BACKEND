"use strict";

const { BaseError } = require("uu_appg01_core-utils");
const { MeterProvider: OpenTelemetryMeterProvider } = require("@opentelemetry/sdk-metrics");

const Meter = require("./meter.js");

/**
 * @class UuApp.Metrics.MeterProvider
 */
class MeterProvider extends OpenTelemetryMeterProvider {

  /**
   * @param {string} name Name of the meter provider.
   * @param {object} [options] Options of the meter provider.
   * @param {object} [options.resource]
   * @param {array} [options.views]
   * @param {map} [options.readerMap]
   */
  constructor(name, options) {
    if (!name || typeof name !== "string") {
      throw new BaseError("MeterProvider name must be a non-empty string.");
    }

    let readers;
    if (options.readerMap.size) {
      readers = Array.from(options.readerMap.values());
    }

    super({ ...options, readers });
    this._name = name;
    this._meterMap = new Map();
    this._readerMap = options.readerMap;
  }

  /**
   * Returns an instance of a {@link UuApp.Metrics.Meter}
   * with the configuration of the {@link UuApp.Metrics.MeterProvider}.
   * 
   * @param {string} name Name of the meter or instrumentation library.
   * @param {string} [version] Version of the meter or instrumentation library.
   * @param {object} [options] Options of the meter or instrumentation library.
   * @returns {Meter} Instance of meter.
   */
  getMeter(name, version = undefined, options = {}) {
    if (this._meterMap.has(`${name}|${version}`)) {
      return this._meterMap.get(`${name}|${version}`);
    } else {
      const { attributeKeys, disabled, ...meterOpts } = options;
      const meter = new Meter(
        super.getMeter(name, version, meterOpts),
        this._name,
        { attributeKeys, disabled },
      );
      this._meterMap.set(`${name}|${version}`, meter);
      return meter;
    }
  }

  /**
   * Returns an instance of a {@link MetricReader}.
   * 
   * @param {string} name Name of the metric reader.
   * @returns {MetricReader} Instance of metric reader.
   */
  getMetricReader(name) {
    return this._readerMap.get(name);
  }

  /**
   * Registers a {@link MetricReader} to the {@link UuApp.Metrics.MeterProvider}.
   * After the registration, the MetricReader can start metrics collection.
   * 
   * NOTE: {@link MetricReader} instances MUST be added before creating any instruments.
   * A {@link MetricReader} instance registered later may receive no or incomplete metric data.
   * 
   * @param {MetricReader} [metricReader] Instance of the metric reader.
   */
  addMetricReader(metricReader) {
    super.addMetricReader(metricReader);
  }
}

module.exports = MeterProvider;
