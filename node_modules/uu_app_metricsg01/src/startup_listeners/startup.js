"use strict";

const Crypto = require("crypto");
const Process = require("process");

const { Sys } = require("uu_appg01_core-appserver");
const { LoggerFactory } = require("uu_appg01_core-logging");
const { DaoFactory, Lock, ObjectLocked } = require("uu_appg01_objectstore");

const MetricSynchronisationService = require("../utils/metric-synchronisation-service.js");
const { SYNC_PERIOD_MS } = require("../constants/config-constants.js");

const LOCK_CODE = "uuAppMetricsSyncLock";
const APP_INFO = Sys.getAppInfo();
const LOGGER = LoggerFactory.get();

class Startup {
  /**
   * Initializing uuAppMetrics schemas and synchronisation service on server start.
   */
  async onStartup() {
    if (DaoFactory.isDataStoreOn()) {
      const dao = DaoFactory.getDao("sysUuAppMetrics");

      // create schemas
      await dao.createSchema();

      // resolve uuNodeId
      let uuNodeId;
      const availableUuNodes = await dao.listAvailableUuNodes(new Date(new Date() - SYNC_PERIOD_MS * 2));
      const lock = new Lock(LOCK_CODE, SYNC_PERIOD_MS / 1000 + 10);

      LOGGER.debug("Resolving uuNodeId.");
      for (const availableUuNode of availableUuNodes) {
        try {
          await dao.lockById(availableUuNode._id, lock);
        } catch (e) {
          if (e instanceof ObjectLocked) {
            continue;
          } else {
            throw e;
          }
        }
        uuNodeId = availableUuNode.uuNodeId;
        break;
      }

      if (!uuNodeId) {
        uuNodeId =
          Process.env.UU_CLOUD_NODE_NAME ||
          `uuappg01-${APP_INFO.uuSubApp.replace("-server", "")}-${Crypto.randomUUID()}`;
        LOGGER.debug(`Using generated uuNodeId "${uuNodeId}".`);
      } else {
        LOGGER.debug(`Reusing uuNodeId "${uuNodeId}".`);
      }

      LOGGER.debug("Initializing MetricSynchronisationService.");
      await MetricSynchronisationService.onInitialized(uuNodeId, lock);
      LOGGER.debug("MetricSynchronisationService initialized.");
    }
  }
}

module.exports = Startup;
