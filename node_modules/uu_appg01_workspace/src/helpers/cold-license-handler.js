"use strict";

const Fs = require("fs");
const Path = require("path");
const { Config, Finder, BaseError } = require("uu_appg01_core-utils");
const { LoggerFactory } = require("uu_appg01_core-logging");
const { Validator } = require("uu_appg01_core-validation");

const UuAppWorkspace = require("../api/components/app-workspace.js");
const SysAppWorkspaceError = require("../api/errors/sys-app-workspace-errors.js");
const AwidLicenseErrors = require("../api/errors/sys-awid-license-errors.js");

const CONFIG_FOLDER = "config";
const CONFIG_FILE = "license.json";

class ColdLicenseHandler {
  constructor() {
    this.asid = Config.get("asid");
    this.logger = LoggerFactory.get();
    
    const serverRoot = Config.get("server_root");
    const licensingEnabled = UuAppWorkspace.isLicenseVerificationEnabled();
    let configPath = Finder.findConfigInProject(serverRoot, `{app,src,}/${CONFIG_FOLDER}/${CONFIG_FILE}`);
    if (!configPath) {
      configPath = Path.join(serverRoot, "app", CONFIG_FOLDER, CONFIG_FILE);
    }

    if (licensingEnabled) {
      if (Fs.existsSync(configPath)) {
        let license = require(configPath);
        const validator = new Validator(
          Path.join(__dirname, "..", "api", "validation_types", "config-types.js"),
        );
  
        const validationResult = validator.validate("licenseType", license);
        if (!validationResult.isValid()) {
          throw new BaseError(
            `License.json [${configPath}] is not valid:\n` +
            JSON.stringify(validationResult.getValidationErrorMap(), null, 2),
          );
        }
  
        this.license = license;
      } else {
        this.logger.error(
          `License configuration file ${configPath} not found. It is required to be able to enable licensing.`
        );
      }
    }
  }

  async handleCall(awid, ucName) {
    if (!this.license) {
      return;
    }

    if (awid === this.asid) {
      return;
    }

    let workspaceLicense;
    try {
      const sysAppWorkspace = await UuAppWorkspace.get(awid);
      workspaceLicense = sysAppWorkspace.license || {};
    } catch (e) {
      if (e instanceof SysAppWorkspaceError.Get.SysUuAppWorkspaceDoesNotExistError) {
        return;
      } else {
        throw e;
      }
    }

    const { licenseSize, licenseUri } = workspaceLicense;

    if (!licenseSize) {
      this.logger.info(`uuAppWorkspace is missing licenseSize.`);
      return;
    }

    const licensePlan = this.license.licensePlanMap[licenseSize];
    if (!licensePlan) {
      this.logger.info(`License "${licenseSize}" not found.`);
      return;
    }

    const restrictedUseCaseList = this.license.licensePlanTypeRestrictionMap[licensePlan.planType]?.restrictedUseCaseList;
    if (restrictedUseCaseList?.includes(ucName)) {
      throw new AwidLicenseErrors.LicenseExceededError(
        null,
        {
          licenseSize,
          licenseUri,
        },
      );
    }
  }
}

module.exports = new ColdLicenseHandler();
