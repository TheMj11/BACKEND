"use strict";

const fs = require("fs");
const path = require("path");
const { MappingsLoader } = require("uu_appg01_core-appserver");
const { LoggerFactory } = require("uu_appg01_core-logging");
const { Config, BaseError } = require("uu_appg01_core-utils");

const LOGGER = LoggerFactory.get("UuApp.AppWorkspace.UuCommandLineTemplate");

class UuCommandLineTemplate {
  static create() {
    let mappings;
    try {
      mappings = MappingsLoader.load().data["{vendor}-{uuApp}-{uuSubApp}"].useCaseMap;
    } catch (e) {
      throw new BaseError("Loading mappings failed.", e);
    }

    return {
      name: this._getProductName(),
      useCaseFolderList: this._getUseCaseFolderList(mappings),
      useCaseMap: this._getUseCaseMap(mappings),
      environmentMap: {},
    };
  }

  static _getDocUri() {
    let docUri = ""; // will be generated from bookkit in the future

    return docUri;
  }

  static _getDtoIn(useCase = null) {
    let dtoIn = {}; // will be generated from bookkit in the future

    return dtoIn;
  }

  static _getDtoInMap() {
    let dtoInMap = {
      // will be generated from bookkit in the future
      customDtoIn: {},
    };

    return dtoInMap;
  }

  static _getProductName() {
    const appDir = Config.get("server_root") || process.cwd();
    const packageJsonPath = path.resolve(appDir, "package.json");
    const packageJson = this._parseJson(packageJsonPath);

    if (!packageJson) return "<product>";

    if (!packageJson.name) {
      LOGGER.warn(`Unable to find 'name' in ${packageJsonPath}.`);
      return "<product>";
    }

    const productName = packageJson.name.split("-")[0].replace(/_/g, "-");

    return productName;
  }

  static _getUseCaseFolder(useCase) {
    const subPaths = useCase.split("/");
    if (subPaths[0] == "sys") return subPaths[1];
    else return subPaths[0];
  }

  static _getUseCaseFolderList(mappings) {
    let useCaseFolderMap = {};
    let useCaseFolderList = [];

    const useCaseList = Object.keys(mappings);
    useCaseList.forEach((useCase, index) => {
      if (mappings[useCase].type === "CMD") {
        const useCaseFolder = this._getUseCaseFolder(useCaseList[index]);
        if (useCaseFolderMap[useCaseFolder]) useCaseFolderMap[useCaseFolder].push(useCaseList[index]);
        else useCaseFolderMap[useCaseFolder] = [useCaseList[index]];
      }
    });

    const useCaseFolders = Object.keys(useCaseFolderMap);
    useCaseFolders.forEach((useCaseFolder) => {
      useCaseFolderList.push({
        name: useCaseFolder,
        useCaseList: useCaseFolderMap[useCaseFolder],
      });
    });

    return useCaseFolderList;
  }

  static _getUseCaseMap(mappings) {
    let useCaseMap = {};

    const useCaseList = Object.keys(mappings);
    useCaseList.forEach((useCase) => {
      if (mappings[useCase].type === "CMD") {
        let httpMethod = Array.isArray(mappings[useCase].httpMethod)
          ? mappings[useCase].httpMethod[0]
          : mappings[useCase].httpMethod;
        useCaseMap[useCase] = {
          method: httpMethod.toLowerCase(),//httpMethodtoLowerCase(),
          dtoIn: this._getDtoIn(),
          docUri: this._getDocUri(),
          dtoInMap: this._getDtoInMap(),
        };
      }
    });

    return useCaseMap;
  }

  static _parseJson(jsonPath, encoding = "utf-8") {
    if (!fs.existsSync(jsonPath)) {
      LOGGER.warn(`Unable to find ${jsonPath}.`);
      return null;
    }

    let parsedJson;

    try {
      const jsonFile = fs.readFileSync(jsonPath, encoding);
      parsedJson = JSON.parse(jsonFile);
    } catch (e) {
      LOGGER.warn(`Unable to read ${jsonPath}.`, e);
    }

    return parsedJson;
  }
}

module.exports = UuCommandLineTemplate;
