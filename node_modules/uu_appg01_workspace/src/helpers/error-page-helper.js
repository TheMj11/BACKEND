"use strict";

const fs = require("fs");
const path = require("path");
const util = require("util");
const readFile = util.promisify(fs.readFile);

const { Uri, UriBuilder } = require("uu_appg01_core-uri");
const { UseCaseContext, ErrorConverter } = require("uu_appg01_core-appserver");

const UU_APP_ERROR_MAP_KEY = "uuAppErrorMap";

const VAR_REG_EXP = /<%=\s*(\w[\w\.]*)\s*%>/g;
const COMMENT_REG_EXP = /<!--.*?-->/s;
const UNDEFINED_VALUE = "";


class ErrorPageHelper {
  static async respondWithErrorPage({ res, viewFile, params, error }) {
    const errorPage = await readFile(path.join(__dirname, "..", "views", viewFile), "utf8");
    res.locals.dispatchedError = { message: error.message, code: error.code }; // expected by auditLog for an error (5x) response
    res.status(503);
    res.send(this._completeErrorPage(errorPage, params));
  }

  /**
   * If uri contains error information - forwards to custom errorUve.
   * If not, redirects to the same page with parameters containing error information.
   */
  static redirectToCustomErrorPage(next, req, res, errorUc, error) {
    const uri = Uri.parse(res.locals.uri);
    const originUuAppErrorMap = uri.getParameters()[UU_APP_ERROR_MAP_KEY];
    if (originUuAppErrorMap && originUuAppErrorMap.includes(error.code)) {
      const newUri = UriBuilder.parse(res.locals.uri)
        .setUseCase(errorUc)
        .toUri();
      res.locals.uri = newUri;
      UseCaseContext.setUri(newUri);
      req.url = newUri.getRelativeUri().toString();
      res.locals.dispatchedError = { message: error.message, code: error.code }; // expected by auditLog for an error (5x) response
      res.status(503);
      res.locals.redirectToCustomErrorUve = true;
      next();
    } else {
      const { dtoOut } = ErrorConverter.buildErrorDtoOut(error);
      let uuAppErrorMap;
      try {
        uuAppErrorMap = JSON.parse(originUuAppErrorMap) || {};
      } catch (e) {
        uuAppErrorMap = {};
      }
      Object.assign(uuAppErrorMap, dtoOut.uuAppErrorMap);

      const newUriBuilder = UriBuilder.parse(res.locals._uu_app_uve_handler_orig_url || res.locals.uri)
        .deleteParameter(UU_APP_ERROR_MAP_KEY)
        .setParameter(UU_APP_ERROR_MAP_KEY, JSON.stringify(uuAppErrorMap));
      res.redirect(newUriBuilder.toString());
    }
  }
  
  static _completeErrorPage(page, parameters) {
	  let result = this._removeComments(page.toString());
	  result = this._resolveVariables(result, parameters);
	  return result;	
  }
  
  static _resolveVariables(value, parameters = {}) {
    let result = value;
    if (value) {
      result = value.toString().replace(VAR_REG_EXP, (_, paramName) => this._resolveValue(paramName, parameters));
    }
    return result;
  }

  static _removeComments(value) {
    let result = value;
    if (value) {
      result = value.toString().replace(COMMENT_REG_EXP, "");
    }
    return result;
  }

  static _resolveValue(paramName, parameters) {
    let result = UNDEFINED_VALUE;
    if (paramName) {
      result = parameters;
      paramName.split('.').forEach(namePart => {
        result = result ? result[namePart] : null;
      });
    }
    return result ? result : UNDEFINED_VALUE;
  }
}

module.exports = ErrorPageHelper;
