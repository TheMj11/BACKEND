"use strict";

const { Config, LruCache, Mutex } = require("uu_appg01_core-utils");
const { LoggerFactory } = require("uu_appg01_core-logging");
const SysAppDataStoreStatsAbl = require("../abl/sys-app-data-store-stats-abl.js");

const UU_APP_METRICS_ENABLED = Config.getBoolean("uu_app_metrics_enabled");
const DATA_STORE_STATS_CALC_PERIOD = Config.getNumber("uu_app_server_data_store_stats_calculation_period") || 15 * 60;

class DataStoreStatsMetricProvider {
  constructor() {
    this._asid = Config.getString("asid");
    this._dataStoreStatsCalculationPeriod = DATA_STORE_STATS_CALC_PERIOD * 1000;
    this._dataStoreStatsCache = new LruCache({ maxAge: this._dataStoreStatsCalculationPeriod });
    this._lastDataLoad = null;
    this._mutex = new Mutex();
    this._logger = LoggerFactory.get("UuApp.AppWorkspace.DataStoreStatsMetricProvider");

    if (UU_APP_METRICS_ENABLED) {
      const { MeterProviderFactory } = require("uu_app_metricsg01");
      const calcPeriodGauge = MeterProviderFactory.get().getMeter("DataStoreStats").getInstrument("calcPeriod");
      calcPeriodGauge.record(this._dataStoreStatsCalculationPeriod, { asid: this._asid });
    }
  }

  getMetricData(forceLoad = false) {
    let metricData = this._dataStoreStatsCache.get(this._asid);

    if (forceLoad || !metricData || this._lastDataLoad < new Date(Date.now() - Math.min(this._dataStoreStatsCalculationPeriod, 10 * 60 * 1000))) {
      this._mutex.runOneAtTime(this._asid, this.loadMetricData.bind(this)).catch((e) => {
        this._logger.error("Loading of sysAppDataStoreStats failed.", e);
      });
    }

    return metricData || new Map();
  }

  getDataStoreStatsCalculationPeriod() {
    return this._dataStoreStatsCalculationPeriod;
  }

  getLastDataLoadTime() {
    return this._lastDataLoad;
  }

  async loadMetricData() {
    let metricData = new Map();
    let pageInfo = {
      pageIndex: 0,
      pageSize: 1000,
    };
    let total;

    do {
      let listStatsDtoOut = await SysAppDataStoreStatsAbl.list({ pageInfo });
      for (const stats of listStatsDtoOut.itemList) {
        if (stats.state !== "completed") {
          return;
        }
        Object.entries(stats.dataStoreMap).forEach(([dsName, dsStats]) => {
          if (dsStats.type === "uuAppBinaryStore") {
            stats.count -= dsStats.count;
            stats.sysCount -= dsStats.sysCount;
            stats.size -= dsStats.size;
            stats.dataSize -= dsStats.dataSize;
            stats.sysSize -= dsStats.sysSize;
            stats.indexSize -= dsStats.indexSize;
            stats.sysIndexSize -= dsStats.sysIndexSize;
            delete stats[dsName];
          }
        });
        metricData.set(stats.awid, stats);
      }
      total = listStatsDtoOut.pageInfo.total;
      pageInfo.pageIndex++;
    } while (total > pageInfo.pageIndex * pageInfo.pageSize);

    this._lastDataLoad = new Date();
    this._dataStoreStatsCache.set(this._asid, metricData);
  }
}

module.exports = new DataStoreStatsMetricProvider();
