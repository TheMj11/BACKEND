"use strict";

const { Config } = require("uu_appg01_core-utils");
const { UriBuilder } = require("uu_appg01_core-uri");
const { AuthenticationService } = require("uu_appg01_core-authentication");
const AppClientFactory = require("./app-client-factory");

const { LoggerFactory } = require("uu_appg01_core-logging");
const logger = LoggerFactory.get("LogStoreService");


const Errors = require('../api/errors/log-store-service-errors');

const PAR_UU_CLOUD_LOG_STORE_BASE_URI = "uuAppWorkspace.uuCloudLogStoreBaseUri";
const UC_LOG_CREATE_ACCESS_KEY = "log/createAccessKey";

class LogStoreService {

	async createAccessKey(dtoIn) {
		let uuLogStoreCmdUri = this._getUuCloudStoreCmdUri().toString();

		let sysIdentitySession;
		try {
			let asid = Config.get("asid");
			sysIdentitySession = await AuthenticationService.authenticate({ systemIdentity: asid }, uuLogStoreCmdUri);
		} finally {
			if (logger.isInfoLoggable()) {
				logger.info(`Session used for uuCloudLogstore command invocation: ${JSON.stringify(sysIdentitySession)}`);
			}
		}

    let appClient = AppClientFactory.createAppClient();
		let result = await appClient.post(uuLogStoreCmdUri, dtoIn, { session: sysIdentitySession });
		return result;
	}

	_getUuCloudStoreCmdUri() {
		let parUri = Config.getString(PAR_UU_CLOUD_LOG_STORE_BASE_URI);
		if (!parUri) {
			throw new Errors.CreateAccessKey.UuCloudLogStoreBaseUriNotConfigured();
		}
		let result = UriBuilder.parse(parUri);
		result.setUseCase(UC_LOG_CREATE_ACCESS_KEY);
		return result.toUri();
	}

}

module.exports = new LogStoreService();