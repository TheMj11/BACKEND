"use strict";

const Path = require("path");
const { BaseError, Config, ConfigFilesLoader, OptsReader, Mutex, LruCache } = require("uu_appg01_core-utils");
const { AuthenticationService } = require("uu_appg01_core-authentication");
const { LoggerFactory } = require("uu_appg01_core-logging");
const { UseCaseContext } = require("uu_appg01_core-appserver");
const { Validator } = require("uu_appg01_core-validation");
const LicenseKitService = require("./helpers/license-kit-service.js");
const { LicenseLoadFailedError } = require("./api/errors/workspace-license-error.js");
const { SysUuSubAppInstanceDoesNotExistError } = require("./api/errors/sys-app-instance-errors").Get;
const { SysUuAppWorkspaceDoesNotExistError } = require("./api/errors/sys-app-workspace-errors.js").Get;

const PARAM_LICENSEKIT_BASE_URI = "uu_app_workspace_licensekit_base_uri";
const PARAM_ASID_LICENSOR_SEARCH_KEY = "uu_app_workspace_asid_licensor_search_key";

const PARAM_ASID_LICENSE_CACHE_TTL = "uu_app_workspace_asid_license_cache_ttl";
const PARAM_ASID_LICENSE_CACHE_MAX_SIZE = "uu_app_workspace_asid_license_cache_max_size";
const PARAM_ASID_LICENSE_NEGATIVE_CACHE_TTL = "uu_app_workspace_asid_license_negative_cache_ttl";

const PARAM_AWID_LICENSE_CACHE_TTL = "uu_app_workspace_awid_license_cache_ttl";
const PARAM_AWID_LICENSE_CACHE_MAX_SIZE = "uu_app_workspace_awid_license_cache_max_size";
const PARAM_AWID_LICENSE_NEGATIVE_CACHE_TTL = "uu_app_workspace_awid_license_negative_cache_ttl";

const PARAM_PRODUCT_LICENSE_CACHE_TTL = "uu_app_workspace_product_license_cache_ttl";
const PARAM_PRODUCT_LICENSE_CACHE_MAX_SIZE = "uu_app_workspace_product_license_cache_max_size";
const PARAM_PRODUCT_LICENSE_NEGATIVE_CACHE_TTL = "uu_app_workspace_product_license_negative_cache_ttl";

const PARAM_USER_LICENSE_CACHE_TTL = "uu_app_workspace_user_license_cache_ttl";
const PARAM_USER_LICENSE_CACHE_MAX_SIZE = "uu_app_workspace_user_license_cache_max_size";
const PARAM_USER_LICENSE_NEGATIVE_CACHE_TTL = "uu_app_workspace_user_license_negative_cache_ttl";

const DEFAULT_ASID_LICENSE_CACHE_TTL = 5 * 60 * 1000;
const DEFAULT_ASID_LICENSE_CACHE_MAX_SIZE = 10 * 1000;
const DEFAULT_ASID_LICENSE_NEGATIVE_CACHE_TTL = 60 * 1000;

const DEFAULT_AWID_LICENSE_CACHE_TTL = 5 * 60 * 1000;
const DEFAULT_AWID_LICENSE_CACHE_MAX_SIZE = 10 * 1000;
const DEFAULT_AWID_LICENSE_NEGATIVE_CACHE_TTL = 60 * 1000;

const DEFAULT_PRODUCT_LICENSE_CACHE_TTL = 5 * 60 * 1000;
const DEFAULT_PRODUCT_LICENSE_CACHE_MAX_SIZE = 10 * 1000;
const DEFAULT_PRODUCT_LICENSE_NEGATIVE_CACHE_TTL = 60 * 1000;

const DEFAULT_USER_LICENSE_CACHE_TTL = 5 * 60 * 1000;
const DEFAULT_USER_LICENSE_CACHE_MAX_SIZE = 10 * 1000;
const DEFAULT_USER_LICENSE_NEGATIVE_CACHE_TTL = 60 * 1000;

const DEFAULT_PLAN_CODE = "unlicensed";

const licenseTypeMap = {
  ASID: "asid",
  AWID: "awid",
  PRODUCT: "product",
  USER: "user",
};

const productMap = {
  [licenseTypeMap.ASID]: "uuSubAppInstance",
  [licenseTypeMap.AWID]: "uuAppWorkspace",
};

class WorkspaceLicenseService {
  constructor() {
    let opts = new OptsReader(Config);

    let asidLicenseCacheTtl = opts.getNumber(PARAM_ASID_LICENSE_CACHE_TTL);
    asidLicenseCacheTtl = asidLicenseCacheTtl == null ? DEFAULT_ASID_LICENSE_CACHE_TTL : asidLicenseCacheTtl * 1000;
    let asidLicenseCacheMaxSize = opts.getNumber(
      PARAM_ASID_LICENSE_CACHE_MAX_SIZE,
      DEFAULT_ASID_LICENSE_CACHE_MAX_SIZE,
    );
    this._asidLicenseCache = new LruCache({ maxAge: asidLicenseCacheTtl, maxSize: asidLicenseCacheMaxSize });
    this._asidLicenseNegativeCacheTtl = opts.getNumber(
      PARAM_ASID_LICENSE_NEGATIVE_CACHE_TTL,
      DEFAULT_ASID_LICENSE_NEGATIVE_CACHE_TTL,
    );

    let awidLicenseCacheTtl = opts.getNumber(PARAM_AWID_LICENSE_CACHE_TTL);
    awidLicenseCacheTtl = awidLicenseCacheTtl == null ? DEFAULT_AWID_LICENSE_CACHE_TTL : awidLicenseCacheTtl * 1000;
    let awidLicenseCacheMaxSize = opts.getNumber(
      PARAM_AWID_LICENSE_CACHE_MAX_SIZE,
      DEFAULT_AWID_LICENSE_CACHE_MAX_SIZE,
    );
    this._awidLicenseCache = new LruCache({ maxAge: awidLicenseCacheTtl, maxSize: awidLicenseCacheMaxSize });
    this._awidLicenseNegativeCacheTtl = opts.getNumber(
      PARAM_AWID_LICENSE_NEGATIVE_CACHE_TTL,
      DEFAULT_AWID_LICENSE_NEGATIVE_CACHE_TTL,
    );

    let productLicenseCacheTtl = opts.getNumber(PARAM_PRODUCT_LICENSE_CACHE_TTL);
    productLicenseCacheTtl = productLicenseCacheTtl == null ? DEFAULT_PRODUCT_LICENSE_CACHE_TTL : productLicenseCacheTtl * 1000;
    let productLicenseCacheMaxSize = opts.getNumber(
      PARAM_PRODUCT_LICENSE_CACHE_MAX_SIZE,
      DEFAULT_PRODUCT_LICENSE_CACHE_MAX_SIZE,
    );
    this._productLicenseCache = new LruCache({ maxAge: productLicenseCacheTtl, maxSize: productLicenseCacheMaxSize });
    this._productLicenseNegativeCacheTtl = opts.getNumber(
      PARAM_PRODUCT_LICENSE_NEGATIVE_CACHE_TTL,
      DEFAULT_PRODUCT_LICENSE_NEGATIVE_CACHE_TTL,
    );

    let userLicenseCacheTtl = opts.getNumber(PARAM_USER_LICENSE_CACHE_TTL);
    userLicenseCacheTtl = userLicenseCacheTtl == null ? DEFAULT_USER_LICENSE_CACHE_TTL : userLicenseCacheTtl * 1000;
    let userLicenseCacheMaxSize = opts.getNumber(
      PARAM_USER_LICENSE_CACHE_MAX_SIZE,
      DEFAULT_USER_LICENSE_CACHE_MAX_SIZE,
    );
    this._userLicenseCache = new LruCache({ maxAge: userLicenseCacheTtl, maxSize: userLicenseCacheMaxSize });
    this._userLicenseNegativeCacheTtl = opts.getNumber(
      PARAM_USER_LICENSE_NEGATIVE_CACHE_TTL,
      DEFAULT_USER_LICENSE_NEGATIVE_CACHE_TTL,
    );

    const productJson = ConfigFilesLoader.load("product.json", {
      finalConfigHandler: (product, processedFiles) => {
        if (!processedFiles.length) {
          return;
        }

        const validator = new Validator(
          Path.join(__dirname, "api", "validation_types", "config-types.js"),
        );
        const validationResult = validator.validate("productType", product);
        if (!validationResult.isValid()) {
          throw new BaseError(
            `product.json [${processedFiles}] is not valid:\n` +
            JSON.stringify(validationResult.getValidationErrorMap(), null, 2),
          );
        }
      }
    });
    this._productJson = Object.keys(productJson).length ? productJson : null;

    const licenseKitBaseUri = Config.get(PARAM_LICENSEKIT_BASE_URI);
    this._licenseKitService = licenseKitBaseUri && new LicenseKitService(licenseKitBaseUri);
    this._asidLicensorSearchKey = Config.get(PARAM_ASID_LICENSOR_SEARCH_KEY);
    this._asid = Config.get("asid");
    this._mutex = new Mutex();
    this._logger = LoggerFactory.get("UuApp.AppWorkspace.WorkspaceLicenseService");

    if (!licenseKitBaseUri && Config.isProfileActive("production") && !Config.isProfileActive("development", "test")) {
      this._logger.warn("uuLicenseKitBaseUri is not configured. Running application with disabled licensing in production environment is not recommended.");
    }
  }

  /**
   * Gets a license for given awid, productCode, productInstance and uuIdentity.
   * @param {String} awid
   * @param {String} [productCode]
   * @param {String} [productInstance]
   * @param {String} [uuIdentity]
   * @param {Object} [options]
   * @param {Object} [options.session]
   * @returns {Promise<{}>}
   */
  async getLicense(awid, productCode = "", productInstance = "", uuIdentity = "", options = {}) {
    const licenseType = this._getLicenseType(awid, productCode, uuIdentity);
    
    const cacheKey = this._buildCacheKey(awid, productCode, productInstance, uuIdentity);
    let licenseVerificationResult = this._getFromCache(cacheKey, licenseType);
    if (
      !licenseVerificationResult ||
      licenseVerificationResult.licenseData?.validToTs < Date.now() ||
      (!licenseVerificationResult.licenseData &&
        Date.now() - licenseVerificationResult.licenseVerificationTime > this[`_${licenseType}LicenseNegativeCacheTtl`])
    ) {
      licenseVerificationResult = await this._mutex.runOneAtTime(
        cacheKey,
        this._loadLicense.bind(this),
        awid,
        productCode,
        productInstance,
        uuIdentity,
        options,
      );
      this._updateCache(cacheKey, licenseType, licenseVerificationResult);
    }

    return licenseVerificationResult.licenseData;
  }

  async _loadLicense(awid, productCode, productInstance, uuIdentity, options) {
    if (!this._licenseKitService) {
      const licenseType = this._getLicenseType(awid, productCode, uuIdentity);
      return {
        licenseData: await this._getLocalLicense(licenseType, awid),
        licenseVerificationTime: Date.now(),
      }
    }

    const searchKey = this._buildSearchKey(awid, productCode, productInstance, uuIdentity);
    const session =
      options?.session ||
      (await AuthenticationService.authenticate(
        { systemIdentity: this._asid },
      ));

    let licenseData;
    try {
      let itemList = (await this._licenseKitService.listBySearchkey(searchKey, session)).itemList;

      // TODO check for active license by state and time
      // licenseData = itemList.find((license) => license.state === "active") || null;
      // if (!licenseData) {
      //   const now = new Date();
      //   licenseData = itemList.find((license) => {
      //     return license.validFrom <= now && license.validTo >= now;
      //   });
      // }

      // TODO this is only temporary solution as there may be more results now
      itemList.sort((a, b) => {
        if (a.sys.cts < b.sys.cts) return 1;
        if (a.sys.cts > b.sys.cts) return -1;
        return 0;
      });
      licenseData = itemList[0] || null;
    } catch (e) {
      throw new LicenseLoadFailedError({}, { searchKey, uuIdentity: session?.getIdentity()?.getUuIdentity() }, e);
    }

    return {
      licenseData,
      licenseVerificationTime: Date.now(),
    };
  }

  async _getLocalLicense(licenseType, awid) {
    if (![licenseTypeMap.ASID, licenseTypeMap.AWID].includes(licenseType)) {
      // local product and user licenses are not supported
      return null;
    }

    let planCode;
    let licensePlan;
    const license = licenseType === licenseTypeMap.ASID
      ? await this._getAppInstanceLicense()
      : await this._getAppWorkspaceLicense(awid);

    if (!license) {
      if (licenseType === licenseTypeMap.AWID && await this._getAppInstanceLicense()) {
        // awid license is required if asid license is set
        return null;
      }

      this._logger.warn(`License on ${awid === this._asid ? "asid" : "awid"} "${awid}" is not set.`);
      planCode = DEFAULT_PLAN_CODE;
      licensePlan = this._getDefaultPlan(awid);
    } else {
      if (!this._productJson) {
        this._logger.warn("Missing both uuLicenseKit configuration and product.json configuration file.");
        return null;
      }

      planCode = license.planCode;
      licensePlan = (planCode && this._productJson[productMap[licenseType]].licensePlanMap?.[planCode]) || null;

      if (!licensePlan) {
        return null;
      }
    }

    let searchKey = this._buildSearchKey(awid);
    if (searchKey.startsWith(":uuSubAppInstance")) {
      searchKey = "plus4u.net" + searchKey;
    }

    return {
      searchKey,
      productInstanceIdentifier:
        awid === this._asid ? this._getUuSubAppInstanceAppKey() : awid,
      planCode,
      validFromTs: (license?.validFromTs && new Date(license.validFromTs)) || new Date(), // TODO replace with asid / awid initialization time
      validToTs: (license?.validToTs && new Date(license.validToTs)) || new Date(9999, 11, 31, 23, 59, 59, 999),
      state: "active",
      plan: licensePlan,
      customData: {},
    }
  }

  _getDefaultPlan(awid) {
    return {
      name: {
        en: "Unlicensed plan",
      },
      desc: {
        en: `Default plan used for unlicensed ${
          awid === this._asid ? "uuSubAppInstances" : "uuAppWorkspaces"
        }, not intended for production use.`,
      },
      code: "unlicensed",
      productFeatureMap: {},
    };
  }

  _getLicenseType(awid, productCode, uuIdentity) {
    if (awid === this._asid) {
      return licenseTypeMap.ASID;
    } else if (!productCode) {
      return licenseTypeMap.AWID;
    } else if (uuIdentity) {
      return licenseTypeMap.USER;
    } else {
      return licenseTypeMap.PRODUCT;
    }
  }

  _buildCacheKey(awid, productCode, productInstance, uuIdentity) {
    let cacheKey = "";
    if (awid === this._asid) {
      cacheKey += this._asid;
    } else if (!productCode) {
      cacheKey += awid;
    } else {
      cacheKey += `${awid}|${productCode}`;
      if (uuIdentity) {
        cacheKey += `|${productInstance}|${uuIdentity}`;
      } else if (productInstance) {
        cacheKey += `|${productInstance}`;
      }
    }
    return cacheKey;
  }

  _buildSearchKey(awid, productCode, productInstance, uuIdentity) {
    let searchKey = this._getLicensor(awid, productCode);
    if (awid === this._asid) {
      searchKey += `:uuSubAppInstance:${this._getUuSubAppInstanceAppKey()}`;
    } else if (!productCode) {
      searchKey += `:uuAppWorkspace:${awid}`;
    } else {
      searchKey += `:${productCode}`;
      if (uuIdentity) {
        searchKey += `:${productInstance}:${uuIdentity}`;
      } else if (productInstance) {
        searchKey += `:${productInstance}`;
      }
    }
    return searchKey;
  }

  _getLicensor(awid, productCode) {
    if (awid === this._asid) {
      return this._asidLicensorSearchKey || "";
    } else if (!productCode) {
      return this._getUuSubAppInstanceAppKey();
    } else {
      return this._getUuAppWorkspaceKey(awid);
    }
  }

  _getUuSubAppInstanceAppKey() {
    const uri = UseCaseContext.getUri();
    const product = uri?.getProduct();
    return product ? `${product}/${this._asid}` : "";
  }

  _getUuAppWorkspaceKey(awid) {
    const uri = UseCaseContext.getUri();
    const product = uri?.getProduct();
    return product ? `${product}/${awid}` : "";
  }

  _getFromCache(cacheKey, licenseType) {
    switch (licenseType) {
      case licenseTypeMap.ASID:
        return this._asidLicenseCache.get(cacheKey);
      case licenseTypeMap.AWID:
        return this._awidLicenseCache.get(cacheKey);
      case licenseTypeMap.PRODUCT:
        return this._productLicenseCache.get(cacheKey);
      case licenseTypeMap.USER:
        return this._userLicenseCache.get(cacheKey);
      default:
        this._logger.error(`License type "${licenseType}" is not supported.`);
        return null;
    }
  }

  _updateCache(cacheKey, licenseType, value) {
    switch (licenseType) {
      case licenseTypeMap.ASID:
        this._asidLicenseCache.set(cacheKey, value);
        break;
      case licenseTypeMap.AWID:
        this._awidLicenseCache.set(cacheKey, value);
        break;
      case licenseTypeMap.PRODUCT:
        this._productLicenseCache.set(cacheKey, value);
        break;
      case licenseTypeMap.USER:
        this._userLicenseCache.set(cacheKey, value);
        break;
      default:
        this._logger.error(`License type "${licenseType}" is not supported.`);
    }
  }

  async _getAppInstanceLicense() {
    let uuSubAppInstance;
    try {
      uuSubAppInstance = await require("./api/components/app-instance.js").get();
    } catch (e) {
      if (e instanceof SysUuSubAppInstanceDoesNotExistError) {
        return null;
      } else {
        throw e;
      }
    }
    return uuSubAppInstance.license || null;
  }

  async _getAppWorkspaceLicense(awid) {
    let uuAppWorkspace;
    try {
      uuAppWorkspace = await require("./api/components/app-workspace.js").get(awid);
    } catch (e) {
      if (e instanceof SysUuAppWorkspaceDoesNotExistError) {
        return null;
      } else {
        throw e;
      }
    }
    const license = uuAppWorkspace.license;

    if (!license) {
      return null;
    }

    if (!license.planCode) {
      if (license.licenseSize) {
        license.planCode = license.licenseSize;
      } else {
        return null;
      }
    }

    return license;
  }
}

module.exports = new WorkspaceLicenseService();
