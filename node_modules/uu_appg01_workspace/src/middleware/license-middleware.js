"use strict";

const { Config } = require("uu_appg01_core-utils");
const { RouteRegister, UseCaseContext } = require("uu_appg01_core-appserver");
const { LoggerFactory } = require("uu_appg01_core-logging");

const AwidLicenseErrors = require("../api/errors/sys-awid-license-errors.js");
const ErrorPageHelper = require("../helpers/error-page-helper.js");
const ColdLicenseHandler = require("../helpers/cold-license-handler.js");
const MetricsLicenseHandler = require("../helpers/metrics-license-handler.js");

const MIDDLEWARE_NAME = "LicensingMiddleware";
const MIDDLEWARE_ORDER = -75;

const ERROR_UVE = "sys/uuAppWorkspace/licenseErrorUve";

class LicenseMiddleware {
  constructor() {
    this.name = MIDDLEWARE_NAME;
    this.order = MIDDLEWARE_ORDER;
    this.asid = Config.get("asid");
    this.logger = LoggerFactory.get(MIDDLEWARE_NAME);
  }

  async pre(req, res, next) {
    const uri = res.locals.uri;
    const ucProperties = res.locals.ucProperties;
    const awid = uri.getAwid();

    let ucName;
    if (ucProperties) {
      ucName = ucProperties.name || ucProperties._name
    }
    if (!ucName) {
      ucName = uri.getUseCase();
    }

    // TODO this should be handled by appserver - remove after support is added
    if (!UseCaseContext.getAttribute("uuAppErrorMap")) {
      UseCaseContext.setAttribute("uuAppErrorMap", {});
    }

    try {
      await ColdLicenseHandler.handleCall(awid, ucName);
    } catch (e) {
      if (e instanceof AwidLicenseErrors.LicenseExceededError) {
        const reqMethod = req.method.toUpperCase();
        if (RouteRegister.isUve(uri.getUseCase(), uri.getProduct(), reqMethod)) {
          // UVE -> redirect to error page if defined
          this.logger.warn(
            `Uve (${uri.getUseCase()}) can not be run with the current license (${e.paramMap?.licenseSize}).`,
            e,
          );

          if (RouteRegister.get(ERROR_UVE, uri.getProduct(), reqMethod)) {
            return ErrorPageHelper.redirectToCustomErrorPage(next, req, res, ERROR_UVE, e);
          } else {
            let licenceErrorMessage = "";
            let paramMap = e.paramMap;
            if (paramMap && Object.keys(paramMap).length) {
              for (let param in paramMap) {
                if (paramMap[param]) {
                  licenceErrorMessage += `<p><b>${param}:</b> ${paramMap[param]}</p>`
                }
              }
            }
            
            // default error page
            return await ErrorPageHelper.respondWithErrorPage({
              res,
              viewFile: "license-error-page.html",
              params: {
                  errorId: e.id,
                  errorCode: e.code,
                  errorMessage: e.message,
                  licenceErrorMessage,
                },
              error: e,
            });
          }
        }

        this.logger.warn(
          `uuCommand (${uri.getUseCase()}) can not be run with the current license (${e.paramMap?.licenseSize}).`,
          e,
        );

        // CMD -> throw error
        return next(e);
      } else {
        return next(e);
      }
    }

    try {
      await MetricsLicenseHandler.handleCall(this.asid, ucName);
      if (this.asid !== awid) {
        await MetricsLicenseHandler.handleCall(awid, ucName);
      }
    } catch (e) {
      return next(e);
    }

    return next();
  }
}

module.exports = LicenseMiddleware;
