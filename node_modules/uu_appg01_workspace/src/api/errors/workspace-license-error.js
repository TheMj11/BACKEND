const WorkspaceError = require("./workspace-error.js");

const UC_CODE = `${WorkspaceError.APP_WORKSPACE_LIB_ERROR_PREFIX}license/`;

class UuLicenseKitBaseUriNotConfiguredError extends WorkspaceError {
  constructor() {
    super(...arguments);
    this.message = "uuLicenseKitBaseUri is not configured.";
    this.code = `${UC_CODE}uuLicenseKitBaseUriIsNotConfigured`;
  }
}

class LicenseDoesNotExistError extends WorkspaceError {
  constructor() {
    super(...arguments);
    this.message = "License does not exist.";
    this.code = `${UC_CODE}licenseDoesNotExist`;
  }
}

class LicenseLoadFailedError extends WorkspaceError {
  constructor() {
    super(...arguments);
    this.message = "License load has failed.";
    this.code = `${UC_CODE}licenseLoadHasFailed`;
  }
}

class UnableToObtainMeterProviderError extends WorkspaceError {
  constructor() {
    super(...arguments);
    this.message = "Unable to obtain meter provider.";
    this.code = `${UC_CODE}unableToObtainMeterProvider`;
    this.status = 500;
  }
}

class UnableToObtainMeterError extends WorkspaceError {
  constructor() {
    super(...arguments);
    this.message = "Unable to obtain meter.";
    this.code = `${UC_CODE}unableToObtainMeter`;
    this.status = 500;
  }
}

class UnableToObtainMetricError extends WorkspaceError {
  constructor() {
    super(...arguments);
    this.message = "Unable to obtain metric.";
    this.code = `${UC_CODE}unableToObtainMetric`;
    this.status = 500;
  }
}

module.exports = {
  UuLicenseKitBaseUriNotConfiguredError,
  LicenseDoesNotExistError,
  LicenseLoadFailedError,
  UnableToObtainMeterProviderError,
  UnableToObtainMeterError,
  UnableToObtainMetricError,
};
