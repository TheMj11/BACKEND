/* eslint-disable */

const asidSysStateList = array(oneOf(["created", "active", "restricted"]), 1, 3);
const awidSysStateList = array(oneOf(["created", "assigned", "initial", "beingInitialized", "active", "restricted", "suspended", "closed", "readOnly"]), 1, 9);
const licensePolicyType = oneOf(["licensed", "notLicensed"]);

const awidUseCase = shape({
  sysStateList: awidSysStateList(),
  profileList: array(string()).isRequired(),
  disabledInTierList: array(code().isRequired(), 32),
  licensePolicy: licensePolicyType()
});

const asidUseCase = shape({
  sysStateList: asidSysStateList(),
  profileList: array(string()).isRequired(),
  disabledInTierList: array(code().isRequired(), 32),
  licensePolicy: licensePolicyType()
});

const profilesPrivilegedPart = shape({
  profileList: array(code()).isRequired(),
  tierList: array(code().isRequired(), 1, 32),
  useCaseMap: map(string(), asidUseCase()).isRequired()
});

const profilesType = shape({
  '{tid}-{asid}': profilesPrivilegedPart().isRequired('{asid}'),
  '{asid}': profilesPrivilegedPart(),
  '*': shape({
    profileList: array(code()).isRequired(),
    tierList: array(code().isRequired(), 1, 32),
    useCaseMap: map(string(), awidUseCase()).isRequired()
  }).isRequired()
});

const planType = oneOf(["preview", "standard", "cold"]);

const planCode = string("^[a-zA-Z0-9_~/&-. ]{1,25}$");

const licenseType = shape({
  licensePlanMap: map(
    planCode(),
    shape({ planType: planType() }),
  ).isRequired(),
  licensePlanTypeRestrictionMap: map(
    planType(),
    shape({ restrictedUseCaseList: array(string()) }),
  ).isRequired(),
});

const nameLsiMap = map(
  string(2, 16).isRequired(),
  string(2, 64).isRequired(),
  1,
  64,
);

const descLsiMap = map(
  string(2, 16).isRequired(),
  string(1024).isRequired(),
  1,
  64,
);

const productFeature = shape({
  name: nameLsiMap().isRequired(),
  desc: descLsiMap().isRequired(),
  featureType: oneOf(["consumption", "tier"]).isRequired(),
  featureData: shape({
    metricCode: string(/^[^.]{1,64}(?:\.[^.]{1,64}){2}$/).isRequired(["tier"]),
    tier: code().isRequired(["metricCode"]),
    attributes: map(code().isRequired(), oneOf([string(), number(), boolean()]), 16),
    maxConsumption: number(null).isRequired(["tier"]),
    warnThreshold: number(null),
    warnThresholdUnit: oneOf(["percentage", "number"]),
  }).isRequired(),
});

const licensePlan = shape({
  name: nameLsiMap().isRequired(),
  desc: descLsiMap().isRequired(),
  productFeatureMap: map(
    code().isRequired(),
    productFeature().isRequired(),
    16,
  ).isRequired(),
});

const productDefinition = shape({
  name: string(2, 64).isRequired(),
  desc: string(1024).isRequired(),
  licensePlanMap: map(
    planCode().isRequired(),
    licensePlan().isRequired(),
    64,
  ).isRequired(),
});

const productType = shape({
  schemaVersion: oneOf(["1.0"]).isRequired(),
  uuSubAppInstance: productDefinition().isRequired(),
  uuAppWorkspace: productDefinition().isRequired(),
});
