/* eslint-disable */
const artifactCode = string(/[a-zA-Z0-9_\/~&-.]{3,128}/);

const license = shape({
  planCode: string("^[a-zA-Z0-9_~/&-. ]{1,25}$").isRequired(),
  licenseUri: uri(),
  licensor: uri(),
  licensee: uri(),
  validFromTs: datetime(),
  validToTs: datetime(),
});

const sysUuSubAppInstanceInitDtoInType = shape({
  name: string(64),
  description: string(256),
  authorizationStrategy: oneOf(["roleGroupInterface", "uuIdentityList", "boundArtifact"]).isRequired("uuAppProfileAsidAuthorities"),
  uuAppProfileAsidAuthorities: uri().isRequired("authorizationStrategy"),
  baseRegistryUri: uri(),
  sysState: oneOf(["active", "restricted"]),
  adviceNote: sysAdviceNoteDtoInType(),
  uuAsidEeCredentialsInitToken: string(32),
  // roleGroupInterface auth strategy
  roleGroupUriMap: map(string(), uri(true), 32),
  // uuIdentityList auth strategy
  permissionMap: map(uuIdentity(), array(string(), 1, 32)),
  // boundArtifact auth strategy
  uuTerritoryBaseUri: uri(true),
  boundArtifactId: id(),
  boundArtifactCode: artifactCode(),
  boundArtifactProfileMap: map(string(), array(string(), 1, 32), 32),
  license: license(),
});

const sysUuSubAppInstanceSetDtoInType = shape({
  name: string(64),
  description: string(),
  baseRegistryUri: uri(),
  adviceNote: sysAdviceNoteDtoInType()
});

const sysUuSubAppInstanceSetLicenseDtoInType = license();

const sysUuSubAppInstanceSetActiveSysStateDtoInType = shape({
  adviceNote: sysAdviceNoteDtoInType()
});

const sysUuSubAppInstanceSetRestrictedSysStateDtoInType = shape({
  adviceNote: sysAdviceNoteDtoInType()
});

const getConfigInstanceParameterDtoInType = shape({
  key: string()
});

const setConfigInstanceParameterDtoInType = shape({
  asid: hexa32Code(),
  key: string()
});

const sysUuSubAppInstanceSetAuthStrategyDtoInType = shape({
  authorizationStrategy: oneOf(["roleGroupInterface", "uuIdentityList", "boundArtifact"]).isRequired(),
  // boundArtifact
  uuTerritoryBaseUri: uri(true),
  boundArtifactId: id(),
  boundArtifactCode: artifactCode(),
  boundArtifactProfileMap: map(string(), array(string(), 1, 32), 32),
  // roleGroupInterface
  roleGroupUriMap: map(string(), uri(true), 32),
  // uuIdentityList
  permissionMap: map(uuIdentity(), array(string(), 1, 32))
});

const sysUuSubAppInstanceGetLogAccessAttributesDtoInType = shape({
  ttl: integer(1, 90 * 24 * 60 * 60),
  maxUseCaseCallCount: integer(0, null)
});

const sysUuSubAppInstanceGetLicenseDtoInType = shape({});
