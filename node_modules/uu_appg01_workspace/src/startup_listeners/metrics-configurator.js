"use strict";

const { Sys, UseCaseContext } = require("uu_appg01_core-appserver");
const { AuthenticationService } = require("uu_appg01_core-authentication");
const { LoggerFactory } = require("uu_appg01_core-logging");
const { UriBuilder } = require("uu_appg01_core-uri");
const { Config } = require("uu_appg01_core-utils");
const SysAppDataStoreStatsAbl = require("../abl/sys-app-data-store-stats-abl.js");
const SysAppDataStoreStatsErrors = require("../api/errors/sys-app-data-store-errors");
const DataStoreStatsMetricProvider = require("../helpers/data-store-stats-metric-provider.js");

const ASID = Config.getString("asid");
const UU_APP_METRICS_ENABLED = Config.getBoolean("uu_app_metrics_enabled");

const LOGGER = LoggerFactory.get("UuApp.AppWorkspace.MetricsConfigurator");

class MetricsConfigurator {
  async onStartup() {
    if (UU_APP_METRICS_ENABLED) {
      const { MeterProviderFactory } = require("uu_app_metricsg01");
      const meterProvider = MeterProviderFactory.get();

      const uuAwsDsMeter = meterProvider.getMeter("uuAwsDs");
      const awidDataSizeGauge = uuAwsDsMeter.getInstrument("dataSize");
      const awidSysSizeGauge = uuAwsDsMeter.getInstrument("sysSize");
      const awidDataIndexSizeGauge = uuAwsDsMeter.getInstrument("dataIndexSize");
      const awidSysIndexSizeGauge = uuAwsDsMeter.getInstrument("sysIndexSize");
      const awidDataCountGauge = uuAwsDsMeter.getInstrument("dataCount");
      const awidSysCountGauge = uuAwsDsMeter.getInstrument("sysCount");

      const uuAsidDsMeter = meterProvider.getMeter("uuAsidDs");
      const asidDataSizeGauge = uuAsidDsMeter.getInstrument("dataSize");
      const asidSysSizeGauge = uuAsidDsMeter.getInstrument("sysSize");
      const asidDataIndexSizeGauge = uuAsidDsMeter.getInstrument("dataIndexSize");
      const asidSysIndexSizeGauge = uuAsidDsMeter.getInstrument("sysIndexSize");
      const asidDataCountGauge = uuAsidDsMeter.getInstrument("dataCount");
      const asidSysCountGauge = uuAsidDsMeter.getInstrument("sysCount");

      const dataStoreStatsMeter = meterProvider.getMeter("DataStoreStats");
      const calcDurationGauge = dataStoreStatsMeter.getInstrument("calcDuration");
      const calcEndTimeGauge = dataStoreStatsMeter.getInstrument("calcEndTime");
      const calcStatusGauge = dataStoreStatsMeter.getInstrument("calcStatus");

      // TODO ObjectStoreg01Driver

      const objectStoreg01AwidMeter = meterProvider.getMeter("ObjectStoreg01Awid");
      const objectDataSizeGauge = objectStoreg01AwidMeter.getInstrument("dataSize");
      const objectSysSizeGauge = objectStoreg01AwidMeter.getInstrument("sysSize");
      const objectDataIndexSizeGauge = objectStoreg01AwidMeter.getInstrument("dataIndexSize");
      const objectSysIndexSizeGauge = objectStoreg01AwidMeter.getInstrument("sysIndexSize");
      const objectDataCountGauge = objectStoreg01AwidMeter.getInstrument("dataCount");
      const objectSysCountGauge = objectStoreg01AwidMeter.getInstrument("sysCount");
      const objectSchemaCountGauge = objectStoreg01AwidMeter.getInstrument("schemaCount");

      const uuAwsObjDsSchemaMeter = meterProvider.getMeter("ObjectStoreg01AwidSchema");
      const schemaSizeGauge = uuAwsObjDsSchemaMeter.getInstrument("objectSizeSum");
      const schemaIndexSizeGauge = uuAwsObjDsSchemaMeter.getInstrument("indexSize");
      const schemaCountGauge = uuAwsObjDsSchemaMeter.getInstrument("objectCount");
      const schemaMaxNoiGauge = uuAwsObjDsSchemaMeter.getInstrument("maxNoi");
      const schemaMaxSoiGauge = uuAwsObjDsSchemaMeter.getInstrument("maxSoi");
      
      const uuAppBinaryStoreg02AwidMeter = meterProvider.getMeter("uuAppBinaryStoreg02Awid");
      const binarySizeGauge = uuAppBinaryStoreg02AwidMeter.getInstrument("size");
      const binaryCountGauge = uuAppBinaryStoreg02AwidMeter.getInstrument("count");

      await UseCaseContext.create(async () => {
        let gateway = Config.getString("uu_app_gateway_uri") || "https://uuapp.plus4u.net";
        gateway = gateway.trim().replace(/\/$/, "");
        const appInfo = Sys.getAppInfo();
        const uuSubApp = appInfo.uuSubApp.replace("-server", "");
        UseCaseContext.setUri(
          UriBuilder.parse(`${gateway}/${uuSubApp}/${ASID}/sys/uuAppDataStore/stats/privilegedCalculate`),
        );
        UseCaseContext.setSession(await AuthenticationService.authenticate({ systemIdentity: ASID }));
        const runPrivilegedCalculate = () => {
          SysAppDataStoreStatsAbl.privilegedCalculate(ASID, {})
            .then(() => {
              DataStoreStatsMetricProvider.getMetricData(true);
            })
            .catch((e) => {
              if (
                !(e instanceof SysAppDataStoreStatsErrors.StatsPrivilegedCalculate.CalculationAlreadyInProgress) &&
                !(e instanceof SysAppDataStoreStatsErrors.StatsPrivilegedCalculate.CalculatedRecently)
              ) {
                LOGGER.error("Recalculation of sysAppDataStoreStats failed.", e);
              }
            })
            .finally(() => {
              setTimeout(runPrivilegedCalculate, DataStoreStatsMetricProvider.getDataStoreStatsCalculationPeriod());
            });
        };
        runPrivilegedCalculate();
      });

      try {
        await DataStoreStatsMetricProvider.loadMetricData();
      } catch (e) {
        LOGGER.error("Loading of sysAppDataStoreStats failed.", e);
      }

      uuAwsDsMeter.addBatchObservableCallback(
        (batchObservableResult) => {
          let asidDataSize = 0;
          let asidSysSize = 0;
          let asidDataIndexSize = 0;
          let asidSysIndexSize = 0;
          let asidDataCount = 0;
          let asidSysCount = 0;
          const metricData = DataStoreStatsMetricProvider.getMetricData();
          const loadTime = DataStoreStatsMetricProvider.getLastDataLoadTime();
          for (const [awid, stats] of metricData) {
            // uuAppWorkspace aggregated values
            const uuAppWorkspaceAttributes = { awid };
            batchObservableResult.observe(awidDataSizeGauge, stats.dataSize - stats.sysSize, uuAppWorkspaceAttributes);
            batchObservableResult.observe(awidSysSizeGauge, stats.sysSize, uuAppWorkspaceAttributes);
            batchObservableResult.observe(awidDataIndexSizeGauge, stats.indexSize - stats.sysIndexSize, uuAppWorkspaceAttributes);
            batchObservableResult.observe(awidSysIndexSizeGauge, stats.sysIndexSize, uuAppWorkspaceAttributes);
            batchObservableResult.observe(awidDataCountGauge, stats.count - stats.sysCount, uuAppWorkspaceAttributes);
            batchObservableResult.observe(awidSysCountGauge, stats.sysCount, uuAppWorkspaceAttributes);
            
            batchObservableResult.observe(calcDurationGauge, stats.calcEndTs && new Date(stats.calcEndTs) - new Date(stats.calcStartTs), uuAppWorkspaceAttributes);
            batchObservableResult.observe(calcEndTimeGauge, stats.calcEndTs && new Date(stats.calcEndTs).getTime(), uuAppWorkspaceAttributes);
            batchObservableResult.observe(calcStatusGauge, this._getCalculationStatus(stats, loadTime), uuAppWorkspaceAttributes);

            for (const [dataStore, dataStoreStats] of Object.entries(stats.dataStoreMap)) {
              if (dataStoreStats.type === "uuAppObjectStore") {
                // uuAppObjectStore aggregated values
                const uuAppObjectStoreAttributes = { ...uuAppWorkspaceAttributes, dsname: dataStore };
                batchObservableResult.observe(objectDataSizeGauge, dataStoreStats.dataSize - dataStoreStats.sysSize, uuAppObjectStoreAttributes);
                batchObservableResult.observe(objectSysSizeGauge, dataStoreStats.sysSize, uuAppObjectStoreAttributes);
                batchObservableResult.observe(objectDataIndexSizeGauge, dataStoreStats.indexSize - dataStoreStats.sysIndexSize, uuAppObjectStoreAttributes);
                batchObservableResult.observe(objectSysIndexSizeGauge, dataStoreStats.sysIndexSize, uuAppObjectStoreAttributes);
                batchObservableResult.observe(objectDataCountGauge, dataStoreStats.count - dataStoreStats.sysCount, uuAppObjectStoreAttributes);
                batchObservableResult.observe(objectSysCountGauge, dataStoreStats.sysCount, uuAppObjectStoreAttributes);
                batchObservableResult.observe(objectSchemaCountGauge, Object.keys(dataStoreStats.schemaMap).length, uuAppObjectStoreAttributes);

                if (awid === ASID) {
                  asidDataSize += (dataStoreStats.dsDataSize - dataStoreStats.dsSysSize);
                  asidSysSize += dataStoreStats.dsSysSize;
                  asidDataIndexSize += dataStoreStats.dsIndexSize;
                  asidSysIndexSize += dataStoreStats.dsSysIndexSize;
                  asidDataCount += (dataStoreStats.dsDataCount - dataStoreStats.dsSysCount);
                  asidSysCount += dataStoreStats.dsSysCount;
                }

                for (const [schema, schemaStats] of Object.entries(dataStoreStats.schemaMap)) {
                  // schema values
                  const schemaAttributes = { ...uuAppObjectStoreAttributes, schema };
                  batchObservableResult.observe(schemaSizeGauge, schemaStats.size, schemaAttributes);
                  batchObservableResult.observe(schemaIndexSizeGauge, schemaStats.indexSize, schemaAttributes);
                  batchObservableResult.observe(schemaCountGauge, schemaStats.count, schemaAttributes);
                  batchObservableResult.observe(schemaMaxNoiGauge, schemaStats.maxNoi, schemaAttributes);
                  batchObservableResult.observe(schemaMaxSoiGauge, schemaStats.maxSoi, schemaAttributes);
                }
              } else if (dataStoreStats.type === "uuAppBinaryStoreg02") {
                // uuAppBinaryStoreg02 aggregated values
                const uuAppBinaryStoreg02Attributes = { ...uuAppWorkspaceAttributes, dsname: dataStore }
                batchObservableResult.observe(binarySizeGauge, dataStoreStats.size, uuAppBinaryStoreg02Attributes);
                batchObservableResult.observe(binaryCountGauge, dataStoreStats.count, uuAppBinaryStoreg02Attributes);

                asidDataSize += dataStoreStats.size;
                asidDataCount += dataStoreStats.count;
              }
            }
          }

          // uuSubAppInstance aggregated values
          const asidAttributes = { asid: ASID };
          batchObservableResult.observe(asidDataSizeGauge, asidDataSize, asidAttributes);
          batchObservableResult.observe(asidSysSizeGauge, asidSysSize, asidAttributes);
          batchObservableResult.observe(asidDataIndexSizeGauge, asidDataIndexSize, asidAttributes);
          batchObservableResult.observe(asidSysIndexSizeGauge, asidSysIndexSize, asidAttributes);
          batchObservableResult.observe(asidDataCountGauge, asidDataCount, asidAttributes);
          batchObservableResult.observe(asidSysCountGauge, asidSysCount, asidAttributes);
        },
        [
          awidDataSizeGauge,
          awidSysSizeGauge,
          awidDataIndexSizeGauge,
          awidSysIndexSizeGauge,
          awidDataCountGauge,
          awidSysCountGauge,

          asidDataSizeGauge,
          asidSysSizeGauge,
          asidDataIndexSizeGauge,
          asidSysIndexSizeGauge,
          asidDataCountGauge,
          asidSysCountGauge,

          calcDurationGauge,
          calcEndTimeGauge,
          calcStatusGauge,

          objectDataSizeGauge,
          objectSysSizeGauge,
          objectDataIndexSizeGauge,
          objectSysIndexSizeGauge,
          objectDataCountGauge,
          objectSysCountGauge,
          objectSchemaCountGauge,

          schemaSizeGauge,
          schemaIndexSizeGauge,
          schemaCountGauge,
          schemaMaxNoiGauge,
          schemaMaxSoiGauge,

          binarySizeGauge,
          binaryCountGauge,
        ],
      );
    }
  }

  _getCalculationStatus(stats, now = new Date()) {
    if (stats.state) {
      return 0;
    }

    let lockExpiration = stats["sys"]["lockExpTs"];
    let result;

    if (lockExpiration) {
      result = lockExpiration >= now ? 1 : 2;
    } else if (stats["calcStartTs"] == null || stats["calcStartTs"] != null && stats["calcStartTs"] < stats["calcEndTs"]) {
      result = 0;
    } else {
      result = 2;
    }

    return result;
  }
}

module.exports = MetricsConfigurator;
