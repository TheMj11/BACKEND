const Fs = require("fs-extra");

const upgradeVersion = __filename.replace(/.*upgrade-(.*)\.js$/, "$1");

module.exports = async function (config, templateInfo) {
  let { type } = templateInfo;

  // skip upgrade for projects validated by uu5 devkit
  if (type.startsWith("uu5-")) {
    return;
  }

  // only migrate existing .eslintrc.js files
  if (!Fs.existsSync(".eslintrc.js")) {
    return;
  }

  console.log(`${upgradeVersion} Updating eslint configuration to use the new flat config format.`);
  console.log(`${upgradeVersion} Copying new eslint.config.js into the project directory.`);

  // if the eslint.config.js already exists, we will not overwrite it
  if (Fs.existsSync("eslint.config.js")) {
    if (Fs.readFileSync("eslint.config.js", "utf-8").includes("uu_appg01_devkit/src/config/eslint.config.js")) {
      console.warn(`${upgradeVersion} eslint.config.js already exists. Skipping the rest of the eslint upgrade.`);
      return;
    }

    console.warn(
      `${upgradeVersion} eslint.config.js already exists. You should merge your custom configuration with the standard config from "uu_appg01_devkit/src/config/eslint.config.js" that is built to support the flat config format.`
    );
    return;
  }

  Fs.copySync(require.resolve("../templates/eslint.config.js"), "eslint.config.js");

  const existingConfig = Fs.readFileSync(".eslintrc.js", "utf-8");
  const modificationRegex = /plugins|extends|rules/g;
  const modified = existingConfig.match(modificationRegex);

  if (modified) {
    console.warn(
      `${upgradeVersion} Your existing .eslintrc.js file contains some modifications that will not be automatically migrated. To perform the migration, please extend the new config as per this guide: https://eslint.org/docs/latest/use/configure/migration-guide. After you have migrated your changes, you may delete the old .eslintrc.js file.`
    );
    return;
  }

  console.log(`${upgradeVersion} Removing the old .eslintrc.js file.`);
  Fs.unlinkSync(".eslintrc.js");
};
