const Fs = require("fs/promises");
const Path = require("path");
const Package = require("./package.js");

async function exists(file) {
  try {
    await Fs.access(file, Fs.constants.R_OK);
    return true;
  } catch (e) {
    return false;
  }
}

class ProductGenerator {
  static async generate(options) {
    return new ProductGenerator(options).generate();
  }

  constructor(options) {
    this.name = options.name;
    this.outputPath = options.outputPath || ".";
  }

  async generate() {
    await Promise.all([
      this._generateUuAppJson(),
      this._copy("templates/gitattributes", ".gitattributes"),
      this._copy("templates/gitignore", ".gitignore"),
      this._copy("templates/.editorconfig", ".editorconfig"),
      this._copy("templates/README.md", "README.md"),

      // enable beta versions if requested
      process.env.UUAPP_DEV_ENABLED
        ? this._copy("templates/__npmrc-dev", ".npmrc")
        : process.env.UUAPP_BETA_ENABLED
          ? this._copy("templates/__npmrc", ".npmrc")
          : null,
    ]);
  }

  async _generateUuAppJson() {
    let { name, outputPath } = this;
    let uuAppJsonPath = Path.join(outputPath, "uuapp.json");
    if (!(await exists(uuAppJsonPath))) {
      let json = {
        product: Package.parseProduct(name).product,
        version: "0.1.0",
        license: "License Commercial",
        description: { en: "", cs: "" },
      };
      await Fs.writeFile(uuAppJsonPath, JSON.stringify(json, null, 2), "utf-8");
    }
  }

  async _copy(fromRelative, toRelative) {
    let { outputPath } = this;
    let to = Path.join(outputPath, toRelative);
    if (!(await exists(to))) {
      let from = Path.join(__dirname, fromRelative);
      await Fs.copyFile(from, to);
    }
  }
}

module.exports = ProductGenerator;
