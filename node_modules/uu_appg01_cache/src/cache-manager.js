"use strict";

const { BaseError, Config, Json } = require("uu_appg01_core-utils");
const { LoggerFactory } = require("uu_appg01_core-logging");
const CacheConfig = require("./libs/cache-config-loader.js");
const CacheRealizationFactory = require("./libs/cache-realization-factory.js");

// verify that only one version of cache manager is loaded
const { DuplicateLibraryValidator } = require("uu_appg01_core-utils");
DuplicateLibraryValidator.ensureSingleVersion(module);

const MONITOR_LOGGER = LoggerFactory.get("UuApp.Cache.Monitor");
const CACHE_MONITOR_PERIOD_CONFIG_NAME = "uu_app_cache_monitor_period";
const CACHE_MONITOR_PERIOD_DEFAULT = 60;

class CacheManager {
  constructor() {
    this._caches = new Map();
    this._config = null;
    this._monitorInterval = null;
    this.reload();
  }

  /**
   * Reloads cache caches from configuration and initializes them.
   */
  reload() {
    CacheRealizationFactory.reload();
    this._caches = new Map();
    let cacheList = Object.keys(CacheConfig.config.caches);
    cacheList.forEach((code) => this.createCache(code));
    this._scheduleMonitor();
  }

  /**
   * Gets an instantiated cache specified by code.
   * @param {string} code - cache code
   * @returns {CacheRealization}
   */
  getCache(code) {
    if (!code) {
      throw new BaseError("No cache specified.");
    }
    if (!this._caches.has(code)) {
      throw new BaseError(`Cache ${code} does not exist.`);
    }
    return this._caches.get(code);
  }

  /**
   * Creates a new cache specified by code.
   * @param {string} code - cache code
   * @param {object} config - cache configuration
   * @returns {CacheRealization}
   */
  createCache(code, config = {}) {
    if (!code) {
      throw new BaseError("No cache specified.");
    }
    if (this._caches.has(code)) {
      throw new BaseError(`Cache ${code} already exists.`);
    }
    const cache = CacheRealizationFactory.create(code, config);
    this._caches.set(code, cache);
    return cache;
  }

  listCaches() {
    return [...this._caches.keys()];
  }

  _scheduleMonitor() {
    if (this._monitorInterval) {
      clearInterval(this._monitorInterval);
    }
    if (!MONITOR_LOGGER.isInfoLoggable()) {
      return;
    }
    const period = Config.get(CACHE_MONITOR_PERIOD_CONFIG_NAME) || CACHE_MONITOR_PERIOD_DEFAULT;
    if (period <= 0) {
      return;
    }
    this._monitorInterval = setInterval(() => this._monitor(), period * 1000);
  }

  _monitor() {
    const stats = {};
    cacheManager
      .listCaches()
      .map((code) => cacheManager.getCache(code))
      .filter((cache) => cache.getMetrics)
      .forEach((cache) => {
        stats[cache.code] = cache.getMetrics();
      });
    MONITOR_LOGGER.info(Json.stringify(stats));
  }
}

const cacheManager = new CacheManager();

module.exports = cacheManager;
