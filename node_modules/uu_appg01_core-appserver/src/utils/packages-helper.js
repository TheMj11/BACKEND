"use strict";

const Cp = require("child_process");

const { LoggerFactory } = require("uu_appg01_core-logging");

class PackagesHelper {
  
  constructor() {
    this.logger = LoggerFactory.get("UuApp.AppServer.PackagesHelper");
  }

  /**
   * Returns (node) packages used by the uuApp.
   */
  async getUuAppPackages() {
    if (!this.appPackages) {
      const start = Date.now();
      this.appPackages = await this._getListOfPackages();
      const end = Date.now();
      if (this.logger.isDebugLoggable()) {
        this.logger.debug(`Collection of uuApp packages (count: ${this.appPackages?.[0]?.length}) was gathered in ${end - start} ms.`);
      }
    }
    return this.appPackages;
  }

  async _getListOfPackages() {
    return new Promise((resolve, reject) => {
      Cp.exec("npm ls --long --parseable --depth Infinity", (err, stdout, stderr) => {
        let pkgs = stdout.split("\n");
        let deps = new Set();
        pkgs.forEach(pkg => {
          let dep = pkg.split(":")[1];
          if (dep) {
            deps.add(dep);
          }
        });
        deps = Array.from(deps);
        deps.sort();
        let errorMap = null;
        if (err) {
          errorMap = {
            "uu-app-server/sysGetEnvironment/libraryListProblem": {
              type: "warning",
              message: `Library list may be incomplete:\n${err}`
            }
          }
        }
        resolve([deps, errorMap]);
      });
    });
  }

}

module.exports = new PackagesHelper();
