"use strict";

// MongDB driver uses zstd library for compression, which relies on native libraries.
// These native libraries are installed via optional dependencies and relies on fact
// that failure of optional dependency install does not fail whole npm install. So it
// has optional dependency on native libraries for all supported platforms where only
// the library matching current platform passes the install and all other fails.

// When uuApp is built, we are by default omitting optional (and development) dependencies
// resulting native libraries for zstd are not installed at all. Therefore we are explicitly
// installing zstd native dependencies via postinstall script.

const Fs = require("fs");
const Path = require("path");
const Process = require("process");
const ChildProcess = require("child_process");
const Crypto = require("crypto");

// Read location where zstd is installed
let packageJsonPath
try {
  packageJsonPath = require.resolve("@mongodb-js/zstd/package.json");
} catch (e) {
  return; // Zstd is not installed, nothing to do
}

// Prepare temporary directory to install native libraries to (we are using this
// to prevent npm from resolving and installing of parent dependencies)
let zstdPath = Path.dirname(packageJsonPath);
let zstdNativePath = `${zstdPath}-native-${Crypto.randomUUID()}`;
Fs.mkdirSync(zstdNativePath, {recursive: true});
Fs.writeFileSync(Path.join(zstdNativePath, "package.json"), "{}");

// Copy project npmrc file to honor possible configuration of private repository
let npmrcPath = Path.join(Process.env.INIT_CWD || Process.cwd(), ".npmrc");
if (Fs.existsSync(npmrcPath)) {
  Fs.copyFileSync(npmrcPath, Path.join(zstdNativePath, ".npmrc"));
}

// Try to install native libraries
let packageJson = JSON.parse(Fs.readFileSync(packageJsonPath));
for (let [name, version] of Object.entries(packageJson.optionalDependencies || {})) {
  ChildProcess.spawnSync("npm", ["install", "--no-workspaces", "--no-save", `${name}@${version}`], { shell: true, stdio: "ignore", cwd: zstdNativePath});
}

// Check if installation succeeded
let installedNodeModulesPath = Path.join(zstdNativePath, "node_modules");
if (!Fs.existsSync(installedNodeModulesPath)) {
  throw new Error("Installation of native zstd library used by MongoDB driver failed. See npm logs for details.");
}

// Move created temporary node_modules as internal dependency of zstd library
Fs.rmSync(Path.join(zstdPath, "node_modules"), {recursive: true, force: true});
Fs.renameSync(installedNodeModulesPath, Path.join(zstdPath, "node_modules"));
Fs.rmSync(zstdNativePath, {recursive: true, force: true});
