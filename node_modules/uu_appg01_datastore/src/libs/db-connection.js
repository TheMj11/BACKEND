const { Config } = require("uu_appg01_core-utils");
const MongoClient = require("mongodb").MongoClient;

const MONGO_CLIENT_COMPRESSORS = Config.getString("uu_app_objectstore_mongoclientoptions_compressors");
const MONGO_CLIENT_OPTS = {
  compressors: ["zstd", "zlib"],
};

class DbConnection {
  constructor() {
    this._connectionsMap = {};
  }

  async _connect(uri, opts = {}) {
    let mongoClientOpts = { ...MONGO_CLIENT_OPTS };

    if (MONGO_CLIENT_COMPRESSORS) {
      if (MONGO_CLIENT_COMPRESSORS === "none") {
        delete mongoClientOpts.compressors;
      } else {
        mongoClientOpts.compressors = MONGO_CLIENT_COMPRESSORS.split(",");
      }
    }
    
    return await MongoClient.connect(uri, { ...mongoClientOpts, ...opts });
  }

  async getDbClient(uri) {
    let dbClient;
    if (this._connectionsMap[uri]) {
      dbClient = await this._connectionsMap[uri];
    } else {
      this._connectionsMap[uri] = await this._connect(uri);
      dbClient = this._connectionsMap[uri];
    }
    return dbClient;
  }

  async get(uri) {
    const dbClient = await this.getDbClient(uri);
    return dbClient.db();
  }

  async closeAllConnections() {
    let promises = Object.values(this._connectionsMap).map(async (dbClient) => {
      (await dbClient).close();
    });
    await Promise.all(promises);
    this._connectionsMap = {};
  }

  init(uri, opts = {}) {
    if (!this._connectionsMap[uri]) {
      this._connectionsMap[uri] = this._connect(uri, opts);
    }
  }
}

module.exports = new DbConnection();
