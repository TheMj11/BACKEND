"use strict";

const { LoggerFactory } = require("uu_appg01_core-logging");
const { Config, Mutex } = require("uu_appg01_core-utils");
const { DaoFactory } = require("uu_appg01_objectstore");

const auditLogLogStoreConfig = require("./audit-log-log-store-config.js");
const auditLogTransferService = require("./audit-log-transfer-service.js");

const ASID = Config.getString("asid");
const LOGGER = LoggerFactory.get();

const CALL_TRANSFER_SIG = "callTransfer";

/**
 * Service for transferring audit log records to destination LogStores.
 */
class AuditLogTransferTrigger {
  constructor() {
    this._config = auditLogLogStoreConfig;
    this._sysAuditLogConfigDao = DaoFactory.getDao("sysAuditLogConfig");
    this._appLogStoreNotTransferredCount = 0;
    this._lastTransferDate = new Date();
    this._mutex = new Mutex();
  }

  async checkTriggerTransfer(uuAppErrorMap = {}) {
    if (this._config.isLogStoreEnabled()) {
      this._appLogStoreNotTransferredCount++;
      if (this._appLogStoreNotTransferredCount >= this._config.getAppLogStoreTransferAfterCount()) {
        this._mutex.runOneAtTime(CALL_TRANSFER_SIG, this._callTransfer.bind(this), uuAppErrorMap);
      } else if (this._checkTimeTransferCondition(this._lastTransferDate)) {
        const sysAuditLogConfig = await this._sysAuditLogConfigDao.getByAwid(ASID);
        if (
          sysAuditLogConfig?.latestTransferDate &&
          this._checkTimeTransferCondition(sysAuditLogConfig.latestTransferDate)
        ) {
          this._mutex.runOneAtTime(CALL_TRANSFER_SIG, this._callTransfer.bind(this), uuAppErrorMap);
        }
      }
    }
  }

  _checkTimeTransferCondition(lastTransferDate) {
    return (Date.now() - Date.parse(lastTransferDate)) / 1000 / 60 >= this._config.getAppLogStoreTransferAfterTime();
  }

  async _callTransfer(uuAppErrorMap) {
    const previousLastTransferDate = this._lastTransferDate;
    this._lastTransferDate = new Date();
    const toTransferCount = this._appLogStoreNotTransferredCount;
    this._appLogStoreNotTransferredCount = 0;
    LOGGER.info(
      `Transferring AuditLog Records to uuAppLogStore ${this._config.getAppLogStoreUri()}. Count ${toTransferCount}.`,
    );
    try {
      await auditLogTransferService.transfer(uuAppErrorMap, false, false);
      LOGGER.info("Transferring AuditLog Records finished without error.");
    } catch (e) {
      LOGGER.error(
        `Failed to transfer AuditLog Records to uuAppLogStores ${this._config.getActiveLogStoreKeyList().join(", ")}`,
        e,
      );
      this._lastTransferDate = previousLastTransferDate;
      // FIXME This should be optimized, as a failure causes the system to try to transfer with every new log.
      this._appLogStoreNotTransferredCount = toTransferCount;
    }
  }
}

module.exports = new AuditLogTransferTrigger();
