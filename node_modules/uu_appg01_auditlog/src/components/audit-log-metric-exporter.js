"use strict"

const Crypto = require("crypto");
const Process = require("process");

const { Sys } = require("uu_appg01_core-appserver");
const { Config } = require("uu_appg01_core-utils");
const { LoggerFactory } = require("uu_appg01_core-logging");
const { DaoFactory } = require("uu_appg01_objectstore");
const { MetricExporter } = require("uu_app_metricsg01");

const AuditLog = require("../auditlog.js");

const APP_INFO = Sys.getAppInfo();

const ENV_NODE_NAME = "UU_CLOUD_NODE_NAME";
const PARAM_EXPORT_INTERVAL_MS = "uu_app_auditlog_metrics_export_interval_ms";
const EXPORT_INTERVAL_MS_DEFAULT = 3600000;

class AuditLogMetricExporter extends MetricExporter {
  constructor(meterProviderName, options = {}) {
    super(meterProviderName, options);
    this._configDao = DaoFactory.getDao("sysAuditLogConfig");
    this._asid = Config.get("asid");
    this._logger = LoggerFactory.get("uuapp.auditlog.AuditLogMetricExporter");
    this._nodeName = Process.env[ENV_NODE_NAME] || `uuappg01-${APP_INFO.uuSubApp.replace("-server", "")}-${Crypto.randomUUID()}`;
    this._exportLockTtl = (Config.getNumber(PARAM_EXPORT_INTERVAL_MS) || EXPORT_INTERVAL_MS_DEFAULT) / 60000;
  }

  async export(metrics, callback) {
    if (this._shutdown) {
      // If the exporter is shutting down, by spec, we need to return FAILED as export result
      setImmediate(callback, { code: 1 });
      return;
    }

    const exportLockObtained = await this._configDao.obtainMetricsExportLock(this._asid, this._nodeName, this._exportLockTtl);
    if (!exportLockObtained) {
      const sysAuditLogConfig = await this._configDao.getByAwid(this._asid);
      const metricsExportLock = sysAuditLogConfig?.metricsExportLock;
      if (metricsExportLock) {
        this._logger.info(
          "Metrics exporting not triggered because it is locked. It was probably started by another node. " +
          `lockedBy ${metricsExportLock.lockedBy}, lockedSince ${metricsExportLock.lockedSince}, lockTtl ${this._exportLockTtl}`
        );
      }
    } else {
      await AuditLog.log("INFO", "uuApp/metrics", "Metrics collected.", metrics.uuAppMetrics || {});
    }

    setTimeout(() => callback({ code: 0 }), 0);
  }
}

module.exports = AuditLogMetricExporter;
