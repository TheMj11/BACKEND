const { DaoFactory, DuplicateKey } = require("uu_appg01_objectstore");
const { LoggerFactory } = require("uu_appg01_core-logging");
const { Config } = require("uu_appg01_core-utils");
const LogStoreConfig = require("../components/audit-log-log-store-config");
const WARNINGS = require("../api/warnings/sys-auditlog-warning.js");

class Startup {
  /**
   * Initializing auditLog schemas on server start.
   */
  async onStartup() {
    if (DaoFactory.isDataStoreOn()) {
      const dao = require("../abl/sys-audit-log-abl.js").dao;
      const configDao = require("../abl/sys-audit-log-abl.js").configDao;
      await dao.createSchema();
      await configDao.createSchema();

      const logger = LoggerFactory.get("uuapp.auditlog.SysAuditLogAbl");

      // create auditLogConfig if it does not exist
      const asid = Config.get("asid");
      let asidConfig = await configDao.getByAwid(asid);
      if (!asidConfig) {
        asidConfig = { awid: asid, latestTransferredLogId: null, latestTransferDate: null, latestTransferState: null };
        let appLogStoreMap = {};
        LogStoreConfig.checkAndUpdateAppLogStoreMap(appLogStoreMap);
        if (Object.keys(appLogStoreMap).length) {
          asidConfig.logStoreMap = appLogStoreMap;
        }

        try {
          await configDao.create(asidConfig);
        } catch (e) {
          if (e instanceof DuplicateKey) {
            logger.warn(WARNINGS.configRecordCreate.configRecordWasCreated.message);
          } else {
            throw e
          }
        }
      } else {
        let logStoreMapUpdated = false;
        if (!asidConfig.logStoreMap) {
          let appLogStoreMap = {};
          logStoreMapUpdated = LogStoreConfig.checkAndUpdateAppLogStoreMap(appLogStoreMap);
          if (logStoreMapUpdated) {
            asidConfig.logStoreMap = appLogStoreMap;
          }
        } else {
          logStoreMapUpdated = LogStoreConfig.checkAndUpdateAppLogStoreMap(asidConfig.logStoreMap);
          if (!Object.keys(asidConfig.logStoreMap).length) {
            asidConfig.logStoreMap = null;
            logStoreMapUpdated = true;
          }
        }
        if (logStoreMapUpdated) {
          await configDao.updateById(asidConfig.id, asidConfig);
        }
      }
    }
  }
}

module.exports = Startup;
