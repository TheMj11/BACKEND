"use strict";

const Cache = require("./cache.js");

/**
 * Browser friendly implementation of LRU cache with support of persisting
 * cache to browser local storage.
 * @deprecated Replaced by generic Cache component
 */
class LruCache extends Cache {

  /**
   * Creates new instance of cache.
   * @param {Object|null} opts Cache options
   * @param {number} opts.maxSize Maximal number of items to be stored
   * @param {number} opts.maxAge How long (in milliseconds) should items be stored
   * @param {String} opts.localStorageKey If set, cache will be persisted to browser
   *   local storage. Local storage key should contain product identification to
   *   avoid conflicting names between various components.
   */
  constructor(opts = {}) {
    opts = {...opts, evictionPolicy: "lru"};
    super(opts);
  }

  /**
   * Stores value into cache.
   * @param key Key to access cached value
   * @param value Value to be cached
   * @param maxAge How long (in milliseconds) should this value be stored (overrides global maxAge)
   * @returns {*} Value previously stored under this key (or null if none)
   */
  set(key, value, maxAge = null) {
    let origValue = super.set(key, value, maxAge);
    return origValue === undefined ? null : origValue;
  }

  /**
   * Returns value from cache.
   * @param key Key of cached value
   * @returns {*} Cached value (or null)
   */
  get(key) {
    let value = super.get(key);
    return value === undefined ? null : value;
  }

  /**
   * Deletes value from cache.
   * @param key Key of cached value
   * @returns {*} Cached value (or null)
   */
  delete(key) {
    let value = super.delete(key);
    return value === undefined ? null : value;
  }

  /**
   * Return an array of the keys in the cache.
   * @return {Array} List of the keys in the cache.
   */
  keys() {
    let result = [];
    this.forEach((key, value) => {
      result.push(key);
    });
    return result;
  }

  /**
   * Return an array of the values in the cache.
   * @return {Array} List of the values in the cache.
   */
  values() {
    let result = [];
    this.forEach((key, value) => {
      result.push(value);
    });
    return result;
  }

}

module.exports = LruCache;
