const path = require("path");
const util = require("util");
const ncp = require("ncp");
const promisified_ncp = util.promisify(ncp.ncp);
const StringUtil = require("uu_appg01_devkit-common/src/tools/string-util.js");
const fs = require("fs-extra");
const ensureDir = util.promisify(fs.ensureDir);

const { processFile } = require("uu_appg01_devkit-common/src/tools/template-helpers.js");
const { fileExists } = require("../tools/helpers");
const ConfigAdjuster = require("./cmd_generator/config-adjuster");
const ExecutionQueue = require("./cmd_generator/execution-queue");

module.exports = class GenerateCmd {
  constructor(config) {
    this.config = config;
    this.sourceCodePath = null;
  }

  async process() {
    let projectPath = process.cwd();
    let appPath = path.join(projectPath, "app");
    let hiPath = path.join(projectPath.replace("-server", "-hi"), "src");
    if (await fileExists(appPath)) {
      this.sourceCodePath = appPath;
    } else {
      console.log(`The current project ${process.cwd()} does not have app folder. Nothing can be done here...`);
      process.exit(1);
    }

    let context = await this.getContext(projectPath);

    let executionQueue = new ExecutionQueue();
    await new ConfigAdjuster(context, executionQueue).execute();
    console.log("Creating backup of current project");
    await this.generateApiConsoleUve(context, hiPath);
    await this.backupProject(context);
    await executionQueue.execute(true);
  }

  async getContext(projectPath, privileged = false) {
    return {
      appName: this.getAppName(projectPath),
      sourceCodePath: this.sourceCodePath,
      useCase: `sys/${privileged ? "uuSubAppInstance" : "uuAppWorkspace"}/apiConsole`,
      useCaseType: "UVE",
      realization: "api-console.html",
      httpMethod: "GET",
      profiles: ["Authenticated"],
      sysStates: ["created", "assigned", "beingInitialized", "restricted", "active", "readOnly", "suspended", "closed"],
      isPrivileged: privileged,
    };
  }

  getAppName(projectPath) {
    let name = path.basename(projectPath);
    name = name.split("-")[0];
    let parts = name.split("_");
    if (parts.length < 2) {
      name = `uu_${parts[0].replace(/g\d{2}$/, "")}`;
    } else {
      name = `${parts[0]}_${parts[1].replace(/g\d{2}$/, "")}`
    }
    name = StringUtil.camelCase(name);
    name = name.charAt(0).toLowerCase() + name.slice(1);
    return name;
  }

  async generateApiConsoleUve(context, srcPath) {
    if (!(await fileExists(srcPath))) {
      return console.log(`The project ${srcPath} does not have src folder. UVE ${context.useCase} cannot be generated.`);
    }

    let htmlFilePath = path.join(srcPath, "api-console.html");
    if (await fileExists(htmlFilePath)) {
      console.log(`The file ${htmlFilePath} already exists.`);
    } else {
      console.log(`Creating ${htmlFilePath}`);
      let templatePath = path.normalize(`${__dirname}/cmd_generator/templates/api-console.html`);
      await processFile(templatePath, htmlFilePath, context);
    }

    let jsFilePath = path.join(srcPath, "api-console.js");
    if (await fileExists(jsFilePath)) {
      console.log(`The file ${jsFilePath} already exists.`);
    } else {
      console.log(`Creating ${jsFilePath}`);
      let templatePath = path.normalize(`${__dirname}/cmd_generator/templates/api-console.js`);
      await processFile(templatePath, jsFilePath, context);
    }
  }
  
  async backupProject(context) {
    let targetDir = path.join(process.cwd(), "target");
    if (!await fileExists(targetDir)) {
      console.log(`Creating ${targetDir}`);
      await ensureDir(targetDir);
    }
    let timestamp = (new Date()).toISOString().replace(/[:T]/g, "-").split(".")[0];
    let ucstamp = context.useCase.replace(/\/+./g, m => m.charAt(m.length - 1).toUpperCase());

    // backup src / app
    let backupFolder = path.join(process.cwd(), "target", `cmd-backup-${timestamp}-${ucstamp}`, this.sourceCodePath.split(path.sep).slice(-1)[0]);
    await ensureDir(backupFolder);
    await promisified_ncp(this.sourceCodePath, backupFolder);

    // backup test
    let testPath = path.join(process.cwd(), "test");
    if (!await fileExists(testPath)) {
      return;
    }
    backupFolder = path.join(process.cwd(), "target", `cmd-backup-${timestamp}-${ucstamp}`, "test");
    await ensureDir(backupFolder);
    await promisified_ncp(testPath, backupFolder);
  }
};
