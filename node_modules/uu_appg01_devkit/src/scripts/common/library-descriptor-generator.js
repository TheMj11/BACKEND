const path = require("path");
const fs = require("fs");

const Package = require("uu_appg01_devkit-common/src/tools/package.js");

const SCHEMA_VERSION = "1.1.0";

class LibraryDescriptorGenerator {
  constructor(
    projectRoot,
    projectName,
    projectVersion,
    targetDir,
    buildConfig,
    dependencies,
    loaderSettings,
    projectType,
    workspaceLibraries,
  ) {
    this.projectRoot = projectRoot;
    this.projectName = projectName;
    this.projectVersion = projectVersion;
    this.projectType = projectType;
    this.targetDir = targetDir;
    this.dependencies = dependencies || {};
    this.loaderSettings = loaderSettings || {};
    this.buildConfig = buildConfig;
    this.isPartOfMultiLib = !!workspaceLibraries;
    this.workspaceLibraries = workspaceLibraries || [];
  }

  static transformLegacyDescriptor(legacyDescriptor, type, flsUri, slsUri, license) {
    if (!legacyDescriptor) return legacyDescriptor;
    let list = Array.isArray(legacyDescriptor) ? legacyDescriptor : [legacyDescriptor];
    let version = list[0].versionList && list[0].versionList[0] && list[0].versionList[0].version;
    let generation = parseFloat((list[0].name.match(/g(\d\d)/) || {})[1]) || 0;
    let uuApp =
      (list[0].name.startsWith(list[0].vendor + "_") ? "" : list[0].vendor + "_") + list[0].name.replace(/g\d\d.*/, "");
    let libraryList = list.map((it) => ({
      code: it.code,
      name: it.name,
      type,
      license,
      desc: it.desc,
      docUri: it.doc,
      imageUri: it.image,
      flsUri,
      slsUri,
      sourceUri: it.source ? it.source.replace(/%s/, () => version) : it.source,
      dependencyMap: (it.versionList && it.versionList[0] && it.versionList[0].dependencyMap) || it.dependencyMap,
    }));
    let descriptor = {
      schemaVersion: SCHEMA_VERSION,
      version,
      generation,
      uuApp,
      libraryList,
    };
    return descriptor;
  }

  generateLibraryDescriptor() {
    let descriptorPath = path.resolve(
      this.targetDir,
      `${this.projectName}-${this.projectVersion}-library-descriptor.json`,
    );
    descriptorPath = path.relative(".", descriptorPath);

    let parsedProduct = Package.parseProduct(this.projectName);
    let { imageUri, docUri, namespace, description, componentList, license } = this.buildConfig.getAll();
    let version = this.projectVersion;
    let slsUri = this.buildConfig.get("slsUri");
    let libraryDescriptor = {
      schemaVersion: SCHEMA_VERSION,
      version,
      generation: parseFloat((this.projectName.match(/g(\d\d)/) || {})[1]) || 0,
      uuApp:
        (parsedProduct.name.startsWith(parsedProduct.vendor + "_") ? "" : parsedProduct.vendor + "_") +
        parsedProduct.name.replace(/g\d\d.*/, ""),
      libraryList: [
        {
          code: namespace,
          name: parsedProduct.name,
          type: this.projectType,
          license,
          desc: description,
          docUri,
          imageUri,
          flsUri: this.buildConfig.get("flsUri"),
          ...(slsUri ? { slsUri } : undefined),
        },
      ],
      componentList: !componentList
        ? undefined
        : componentList.map((it) => {
            let { docCode, tagList, code, decorationComponentName, decorationComponentProps, ...result } = it;
            if (code) result.code = code;
            if (tagList || code) result.tagList = tagList || code.split(/\./);
            if (docCode && docUri) {
              let url = new URL(docUri);
              url.searchParams.set("code", docCode);
              if (url.pathname.match(/\/book\/?$/)) url.pathname = url.pathname.replace(/(\/book)\/?$/, "$1/page");
              result.docUri = url.toString();
            }
            if (!result.libraryCode) result.libraryCode = namespace;
            if (!result.imageUri) delete result.imageUri; // omit as uuAppLibraryRegistry no longer allows "" as valid value (and existing projects can have it there)
            return result;
          }),
    };

    if (!this.projectVersion.match(/[-.][a-zA-Z]/)) {
      let requiredFields = ["docUri", "flsUri", "imageUri"];
      let emptyFields = requiredFields.filter((it) => !libraryDescriptor.libraryList[0][it]);
      if (emptyFields.length > 0) {
        let keyPrefix = this.isPartOfMultiLib ? "" : path.basename(path.resolve(".")) + ".";
        throw new Error(
          `Missing uuapp.json keys: ${emptyFields
            .map((it) => keyPrefix + it)
            .join(", ")} (required for non-beta versions).`,
        );
      }
    }

    fs.writeFileSync(descriptorPath, JSON.stringify(libraryDescriptor, null, 2));
    return { descriptor: libraryDescriptor, descriptorPath };
  }
}

module.exports = LibraryDescriptorGenerator;
