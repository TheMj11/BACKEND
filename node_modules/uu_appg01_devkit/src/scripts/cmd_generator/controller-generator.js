const util = require("util");
const path = require("path");
const fs = require("fs-extra");
const fs_readFile = util.promisify(fs.readFile);
const fs_writeFile = util.promisify(fs.writeFile);
const { evalTemplate, processFile } = require("uu_appg01_devkit-common/src/tools/template-helpers.js");
const { verifyClass, fileExists } = require("../../tools/helpers");
const os = require("os");

const METHOD_PARAM_MAP = {
  uri: "ucEnv.getUri()",
  awid: "ucEnv.getUri().getAwid()",
  asid: "ucEnv.getUri().getAwid()",
  dtoIn: "ucEnv.getDtoIn()",
  session: "ucEnv.getSession()",
  authorizationResult: "ucEnv.getAuthorizationResult()"
};

class ControllerGenerator {

  constructor(context, executionQueue) {
    this.context = JSON.parse(JSON.stringify(context));
    this.controllerPath = path.normalize(`${context.sourceCodePath}/api/controllers/${context.classFile}-controller.js`);
    this.controllerMethodTemplate = path.normalize(`${__dirname}/templates/controller-method.js`);
    this.controllerTemplate = path.normalize(`${__dirname}/templates/controller.js`);
    this.twoPhaseCmdControllerTemplate = path.normalize(`${__dirname}/templates/controller-two-phase-cmd.js`);
    this.executionQueue = executionQueue;
  }

  async execute() {
    // prepare the parameters to pass onot model
    let ctrlParams = [];
    this.context.controllerParams.forEach(param => ctrlParams.push(METHOD_PARAM_MAP[param]));
    this.context.controllerParams = ctrlParams.join(", ");

    let finalizeCmdName = `_${this.context.cmdName}Finalize`;
    let finalizeRollbackCmdName = `_${this.context.cmdName}FinalizeRollback`;

    if (await fileExists(this.controllerPath)) {
      console.log(`Checking contents of ${this.controllerPath}`);
      let currentController = await fs_readFile(this.controllerPath, "utf8");
      verifyClass(currentController, this.context.isTwoPhase ? [this.context.cmdName, finalizeCmdName, finalizeRollbackCmdName] : this.context.cmdName);
      let cmdMethods = await evalTemplate(this.controllerMethodTemplate, this.context);
      let idx = currentController.indexOf("class"); // class starts here
      idx = currentController.indexOf("{", idx) + 1; // class' body starts here
      if (this.context.isTwoPhase) {
        cmdMethods += os.EOL + await evalTemplate(this.controllerMethodTemplate, {...this.context, cmdName: finalizeCmdName});
        cmdMethods += os.EOL + await evalTemplate(this.controllerMethodTemplate, {...this.context, cmdName: finalizeRollbackCmdName});
      }
      let newController = `${currentController.substring(0, idx)}${os.EOL}${os.EOL}  ${cmdMethods.trim()}${currentController.substring(idx)}`;
      this.executionQueue.addEvent(async () => {
        console.log(`Modifying ${this.controllerPath}`);
        await fs_writeFile(this.controllerPath, newController);
      });
    } else {
      this.context.cmdMethod = await evalTemplate(this.controllerMethodTemplate, this.context);
      if (this.context.isTwoPhase) {
        this.context.finalizeCmdMethod = await evalTemplate(this.controllerMethodTemplate, {...this.context, cmdName: finalizeCmdName});
        this.context.finalizeRollbackCmdMethod = await evalTemplate(this.controllerMethodTemplate, {...this.context, cmdName: finalizeRollbackCmdName});
      }
      this.executionQueue.addEvent(async () => {
        console.log(`Creating ${this.controllerPath}`);
        await processFile(this.context.isTwoPhase ? this.twoPhaseCmdControllerTemplate : this.controllerTemplate, this.controllerPath, this.context);
      });
    }
  }

}

module.exports = ControllerGenerator;
