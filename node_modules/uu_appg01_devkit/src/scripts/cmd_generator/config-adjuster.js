const path = require("path");
const { fileExists } = require("../../tools/helpers");
const util = require("util");
const fs = require("fs-extra");
const fs_readFile = util.promisify(fs.readFile);
const fs_writeFile = util.promisify(fs.writeFile);

class ConfigAdjuster {

  constructor(context, executionQueue) {
    this.context = JSON.parse(JSON.stringify(context));
    this.mappingsPath = path.normalize(`${context.sourceCodePath}/config/mappings.json`);
    this.profilesPath = path.normalize(`${context.sourceCodePath}/config/profiles.json`);
    this.keyName = context.useCase;
    if (context.isTwoPhase) {
      if (context.useCase.toLowerCase().indexOf(`${context.entity.toLowerCase()}/`) === 0) {
        let lastDelimeterIndex = context.useCase.lastIndexOf("/");
        this.finalizeKeyName = `${context.useCase.slice(0, lastDelimeterIndex + 1)}_${context.useCase.slice(lastDelimeterIndex + 1)}Finalize`;
        this.finalizeRollbackKeyName = `${context.useCase.slice(0, lastDelimeterIndex + 1)}_${context.useCase.slice(lastDelimeterIndex + 1)}FinalizeRollback`;
      } else {
        this.finalizeKeyName = `_${context.useCase}Finalize`;
        this.finalizeRollbackKeyName = `_${context.useCase}FinalizeRollback`;
      }
      this.finalizeCmdName = `_${context.cmdName}Finalize`;
      this.finalizeRollbackCmdName = `_${context.cmdName}FinalizeRollback`;
    }
    this.executionQueue = executionQueue;
  }

  async execute() {
    await this._adjustMappings();
    await this._adjustProfiles();
  }

  _logDuplicitProfileKey(privileged, keyName) {
    console.log(`${privileged ? "Privileged " : "Standard "} part of profiles.json already contains key "${keyName}" in useCaseMap`);
  }

  _logDuplicitMappingKey(keyName) {
    console.log(`mappings.json already has an endpoint defined for "${keyName}"`);
  }

  async _adjustProfiles() {
    console.log("Checking contents of profiles.json");
    if (await !fileExists(this.profilesPath)) {
      console.log(`Could not find profiles.json in ${this.profilesPath}`);
      process.exit(1);
    }
    let profiles;
    try {
      profiles = JSON.parse(await fs_readFile(this.profilesPath, "utf-8"));
    } catch (e) {
      console.log("profiles.json doesn't contain a valid JSON");
      process.exit(1);
    }

    let privileged = this.context.isPrivileged;
    let relevantPart = privileged ? (profiles["{tid}-{asid}"] || profiles["{asid}"]) : profiles["*"];
    let message;
    if (!relevantPart) {
      message = privileged
        ? `"{tid}-{asid}" (or "{asid}" if the no-tid version is used), is missing from profiles.json`
        : "* is missing from profiles.json";
      console.log(message);
      process.exit(1);
    }

    // merge the profile into profileList (if it is not there already)
    if (!relevantPart.profileList || !relevantPart.profileList instanceof Array) {
      console.log(`${privileged ? "Privileged " : "Standard "} part of profiles.json does not contain "profileList"`);
      process.exit(1);
    }
    relevantPart.profileList.push(...this.context.profiles);
    relevantPart.profileList = Array.from(new Set(relevantPart.profileList));

    if (!relevantPart.useCaseMap) {
      console.log(`${privileged ? "Privileged " : "Standard "} part of profiles.json does not contain "useCaseMap"`);
      process.exit(1);
    }
    if (relevantPart.useCaseMap[this.keyName]) {
      this._logDuplicitProfileKey(privileged, this.keyName);
      process.exit(1);
    }
    relevantPart.useCaseMap[this.keyName] = {
      sysStateList: this.context.sysStates || ["active"], profileList: this.context.profiles
    };
    if (this.context.isTwoPhase) {
      if (relevantPart.useCaseMap[this.finalizeKeyName]) {
        this._logDuplicitProfileKey(privileged, this.finalizeKeyName);
        process.exit(1);
      }
      if (relevantPart.useCaseMap[this.finalizeRollbackKeyName]) {
        this._logDuplicitProfileKey(privileged, this.finalizeRollbackKeyName);
        process.exit(1);
      }
      relevantPart.useCaseMap[this.finalizeKeyName] = {
        sysStateList: ["active"], profileList: ["SystemIdentity"]
      };
      relevantPart.useCaseMap[this.finalizeRollbackKeyName] = {
        sysStateList: ["active"], profileList: ["SystemIdentity"]
      };
    }
    // this makes the arrays stay inline..
    let result = JSON.stringify(profiles, ConfigAdjuster._keepArraysInline, 2)
      .replace(/"\[/g, "[")
      .replace(/]"/g, "]")
      .replace(/\\"/g, "\"")
      .replace(/""/g, "\"");
    this.executionQueue.addEvent(async () => {
      console.log(`Modifying ${this.profilesPath}`);
      await fs_writeFile(this.profilesPath, result);
    });
  }

  async _adjustMappings() {
    console.log("Checking contents of mappings.json");
    if (await !fileExists(this.mappingsPath)) {
      console.log(`Could not find mappings.json in ${this.mappingsPath}`);
      process.exit(1);
    }
    let mappings;
    try {
      mappings = JSON.parse(await fs_readFile(this.mappingsPath, "utf-8"));
    } catch (e) {
      console.log("mappings.json doesn't contain a valid JSON");
      process.exit(1);
    }
    if (!mappings["{vendor}-{uuApp}-{uuSubApp}"] || !mappings["{vendor}-{uuApp}-{uuSubApp}"].useCaseMap) {
      console.log(`Either "{vendor}-{uuApp}-{uuSubApp}" or "useCaseMap" is missing in mappings.json`);
      process.exit(1);
    }
    let useCaseMap = mappings["{vendor}-{uuApp}-{uuSubApp}"].useCaseMap;
    if (useCaseMap.hasOwnProperty(this.keyName)) {
      this._logDuplicitMappingKey(this.keyName);
      process.exit(1);
    }
    const getRealization = (cmdName) => {
      return this.context.realization
        ? this.context.realization
        : `api/controllers/${this.context.className}Controller.${cmdName}`;
    }
    useCaseMap[this.keyName] = {
      "realization": getRealization(this.context.cmdName),
      "httpMethod": this.context.httpMethod,
      "type": this.context.useCaseType || "CMD"
    };
    if (this.context.isTwoPhase) {
      if (useCaseMap.hasOwnProperty(this.finalizeKeyName)) {
        this._logDuplicitMappingKey(this.finalizeKeyName);
        process.exit(1);
      }
      if (useCaseMap.hasOwnProperty(this.finalizeRollbackKeyName)) {
        this._logDuplicitMappingKey(this.finalizeRollbackKeyName);
        process.exit(1);
      }
      useCaseMap[this.finalizeKeyName] = {
        "realization": getRealization(this.finalizeCmdName),
        "httpMethod": "POST",
        "type": "CMD"
      };
      useCaseMap[this.finalizeRollbackKeyName] = {
        "realization": getRealization(this.finalizeRollbackCmdName),
        "httpMethod": "POST",
        "type": "CMD"
      };
    }
    this.executionQueue.addEvent(async () => {
      console.log(`Modifying ${this.mappingsPath}`);
      await fs_writeFile(this.mappingsPath, JSON.stringify(mappings, null, 2));
    });
  }

  static _checkSubset(relevantPart, val, privileged) {
    if (!privileged && val === "Public") {
      return false;
    }
    return relevantPart.profileList.indexOf(val) === -1;
  }

  static _keepArraysInline(k, v) {
    if (v instanceof Array) {
      return JSON.stringify(v);
    }
    return v;
  }

}

module.exports = ConfigAdjuster;
