const <%= context.isPrivileged ? "asid" : "awid"%> = uri.get<%= context.isPrivileged ? "Asid" : "Awid"%>();

    // HDS 1
    let validationResult = this.validator.validate("<%= context.finalizeCmdValidationType%>", dtoIn);
    // A1, A2
    let uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      WARNINGS.<%= context.finalizeCmdName%>UnsupportedKeys.code,
      Errors.<%= context.finalizeCmdErrorName%>.InvalidDtoIn
    );

    // HDS 2
    let controlObject = { <%= context.cmdName%>DataTemporary: {} }; // TODO Load the corresponding object using dao.
    if (!controlObject) {
      // A3
      throw new Errors.<%= context.finalizeCmdErrorName%>.controlObjectDoesNotExist({ uuAppErrorMap }, { awid });
    } else if (controlObject.state !== "active") {
      // A4
      throw new Errors.<%= context.finalizeCmdErrorName%>.controlObjectIsNotInProperState({ uuAppErrorMap }, { state: controlObject.state });
    }
    const progressCode = `<%= context.product%>-progress-<%= context.cmdName%>-${<%= context.isPrivileged ? "asid" : "awid"%>}`;

    // HDS 3
    let sysIdentitySession = await AuthenticationService.authenticateSystemIdentity();
    let progress = {
      code: progressCode,
      lockSecret: dtoIn.lockSecret,
    };
    let progressClient = await ProgressClient.createInstance(controlObject.uuConsoleBaseUri, progress, { session: sysIdentitySession });

    // HDS 4
    // TODO Implement finalize scenario according to application needs here...
    
    // HDS X
    let uuObject = {
      ...controlObject,
      state: "active",
      <%= context.cmdName%>DataTemporary: null,
    };
    // controlObject = await this.dao.updateBy<%= context.isPrivileged ? "Asid" : "Awid"%>(uuObject);

    // HDS X+1
    await progressClient.end({ message: "Process finished successfully", lockSecret: dtoIn.lockSecret });

    // HDS X+2
    return {
      data: controlObject,
      uuAppErrorMap,
    };