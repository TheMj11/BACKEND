/*@@viewOn:imports*/
const AppClient = require("uu_appg01_server").AppClient;
const { UseCaseError } = require("uu_appg01_server").AppServer;
const { ValidationHelper } = require("uu_appg01_server").AppServer;
const { Validator } = require("uu_appg01_server").Validation;
/*@@viewOff:imports*/

/*@@viewOn:errors*/
const Errors = {
  ERROR_PREFIX: "<%= context.scriptLibCode%>/<%= context.useCasePascalCase%>/",

  InvalidDtoIn: class extends UseCaseError {
    constructor(dtoOut, paramMap = {}, cause = null) {
      if (paramMap instanceof Error || paramMap.constructor.name === "ApplicationError") {
        cause = paramMap;
        paramMap = {};
      }
      super({ dtoOut, paramMap, status: 400 }, cause);
      this.message = "DtoIn is not valid.";
      this.code = `${Errors.ERROR_PREFIX}invalidDtoIn`;
    }
  },
};
/*@@viewOff:errors*/

/*@@viewOn:dtoInValidation*/
const DTO_IN_SCHEMA_TYPE = "script<%= context.useCasePascalCase%>DtoInType";
const DTO_IN_SCHEMA = `
  const ${DTO_IN_SCHEMA_TYPE} = shape({
    help: boolean(),
    force: boolean(),
    baseUri: uri().isRequired(),
    progressCode: code().isRequired(),
    consoleCode: code().isRequired(),
    lockSecret: hexa64Code().isRequired(),
  });
`;

function validateDtoIn(dtoIn, uuAppErrorMap = {}) {
  let dtoInValidator = new Validator(DTO_IN_SCHEMA, true);
  let validationResult = dtoInValidator.validate(DTO_IN_SCHEMA_TYPE, dtoIn);
  return ValidationHelper.processValidationResult(dtoIn, validationResult, uuAppErrorMap, `${Errors.ERROR_PREFIX}unsupportedKeys`, Errors.InvalidDtoIn);
}
/*@@viewOff:dtoInValidation*/

/*@@viewOn:scriptBody*/
const { dtoIn, console, session } = scriptContext;

async function main() {
  const dtoOut = {};

  // 1. validate dtoIn
  const uuAppErrorMap = validateDtoIn(dtoIn);

  // TODO Add steps your application needs here...
  // Use StepHandler to update the progress and control object

  // n. call finalize uuCmd
  const appClient = new AppClient({ baseUri: dtoIn.baseUri, session });
  await appClient.cmdPost("<%= context.finalizeUseCase%>", { lockSecret: dtoIn.lockSecret });

  // n+1. return dtoOut
  dtoOut.uuAppErrorMap = uuAppErrorMap;
  return dtoOut;
}

main();
/*@@viewOff:scriptBody*/
