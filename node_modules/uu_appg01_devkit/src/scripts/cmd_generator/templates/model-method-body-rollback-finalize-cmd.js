const <%= context.isPrivileged ? "asid" : "awid"%> = uri.get<%= context.isPrivileged ? "Asid" : "Awid"%>();

    // HDS 1
    let validationResult = this.validator.validate("<%= context.finalizeRollbackCmdValidationType%>", dtoIn);
    // A1, A2
    let uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      WARNINGS.<%= context.finalizeRollbackCmdName%>UnsupportedKeys.code,
      Errors.<%= context.finalizeRollbackCmdErrorName%>.InvalidDtoIn
    );

    // HDS 2
    let controlObject = { <%= context.cmdName%>DataTemporary: {} }; // TODO Load the corresponding object using dao.
    if (!controlObject) {
      // A3
      throw new Errors.<%= context.finalizeRollbackCmdErrorName%>.controlObjectDoesNotExist({ uuAppErrorMap }, { awid });
    } else if (controlObject.state !== "active") {
      // A4
      throw new Errors.<%= context.finalizeRollbackCmdErrorName%>.controlObjectIsNotInProperState({ uuAppErrorMap }, { state: controlObject.state });
    } else {
      // HDS 2.1
      let sysIdentitySession = await AuthenticationService.authenticateSystemIdentity();
      const { uuConsoleUri, progressCode, consoleCode } = controlObject.<%= context.cmdName%>DataTemporary.progressMap;
      let progress = {
        code: progressCode,
        lockSecret: dtoIn.lockSecret,
      };
      let progressClient = await ProgressClient.createInstance(uuConsoleUri, progress, { session: sysIdentitySession });
      let consoleClient = await ConsoleClient.createInstance(uuConsoleUri, { code: consoleCode }, { session: sysIdentitySession });
      
      //HDS 2.2
      // TODO Implement rollback finalize scenario according to application needs here...

      // HDS 2.X
      await consoleClient.update({ code: consoleCode, expireAt: new UuDateTime().shiftDay(24).date });
      await progressClient.proceed({
        code: progressCode,
        message: "uuConsole expiration time set",
        lockSecret,
      });

      // HDS 2.X+1
      let uuObject = {
        ...controlObject,
        <%= context.cmdName%>DataTemporary: null,
      };
      // controlObject = await this.dao.updateByAwid(uuObject);

      // HDS 2.X+2
      await progressClient.end({ message: "Progress ended", lockSecret: dtoIn.lockSecret, expireAt: new UuDateTime().shiftDay(24).date });
    }

    // HDS 3
    return {
      uuAppErrorMap,
    };