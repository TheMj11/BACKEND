const <%= context.isPrivileged ? "asid" : "awid"%> = uri.get<%= context.isPrivileged ? "Asid" : "Awid"%>();

    // HDS 1
    let validationResult = this.validator.validate("<%= context.validationType%>", dtoIn);
    // A1, A2
    let uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      WARNINGS.<%= context.cmdName%>UnsupportedKeys.code,
      Errors.<%= context.errorName%>.InvalidDtoIn
    );

    // HDS 2
    let controlObject = { <%= context.cmdName%>DataTemporary: {} }; // TODO Load the corresponding object using dao.
    if (controlObject) {
      if (controlObject.state && controlObject.state !== "initial") {
        // A3
        throw new Errors.<%= context.errorName%>.<%= context.cmdName.charAt(0).toUpperCase() + context.cmdName.slice(1)%>AlreadyFinished({ uuAppErrorMap }, { state: controlObject.state });
      }
      switch (dtoIn.mode) {
        case "standard": {
          // A4
          throw new Errors.<%= context.errorName%>.<%= context.cmdName.charAt(0).toUpperCase() + context.cmdName.slice(1)%>AlreadyInProgress({ uuAppErrorMap }, { mode: dtoIn.mode });
        }
        case "retry": {
          if (controlObject.initDataTemporary.rollbackMode) {
            // A5
            throw new Errors.<%= context.errorName%>.RollbackNotFinished({ uuAppErrorMap }, { mode: dtoIn.mode });
          }
        }
      }
    } else {
      switch (dtoIn.mode) {
        case "retry": {
          // A6
          throw new Errors.<%= context.errorName%>.<%= context.cmdName.charAt(0).toUpperCase() + context.cmdName.slice(1)%>DidNotStarted({ uuAppErrorMap }, { mode: dtoIn.mode });
        }
        case "rollback": {
          // A7
          throw new Errors.<%= context.errorName%>.NothingToRollback({ uuAppErrorMap }, { mode: dtoIn.mode });
        }
      }
    }

    // HDS 3
    const configuration = {}; // TODO Load configuration for uuConsole, uuScriptRepository and uuScriptEngine.
    const consoleCode = `<%= context.product%>-${<%= context.isPrivileged ? "asid" : "awid"%>}`;
    const progressCode = `<%= context.product%>-progress-<%= context.cmdName%>-${<%= context.isPrivileged ? "asid" : "awid"%>}`;
    const scriptCode = `<%= context.product%>-uuscriptlib/<%= context.classFile%>/<%= context.testFilePrefix%>`;

    // HDS 4
    let <%= context.cmdName%>Data;
    if (dtoIn.mode === "standard") {
      const <%= context.cmdName%>DataTemporary = {
        dtoIn: { ...dtoIn.data },
        stepList: [],
        progressMap: {
          uuConsoleUri: configuration.uuConsoleBaseUri,
          progressCode,
          consoleCode,
        },
      };
      // controlObject = await this.dao.create({ <%= context.isPrivileged ? "asid" : "awid"%>, <%= context.cmdName%>DataTemporary, state: "initial" });
      <%= context.cmdName%>Data = dtoIn.data;
    } else if (dtoIn.mode === "rollback") {
      controlObject.<%= context.cmdName%>DataTemporary.rollbackMode = true;
      if (!controlObject.<%= context.cmdName%>DataTemporary.rollbackStepList) controlObject.<%= context.cmdName%>DataTemporary.rollbackStepList = [];
      // controlObject = await this.dao.updateBy<%= context.isPrivileged ? "Asid" : "Awid"%>({ ...controlObject });
      <%= context.cmdName%>Data = controlObject.<%= context.cmdName%>DataTemporary.dtoIn;
    } else {
      <%= context.cmdName%>Data = controlObject.<%= context.cmdName%>DataTemporary.dtoIn;
    }

    // HDS 5
    let sysIdentitySession = await AuthenticationService.authenticateSystemIdentity();
    let lockSecret = Crypto.randomBytes(32).toString("hex");
    let progress = {
      code: progressCode,
      lockSecret,
    };
    let progressClient = await ProgressClient.get(configuration.uuConsoleBaseUri, progress, { session: sysIdentitySession });
    if (dtoIn.force && progressClient.progress) {
      progressClient.end({ expireAt: new UuDateTime().shiftDay(24).date });
      progressClient.delete();
    }
    progressClient = await ProgressClient.createInstance(configuration.uuConsoleBaseUri, progress, { session: sysIdentitySession });
    await progressClient.start({ message: "Progress was started", lockSecret });
    controlObject.<%= context.cmdName%>DataTemporary.progressMap.lockSecret = lockSecret;
    // controlObject = await this.dao.updateBy<%= context.isPrivileged ? "Asid" : "Awid"%>({ ...controlObject });

    // HDS 6
    if (controlObject.<%= context.cmdName%>DataTemporary.rollbackMode) {
      if (controlObject.<%= context.cmdName%>DataTemporary.stepList.includes("consoleCreated")) {
        // HDS 6.1.1
        // TODO Implement rollback scenario according to application needs here...

        // HDS 6.1.X
        let rollbackScriptCode = `<%= context.product%>-uuscriptlib/<%= context.classFile%>/<%= context.testFilePrefix%>-rollback`;
        let consoleUri = UriBuilder.parse(configuration.uuConsoleBaseUri)
          .setUseCase("console/logMessage")
          .setParameter("code", consoleCode)
          .toUri();
        let scriptUri = UriBuilder.parse(configuration.uuScriptEngineBaseUri)
          .setUseCase("script/get")
          .setParameter("code", rollbackScriptCode)
          .toUri();
        let runScriptDtoIn = {
          scriptUri,
          scriptName: rollbackScriptCode,
          scriptDtoIn: {
            baseUri: uri.toString(),
            progressCode,
            consoleCode,
            lockSecret,
          },
          consoleUri: consoleUri.toString(),
        };
  
        await AppClient.cmdPost(
          UriBuilder.parse(configuration.uuScriptEngineBaseUri).setUseCase("engine/runScript").toUri(),
          runScriptDtoIn,
          { session: sysIdentitySession }
        );
      } else {
        // HDS 6.2.1
        controlObject = await this._<%= context.cmdName%>FinalizeRollback(uri, { lockSecret });
      }
    } else {
      // HDS 6.3.1
      // TODO Implement standard scenario according to application needs here...

      // HDS 6.3.X
      await ConsoleClient.createInstance(configuration.uuConsoleBaseUri, { code: consoleCode }, { session: sysIdentitySession });

      // HDS 6.3.X+1
      controlObject.<%= context.cmdName%>DataTemporary.stepList.push("consoleCreated");
      // controlObject = await this.dao.updateBy<%= context.isPrivileged ? "Asid" : "Awid"%>({ ...controlObject });
      await progressClient.proceed({ message: "Console was created", lockSecret });

      // HDS 6.3.X+2
      let consoleUri = UriBuilder.parse(configuration.uuConsoleBaseUri)
        .setUseCase("console/logMessage")
        .setParameter("code", consoleCode)
        .toUri();
      let scriptUri = UriBuilder.parse(configuration.uuScriptEngineBaseUri)
        .setUseCase("script/get")
        .setParameter("code", scriptCode)
        .toUri();
      let runScriptDtoIn = {
        scriptUri,
        scriptName: scriptCode,
        scriptDtoIn: {
          baseUri: uri.toString(),
          progressCode,
          consoleCode,
          lockSecret,
        },
        consoleUri: consoleUri.toString(),
      };

      await AppClient.cmdPost(
        UriBuilder.parse(configuration.uuScriptEngineBaseUri).setUseCase("engine/runScript").toUri(),
        runScriptDtoIn,
        { session: sysIdentitySession }
      );
    }

    // HDS 7
    return {
      ...controlObject,
      uuAppErrorMap
    };