const util = require("util");
const path = require("path");
const fs = require("fs-extra");
const fs_mkdir = util.promisify(fs.mkdir);
const StringUtil = require("uu_appg01_devkit-common/src/tools/string-util.js");
const { processFile } = require("uu_appg01_devkit-common/src/tools/template-helpers.js");
const { fileExists } = require("../../tools/helpers");

class ScriptGenerator {

  constructor(context, executionQueue) {
    this.context = JSON.parse(JSON.stringify(context));
    let uuAppFolderName = path.join(context.sourceCodePath, "..").split(path.sep).pop();
    this.scriptsFolder = path.join(context.sourceCodePath, "..", "..", uuAppFolderName.replace(/-.*/, "-uuscriptlib"));
    this.scriptTemplate = path.normalize(`${__dirname}/templates/script.js`);
    this.scriptRollbackTemplate = path.normalize(`${__dirname}/templates/script-rollback.js`);
    this.scriptTestTemplate = path.normalize(`${__dirname}/templates/script-test.js`);
    this.executionQueue = executionQueue;
  }

  async execute() {
    if (!this.context.isTwoPhase) {
      return;
    }
    if (!await fileExists(this.scriptsFolder)) {
      console.log(`uuscriptlib folder ${this.scriptsFolder} does not exit`);
      process.exit(1);
    }

    let srcFolder = path.join(this.scriptsFolder, "src");
    let entitySrcFolder = path.join(srcFolder, this.context.entity);
    if (!await fileExists(entitySrcFolder)) {
      console.log(`Creating ${entitySrcFolder}`);
      await fs_mkdir(entitySrcFolder);
    }

    this.srcFiles = [
      path.join(entitySrcFolder, `${this.context.testFilePrefix}.js`),
      path.join(entitySrcFolder, `${this.context.testFilePrefix}-rollback.js`)
    ];
    for (let srcFile of this.srcFiles) {
      if (await fileExists(srcFile)) {
        console.log(`Script file ${srcFile} already exists`);
        process.exit(1);
      }
    }

    if (this.context.testStub) {
      let testsFolder = path.join(this.scriptsFolder, "test");
      let entityTestFolder = path.join(testsFolder, this.context.entity);
      if (!await fileExists(testsFolder)) {
        console.log(`Test folder ${testsFolder} does not exit.`);
        process.exit(1);
      }
      if (!await fileExists(entityTestFolder)) {
        console.log(`Creating ${entityTestFolder}`);
        await fs_mkdir(entityTestFolder);
      }

      this.testFiles = [
        path.join(entityTestFolder, `${this.context.testFilePrefix}.test.js`),
        path.join(entityTestFolder, `${this.context.testFilePrefix}-rollback.test.js`)
      ];
      for (let testFile of this.testFiles) {
        if (await fileExists(testFile)) {
          console.log(`Test file ${testFile} already exists`);
          process.exit(1);
        }
      }
    }

    this.executionQueue.addEvent(async () => {
      let useCasePascalCase = this.context.useCase.charAt(0).toUpperCase() + this.context.useCase.slice(1)
        .replace(/\/+./g, m => m.charAt(m.length - 1).toUpperCase());
      let finalizeUseCase;
      let finalizeRollbackUseCase;
      if (this.context.useCase.toLowerCase().indexOf(`${this.context.entity.toLowerCase()}/`) === 0) {
        let lastDelimeterIndex = this.context.useCase.lastIndexOf("/");
        finalizeUseCase = `${this.context.useCase.slice(0, lastDelimeterIndex + 1)}_${this.context.useCase.slice(lastDelimeterIndex + 1)}Finalize`;
        finalizeRollbackUseCase = `${this.context.useCase.slice(0, lastDelimeterIndex + 1)}_${this.context.useCase.slice(lastDelimeterIndex + 1)}finalizeRollback`;
      } else {
        finalizeUseCase = `_${this.context.useCase}Finalize`;
        finalizeRollbackUseCase = `_${this.context.useCase}FinalizeRollback`;
      }
      let scriptContext = {
        ...this.context,
        scriptLibCode: path.basename(this.scriptsFolder),
        useCasePascalCase,
        finalizeUseCase,
        finalizeRollbackUseCase,
      };

      console.log(`Creating ${this.srcFiles[0]}`);
      await processFile(this.scriptTemplate, this.srcFiles[0], scriptContext);

      console.log(`Creating ${this.srcFiles[1]}`);
      await processFile(this.scriptRollbackTemplate, this.srcFiles[1], scriptContext);

      if (this.context.testStub) {
        for (let testFile of this.testFiles) {
          let scriptName = path.parse(testFile).name.split(".")[0];
          let cmdName = StringUtil.camelCase(scriptName);
          console.log(`Creating ${testFile}`);
          await processFile(this.scriptTestTemplate, testFile, { ...this.context, cmdName, scriptName });
        }
      }
    });
  }

}

module.exports = ScriptGenerator;
