"use strict";

const {Config, Digest} = require("uu_appg01_core-utils");
const {LoggerFactory} = require("uu_appg01_core-logging");
const OidcAbl = require("../abl/oidc-abl.js");

const MIDDLEWARE_ORDER = 75;

const PARAM_UNPROTECTED_REGEXP = "uu_app_authentication_unprotected_uri_regexp";
const PARAM_LOCALHOST_UNPROTECTED_REGEXP = "uu_app_authentication_localhost_unprotected_uri_regexp";
const PARAM_UNPROTECTED_REGEXP_OLD = "uu_oidc_middleware_unprotected_uri_regexp";

const IGNORED_USE_CASE_LIST = [
  "oidc/initOidcClient",
  "sys/uuSubAppInstance/init",
  "sys/uuSubAppInstance/restore",
  "sys/uuAppWorkspace/create"
];

const DEFAULT_UNPROTECTED_REGEXP = ".^";
const DEFAULT_LOCALHOST_UNPROTECTED_REGEXP = "/sys/getHealth(\\?|$)";

const VUC = "VUC";
const UVE = "UVE";
const APPLICATION_JSON = "application/json";

class AccessPolicyVerificationMiddleware {

  constructor() {
    this.name = "Access Policy Verification middleare";
    this.order = MIDDLEWARE_ORDER;
    let unprotectedRegexp = Config.get(PARAM_UNPROTECTED_REGEXP) || Config.get(PARAM_UNPROTECTED_REGEXP_OLD);
    this._unprotectedRegexp = new RegExp(unprotectedRegexp || DEFAULT_UNPROTECTED_REGEXP);
    let localhostUnprotectedRegexp = Config.get(PARAM_LOCALHOST_UNPROTECTED_REGEXP);
    this._localhostUnprotectedRegexp = new RegExp(localhostUnprotectedRegexp || DEFAULT_LOCALHOST_UNPROTECTED_REGEXP);
    this._logger = LoggerFactory.get("uuapp.oidc.AccessPolicyVerificationMiddleware");
  }

  async pre(req, res, next) {
    let uri = res.locals.uri;
    let useCase = res.locals.ucProperties;
    let ucType = useCase.getType();
    let accept = req.headers.accept || "";
    let isAuthorized = res.locals.authorizationResult?.isAuthorized();
    let authorizedProfiles = res.locals.authorizationResult?.getAuthorizedProfileList();
    if (this._unprotectedRegexp.test(req.path) || IGNORED_USE_CASE_LIST.find(path => req.path.endsWith(path))
        || (uri && uri.getHostname() === "localhost" && this._localhostUnprotectedRegexp.test(uri.toString()))) {
      // Do not verify access policy on "unprotected" endpoints
      return next();
    } else if ((ucType == UVE || ucType == VUC) && !accept.includes(APPLICATION_JSON)) {
      // Do not verify access policy for UVE
      return next();
    } else if (isAuthorized && authorizedProfiles.length === 0) {
      // Do not verify access policy when authorized only to Public profile
      // (Public profile is not added to authorized profiles, therefore we
      // check empty profiles list, which is ok, as we have passed authorization)
      return next();
    } else {
      let session = res.locals.session;
      let serviceName = session.getServiceName();
      let verifyAccessPolicy = Config.getBoolean(`uu_app_oidc_providers_${serviceName}_verify_access_policy`);
      if (!verifyAccessPolicy) {
        return next();
      }
      try {
        await OidcAbl.verifyAccessPolicy(uri.getAwid(), session);
      } catch (e) {
        let token = session._idToken || session._accessToken;
        if (token) {
          let tokenInfo;
          if ((token.match(/\./g) || []).length === 2) {
            // For id_token log only its payload
            tokenInfo = token.split(".")[1];
          } else {
            // For access_token log sufix and whole token hash to be able to find token in db
            tokenInfo = `${token.substr(token.length - 5)}.${Digest.sha1(token)}`
          }
          this._logger.error(`Untrusted session: ${tokenInfo}`, e);
        }
        return next(e);
      }
      return next();
    }
  }

}

module.exports = AccessPolicyVerificationMiddleware;
