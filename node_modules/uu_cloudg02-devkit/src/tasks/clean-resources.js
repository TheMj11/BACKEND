"use strict";

const Environment = require("../environment.js");
const DevkitBaseError = require("../errors/devkit-base-error.js");
const Resource = require("../client/resource.js");
const ResourceIfc = require("../client/resource-ifc.js");
const Help = require("../utils/help.js");

const printHelp = function(isInProjectScope) {
  Help.print(
    "The task cleans unused uuAppResources in uuAppResourcePool. Task parameters are:",
    isInProjectScope ?
      [
        ["environment", "Environment for which to execute the task."],
      ]
    :
      [
        ["uuAppResourcePoolOid", "Identification of uuAppResourcePool."],
        [],
        ["credentialsFile", "Path to credentials file containing accessCodes to receive call token from identity provider."],
        ["identityProviderUri", "Uri of identity provider used to issue call token."]
      ],
    {paramPrefix: "--"}
  );
}

module.exports = async function (environment, ...args) {
  let env = new Environment(environment, ...args);
  if (env.getArgumentValue("help") !== undefined) {
    printHelp(env.isInProjectScope());
    return;
  }

  let cloudDescriptor = env.getCloudg02Descriptor();
  let appResourcePoolOid = env.getArgumentValue("uuAppResourcePoolOid") || cloudDescriptor.uuSubAppDeploymentConfig && cloudDescriptor.uuSubAppDeploymentConfig.uuAppResourcePoolOid;
  if (!appResourcePoolOid || appResourcePoolOid === Environment.REQUIRED_VALUE_PLACEHOLDER) {
    throw new DevkitBaseError("Missing parameter: uuAppResourcePoolOid");
  }
  
  let resourceClient = new Resource(env);
  let resourceIfc = new ResourceIfc(env);

  let stateList = ["created", "allocated", "allocatedProblem", "suspended", "suspendedProblem", "cancelled", "closed"];
  let { itemList: uuAppResourceList } = await resourceIfc.listResourcesByStateList(appResourcePoolOid, stateList);

  uuAppResourceList = uuAppResourceList.filter(resource => !resource.uuAppWorkloadOid);

  if (!uuAppResourceList.length) {
    console.log(`\nThere are no uuAppResources in uuAppResourcePool ${appResourcePoolOid} to clean.\n`);
    return;
  }

  console.log(`\n> Deleting ${uuAppResourceList.length} unused uuAppResource(s) in uuAppResourcePool ${appResourcePoolOid}...`);

  for (const resource of uuAppResourceList) {
    if (["cancelled", "closed"].includes(resource.state)) {
      continue;
    }

    try {
      await resourceClient.close(resource.uuAppResourceType, resource.oid);
    } catch (e) {
      resource.failedToClose = true;
      console.error(`Closing ${resource.uuAppResourceType} ${resource.oid} failed: ` + e);
    }
  }

  for (const resource of uuAppResourceList) {
    if (resource.failedToClose) {
      continue;
    }

    try {
      await resourceClient.delete(resource.uuAppResourceType, resource.oid);
      console.log(`${resource.uuAppResourceType} ${resource.oid} successfully deleted`);
    } catch (e) {
      console.error(`Deleting ${resource.uuAppResourceType} ${resource.oid} failed: ` + e);
    }
  }
};
