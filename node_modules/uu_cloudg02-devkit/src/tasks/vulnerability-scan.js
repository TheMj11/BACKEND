"use strict";

const Fs = require("fs");
const Os = require("os");
const Path = require("path");
const Process = require("process");
const ChildProcess = require("child_process");
const Environment = require("../environment.js");
const DevkitBaseError = require("../errors/devkit-base-error.js");
const ChildProcessError = require("../errors/child-process-error.js");
const AppBox = require("../client/app-box.js");
const Help = require("../utils/help.js");
const TrivyScanConverter = require("../utils/trivy-scan-converter.js");

const printHelp = function (isInProjectScope) {
  Help.print(
    "The task generates security scan report of uuApp. Task parameters are:",
    isInProjectScope ?
      [
        ["environment", "Environment for which to execute the task."],
        [],
        ["uuAppPackBuildTool", "Preferred uuAppPack build tool used for generating report (one of [\"docker\", \"podman\"])."],
      ]
    :
      [
        ["uuAppBoxUri", "The uuApp Box URI of the application."],
        ["reportDirPath", "Path to folder where the scan report should be exported [defaults to ./target]."],
        [],
        ["credentialsFile", "Path to credentials file containing accessCodes to receive call token from identity provider."],
        ["identityProviderUri", "Uri of identity provider used to issue call token."],
        [],
        ["uuAppPackBuildTool", "Preferred uuAppPack build tool used for generating report (one of [\"docker\", \"podman\"])."],
      ],
    { paramPrefix: "--" },
  );
};

module.exports = async function (environment, ...args) {
  let env = new Environment(environment, ...args);
  if (env.getArgumentValue("help") !== undefined) {
    printHelp(env.isInProjectScope());
    return;
  }

  console.log("\nGenerating reports using the Trivy security scanner tool...\n");

  let appBoxUri = env.getArgumentValue("uuAppBoxUri") || env.getDevkitConfig().uuAppBoxUri;
  if (!appBoxUri || appBoxUri === Environment.REQUIRED_VALUE_PLACEHOLDER) {
    throw new DevkitBaseError("Missing parameter: uuAppBoxUri");
  }

  let containerRuntime = env.getContainerRuntime();
  if (!containerRuntime) {
    throw new DevkitBaseError("Either docker or podman must be installed to be able to create report.");
  }

  console.log("Downloading uuAppBox...");

  let appBoxClient = new AppBox(env, { baseUri: appBoxUri.match(/^https?:\/\/[^\/]+\/[^\/]+\/[^\/\?]+/)[0] });
  let { data: appBox } = await appBoxClient.get(appBoxUri);

  let reportDirPath = env.getArgumentValue("reportDirPath");
  const buildDir = reportDirPath ? Path.resolve(reportDirPath) : Path.join(env.getWorkdir(), "target");
  Fs.mkdirSync(buildDir, { recursive: true });

  for (let uuAppPack of Object.values(appBox.uuAppPackMap)) {
    let uuAppPackUri = uuAppPack.uri;
    if (uuAppPackUri.includes("://")) {
      uuAppPackUri = uuAppPackUri.split("://")[1];
    }
    let uuAppPackName = uuAppPackUri.split("/").pop().replaceAll(":", "-");

    console.log(`\nGenerating report for ${uuAppPackName}...\n`);

    try {
      ChildProcess.execSync(`${containerRuntime} pull ${uuAppPackUri}`, { cwd: buildDir, stdio: "inherit" });
      ChildProcess.execSync(`${containerRuntime} save ${uuAppPackUri} -o ${uuAppPackName}.tar`, {
        cwd: buildDir,
        stdio: "inherit",
      });
      ChildProcess.execSync(
        `${containerRuntime} run` +
          ` --volume $TMP_DIR/trivy-cache:/tmp/cache` +
          ` --volume $PWD:/tmp/reports` +
          ` aquasec/trivy image` +
          ` --cache-dir /tmp/cache` +
          ` --input /tmp/reports/${uuAppPackName}.tar` +
          ` --output /tmp/reports/${uuAppPackName}-vulnerability-scan.json` +
          ` --format json`,
        {
          cwd: buildDir,
          env: {
            ...Process.env,
            TMP_DIR: Os.tmpdir(),
          },
          stdio: "inherit",
        },
      );

      let uu5String = TrivyScanConverter.jsonToUu5String(Path.join(buildDir, `${uuAppPackName}-vulnerability-scan.json`));

      Fs.writeFileSync(Path.join(buildDir, `${uuAppPackName}-vulnerability-scan-uu5String.txt`), uu5String);
    } catch (e) {
      throw new ChildProcessError("Generating scan report failed.", e.message);
    }
  }

  console.log(`\nReport successfully created.\n`);
};
