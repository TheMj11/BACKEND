"use strict";

const fs = require("fs");
const path = require("path");
const util = require("util");
const Environment = require("../environment.js");
const DevkitBaseError = require("../errors/devkit-base-error.js");
const InstanceWorkload = require("../client/instance-workload.js");
const Help = require("../utils/help.js");

const mkdir = util.promisify(fs.mkdir);

const DEFAULT_DEPLOY_LIST_DIR_PATH = "./target";

const printHelp = function(isInProjectScope) {
  Help.print(
    "The task exports a list of applications deployed in the given pool. Task parameters are:",
    isInProjectScope ?
      [
        ["environment", "Environment for which to execute the task."]
      ]
    :
      [
        ["uuAppResourcePoolOid", "The oid of uuAppResourcePool."],
        ["deployListDir", "The directory in which you want to save the deploy list [defaults to ./target]."],
        ["stdout", "Print deployment list to stdout."],
        [],
        ["credentialsFile", "Path to credentials file containing accessCodes to receive call token from identity provider."],
        ["identityProviderUri", "Uri of identity provider used to issue call token."]
      ],
    {paramPrefix: "--"}
  );
}

const formatDate = function (date) {
  date = new Date(date);
  let mnth = date.getMonth() + 1;
  let day = date.getDate();
  let hrs = date.getHours();
  let mins = date.getMinutes();
  let secs = date.getSeconds();
  return `${date.getFullYear()}${mnth < 9 ? "0" + mnth : mnth}${day < 9 ? "0" + day : day}${hrs < 9 ? "0" + hrs : hrs}${
    mins < 9 ? "0" + mins : mins
  }${secs < 9 ? "0" + secs : secs}`;
}

const getDeployListFilePath = function (deployListDir, appResourcePoolOid, isInProjectScope) {
  const fileName = isInProjectScope ? "uucloud-deployment-list.json" : appResourcePoolOid.toLowerCase() + "-deploy_list-" + formatDate(new Date) + ".json";
  return path.join(deployListDir, fileName);
}

module.exports = async function (environment, ...args) {
  let env = new Environment(environment, ...args);
  if (env.getArgumentValue("help") !== undefined) {
    printHelp(env.isInProjectScope());
    return;
  }
  
  let cloudDescriptor = env.getCloudg02Descriptor();
  let appResourcePoolOid = env.getArgumentValue("uuAppResourcePoolOid") || cloudDescriptor.uuSubAppDeploymentConfig && cloudDescriptor.uuSubAppDeploymentConfig.uuAppResourcePoolOid;
  if (!appResourcePoolOid || appResourcePoolOid === Environment.REQUIRED_VALUE_PLACEHOLDER) {
    throw new DevkitBaseError("Missing parameter: uuAppResourcePoolOid");
  }
  
  console.log(`\nGetting list of applications deployed in resource pool ${appResourcePoolOid}\n`);
  
  let instanceWorkload = new InstanceWorkload(env);
  
  let deployList = await instanceWorkload.list(appResourcePoolOid);
  
  if (!env.getArgumentValue("stdout")) {
    let targetDir = env.getArgumentValue("deployListDir") || DEFAULT_DEPLOY_LIST_DIR_PATH;
    let deployListFilePath = getDeployListFilePath(targetDir, appResourcePoolOid, env.isInProjectScope());

    try {
      await mkdir(path.dirname(deployListFilePath));
    } catch (e) {
      if(e.code !== "EEXIST"){
        throw e;
      }
    }
    fs.writeFileSync(deployListFilePath, JSON.stringify(deployList, null, 2), "utf-8");

    console.log("> Deployment list saved to: " + deployListFilePath);
  } else {
    console.log(JSON.stringify(deployList, null, 2));
  }
};
