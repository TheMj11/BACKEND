const ChildProcess = require("child_process");
const Help = require("../utils/help");
const Environment = require("../environment");
const DevkitBaseError = require("../errors/devkit-base-error");
const Uu5LibRepoWorkloadClient = require("../client/uu5-library-repository-workload");
const ConsoleClient = require("../client/console-client");
const AppBoxClient = require("../client/app-box");

const printHelp = function (isInProjectScope) {
  Help.print(
    "The task deploys the library to uuCloudg02. Task parameters are:",
    isInProjectScope
      ? [
          ["environment", "Environment for which to execute the task."],
          ["skipUuAppBoxBuild", "Decides whether it will build fresh uuAppBox or not."],
        ]
      : [
          ["uu5LibraryRepositoryWorkloadOid", "The oid of uu5LibraryRepositoryWorkload [mandatory]."],
          ["uuCloudUniverseBaseUri", "Uri of uuCloud [mandatory]."],
          ["uuAppBoxUri", "The uuApp Box URI of the app you want to deploy [mandatory]."],
          [],
          [
            "credentialsFile",
            "Path to credentials file containing accessCodes to receive call token from identity provider.",
          ],
          ["identityProviderUri", "Uri of identity provider used to issue call token."],
        ],
    { paramPrefix: "--" },
  );
};

function validateParameters(env) {
  let uu5LibraryRepositoryWorkloadOid =
    env.getArgumentValue("uu5LibraryRepositoryWorkloadOid") || env.getDevkitConfig().uu5LibraryRepositoryWorkloadOid;
  if (!uu5LibraryRepositoryWorkloadOid || uu5LibraryRepositoryWorkloadOid === Environment.REQUIRED_VALUE_PLACEHOLDER) {
    throw new Error("Missing parameter: uu5LibraryRepositoryWorkloadOid");
  }

  let uuCloudUniverseBaseUri =
    env.getArgumentValue("uuCloudUniverseBaseUri") || env.getDevkitConfig().uuCloudUniverseBaseUri;
  if (!uuCloudUniverseBaseUri || uuCloudUniverseBaseUri === Environment.REQUIRED_VALUE_PLACEHOLDER) {
    throw new Error("Missing parameter: uuCloudUniverseBaseUri");
  }

  return { uu5LibraryRepositoryWorkloadOid, uuCloudUniverseBaseUri };
}

async function deployViaUuCloud(env, uuAppBoxUri, uu5LibraryRepositoryWorkloadOid) {
  const consoleClient = new ConsoleClient(env);
  const workloadClient = new Uu5LibRepoWorkloadClient(env);

  console.log(`Preparing uu5LibraryRepositoryWorkload ${uu5LibraryRepositoryWorkloadOid} for deployment.`);
  const libraryWorkload = await workloadClient.load(uu5LibraryRepositoryWorkloadOid, true);
  if (libraryWorkload.data.state !== "preparedForDeployment" && libraryWorkload.data.state !== "active") {
    const dtoOut = await workloadClient.prepareForDeployment(uu5LibraryRepositoryWorkloadOid);
    await consoleClient.waitForProgressBus(dtoOut.progressMap.uuConsoleBaseUri, dtoOut.progressMap.progressBusCode);
  }

  console.log(`Deploying uu5LibraryRepositoryWorkload ${uu5LibraryRepositoryWorkloadOid}.`);
  const dtoOut = await workloadClient.deploy(uu5LibraryRepositoryWorkloadOid, uuAppBoxUri);
  await consoleClient.waitForProgressBus(dtoOut.progressMap.uuConsoleBaseUri, dtoOut.progressMap.progressBusCode);

  const loadDtoOut = await workloadClient.load(uu5LibraryRepositoryWorkloadOid, true); // we need to load fresh info
  const resource = loadDtoOut?.uuAppResourceDataMap?.uu5LibraryRepositoryResource;
  const cdnBaseUri = resource ? Object.values(resource)[0]?.resourceUri : undefined;
  if (!cdnBaseUri) {
    throw new DevkitBaseError(
      "Unable to obtain CDN base URI - cloudg02 workload is avaliable but loading it returns no uu5LibraryRepositoryResource with resourceUri.",
    );
  }
  return { cdnBaseUri };
}

function getUuAppBoxDeployUri(appBox, cdnBaseUri) {
  const { deliverySpec, version } = appBox.data;
  const { urlPath } = deliverySpec;
  const uuAppBoxDeployUri = [cdnBaseUri, urlPath, version]
    .map((it, i) => {
      let result = it;
      if (i && result?.startsWith("/")) result = result.slice(1);
      if (result?.endsWith("/")) result = result.slice(0, -1);
      return result;
    })
    .filter(Boolean)
    .join("/");
  return uuAppBoxDeployUri;
}

async function uu5LibDeploy({ uuAppBox }, environment, ...args) {
  const env = new Environment(environment, ...args);
  if (env.getArgumentValue("help") !== undefined) {
    printHelp(env.isInProjectScope());
    return;
  }

  console.log("Deploying uu5Library to uuCloudg02...\n");

  // validate required parameters
  const { uu5LibraryRepositoryWorkloadOid } = validateParameters(env);

  // prepare uuAppBox
  const skipUuAppBoxBuild = env.getArgumentValue("skipUuAppBoxBuild");
  if (
    env.isInProjectScope() &&
    skipUuAppBoxBuild !== true &&
    skipUuAppBoxBuild !== "true" &&
    skipUuAppBoxBuild !== null
  ) {
    ChildProcess.execSync(`npm run uuCloudg02AppBox -- -e=${environment} ${args.join(" ")}`, { stdio: "inherit" });
    env.reload(); // Reload to load changes done by appBox
  }

  // deploy to uuCloudg02
  const uuAppBoxUri = env.getArgumentValue("uuAppBoxUri") || env.getDevkitConfig().uuAppBoxUri;
  if (!uuAppBoxUri) {
    throw new Error("Missing parameter: uuAppBoxUri");
  }

  console.log("Deploying...");
  const appBoxClient = new AppBoxClient(env, { baseUri: AppBoxClient.getBaseUri(uuAppBoxUri) });
  let { cdnBaseUri } = await deployViaUuCloud(env, uuAppBoxUri, uu5LibraryRepositoryWorkloadOid);
  const appBox = await appBoxClient.get(uuAppBoxUri);
  let uuAppBoxDeployUri = getUuAppBoxDeployUri(appBox, cdnBaseUri);
  if (uuAppBoxDeployUri) {
    // store it (e.g. deploy to uuAppLibraryRegistry needs to know this, at least while uuALR vs. uuABR identity provider
    // issue is not resolved)
    env.updateProjectDevkitConfig("uuAppBoxDeployUri", uuAppBoxDeployUri);
  }
  console.log(`Deploy success.\n  -> ${uuAppBoxDeployUri}`);
}

module.exports = uu5LibDeploy;
