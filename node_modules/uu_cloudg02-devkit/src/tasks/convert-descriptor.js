"use strict";

const Fs = require("fs");
const Path = require("path");
const Environment = require("../environment.js");
const DevkitBaseError = require("../errors/devkit-base-error.js");
const Help = require("../utils/help.js");
const DescriptorConverter = require("../utils/descriptor-converter.js");

const printHelp = function() {
  Help.print(
    "The task provides conversion between uuCloudg01 and uuCloudg02 descriptors. Task parameters are:",
    [
      ["inputPath", "Path to uuCloudg01 descriptor to be converted."],
      ["outputPath", "Path where to store resulting uuCloudg02 descriptor."]
    ],
    {paramPrefix: "--"}
  );
}

module.exports = async function (environment, ...args) {
  let env = new Environment(environment, ...args);
  if (env.getArgumentValue("help") !== undefined) {
    printHelp();
    return;
  }

  let inputPath = env.getArgumentValue("inputPath");
  if (!inputPath) {
    throw new DevkitBaseError("Missing parameter: inputPath");
  }
  if (!Fs.existsSync(inputPath) || !Fs.lstatSync(inputPath).isFile()) {
    throw new DevkitBaseError(`Input descriptor [${inputPath}] does not exist or is not a file.`);
  }
  let outputPath = env.getArgumentValue("outputPath");
  if (!inputPath) {
    throw new DevkitBaseError("Missing parameter: outputPath");
  }
  if (Fs.existsSync(outputPath) && !Fs.lstatSync(outputPath).isFile()) {
    throw new DevkitBaseError(`Output path [${inputPath}] refers to directory.`);
  }

  let inputDescriptor = JSON.parse(Fs.readFileSync(inputPath));
  if (inputDescriptor.schemaVersion && inputDescriptor.schemaVersion.startsWith("2.")) {
    console.error(`\nInput descriptor [${inputPath}] is already uuCloudg02 descriptor.\n`);
    descriptor = DescriptorConverter.convert(descriptor);
  }

  let outputDescriptor = DescriptorConverter.convert(inputDescriptor);
  Fs.mkdirSync(Path.dirname(outputPath), { recursive: true });
  Fs.writeFileSync(outputPath, JSON.stringify(outputDescriptor, null, 2));
};
