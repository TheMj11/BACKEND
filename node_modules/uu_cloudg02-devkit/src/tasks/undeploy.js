"use strict";

const Environment = require("../environment.js");
const DevkitBaseError = require("../errors/devkit-base-error.js");
const ConsoleClient = require("../client/console-client.js")
const Resource = require("../client/resource.js");
const InstanceWorkload = require("../client/instance-workload.js");
const Help = require("../utils/help.js");

const printHelp = function(isInProjectScope) {
  Help.print(
    "The task undeploys a specified uuApp from the pool and releases all related allocated resources. Task parameters are:",
    isInProjectScope ?
      [
        ["environment", "Environment for which to execute the task."],
        ["deleteWorkload", "Flag whether to delete uuSubAppInstanceWorkload and its resources after successful undeploy."],
        ["deleteSlot", "Flag whether to delete slot after successful undeploy."],
      ]
    :
      [
        ["uuSubAppInstanceWorkloadOid","The oid of uuSubAppInstanceWorkload [mandatory]."],
        ["targetSlot", "The uuSubAppInstanceWorkload slot."],
        ["deleteWorkload", "Flag whether to delete uuSubAppInstanceWorkload and its resources after successful undeploy."],
        ["deleteSlot", "Flag whether to delete slot after successful undeploy."],
        [],
        ["credentialsFile", "Path to credentials file containing accessCodes to receive call token from identity provider."],
        ["identityProviderUri", "Uri of identity provider used to issue call token."]
      ],
    {paramPrefix: "--"}
  );
}

const deleteResources = async function(resourceClient, uuAppResourceMap) {
  for (const resource of Object.keys(uuAppResourceMap)) {
    try {
      await resourceClient.delete(uuAppResourceMap[resource].type, uuAppResourceMap[resource].oid);
      console.log(`${uuAppResourceMap[resource].type} ${uuAppResourceMap[resource].oid} successfully deleted`);
    } catch (e) {
      console.error(`Deleting ${uuAppResourceMap[resource].type} ${uuAppResourceMap[resource].oid} failed: ` + e);
    }
  }
}

module.exports = async function (environment, ...args) {
  let env = new Environment(environment, ...args);
  if (env.getArgumentValue("help") !== undefined) {
    printHelp(env.isInProjectScope());
    return;
  }

  console.log("\nUuApp is being undeployed...\n");

  let workloadOid = env.getArgumentValue("uuSubAppInstanceWorkloadOid") || env.getDevkitConfig()["uuSubAppInstanceWorkloadOid"];
  if (!workloadOid) {
    throw new DevkitBaseError("Missing parameter: uuSubAppInstanceWorkloadOid");
  }
  let targetSlot = env.getArgumentValue("targetSlot") || env.getCloudg02Descriptor().uuSubAppDeploymentConfig && env.getCloudg02Descriptor().uuSubAppDeploymentConfig.targetSlot;
  if (targetSlot && targetSlot.toLowerCase() === "production") {
    targetSlot = null;
  }

  let consoleClient = new ConsoleClient(env);
  let resourceClient = new Resource(env);
  let instanceWorkload = new InstanceWorkload(env);

  let uuSubAppInstanceWorkload = await instanceWorkload.getWorkload(workloadOid);
  if (!uuSubAppInstanceWorkload) {
    throw new DevkitBaseError(`Workload with oid '${workloadOid}' does not exist.`);
  }

  instanceWorkload.printWorkloadDetailUri(workloadOid, true);

  if (targetSlot) {
    console.log(`> Undeploying workload ${workloadOid} from '${targetSlot}' slot...`);
    let { progressMap } = await instanceWorkload.undeploySlot(workloadOid, targetSlot);
    await consoleClient.waitForProgressBus(progressMap.uuConsoleBaseUri, progressMap.progressBusCode);

    if (env.getArgumentValue("deleteSlot") === undefined) {
      console.log("App successfully undeployed.");
      return;
    }

    let uuAppResourceMap = uuSubAppInstanceWorkload.slotMap[targetSlot].uuAppResourceMap;

    console.log(`> Deleting slot...`);
    await instanceWorkload.deleteSlot(workloadOid, targetSlot);
    await consoleClient.waitForProgressBus(progressMap.uuConsoleBaseUri, progressMap.progressBusCode);

    console.log("> Deleting uuAppResources...");
    await deleteResources(resourceClient, uuAppResourceMap);
  } else {
    console.log(`> Undeploying workload ${workloadOid}...`);
    let { progressMap } = await instanceWorkload.undeployWorkload(workloadOid);
    await consoleClient.waitForProgressBus(progressMap.uuConsoleBaseUri, progressMap.progressBusCode);

    if (env.getArgumentValue("deleteWorkload") === undefined) {
      console.log("App successfully undeployed.");
      return;
    }

    console.log("> Suspending workload...");
    await instanceWorkload.suspendWorkload(workloadOid);
    await consoleClient.waitForProgressBus(progressMap.uuConsoleBaseUri, progressMap.progressBusCode);
    
    console.log("> Closing workload...");
    await instanceWorkload.closeWorkload(workloadOid);
    await consoleClient.waitForProgressBus(progressMap.uuConsoleBaseUri, progressMap.progressBusCode);

    console.log("> Deleting workload...");
    await instanceWorkload.deleteWorkload(workloadOid);

    console.log("> Deleting uuAppResources...");
    await deleteResources(resourceClient, uuSubAppInstanceWorkload.uuAppResourceMap);
  }
};
