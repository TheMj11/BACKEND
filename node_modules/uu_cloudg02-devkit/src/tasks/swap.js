"use strict";

const Environment = require("../environment.js");
const DevkitBaseError = require("../errors/devkit-base-error.js");
const ConsoleClient = require("../client/console-client.js");
const ResourcePool = require("../client/resource-pool.js");
const InstanceWorkload = require("../client/instance-workload.js");
const Help = require("../utils/help.js");

const printHelp = function(isInProjectScope) {
  Help.print(
    "The task swaps appdeployment between the \"production\" and selected \"preview\" slot. Task parameters are:",
    isInProjectScope ?
      [
        ["environment", "Environment for which to execute the task."],
        ["scaleSourceSlot", "Flag whether sourceSlot should be scaled to the same number of Node count as on uuSubAppInstanceWorkload, if count does not match."]
      ]
    :
      [
        ["uuSubAppInstanceWorkloadOid", "Identification of workload."],
        ["sourceSlot", "Identification of source slot from which to switch to \"production\" slot (defaults to \"preview\")."],
        ["scaleSourceSlot", "Flag whether sourceSlot should be scaled to the same number of Node count as on uuSubAppInstanceWorkload, if count does not match."],
        [],
        ["credentialsFile", "Path to credentials file containing accessCodes to receive call token from identity provider."],
        ["identityProviderUri", "Uri of identity provider used to issue call token."]
      ],
    {paramPrefix: "--"}
  );
}

const getNodeResourceMapToScale = function(uuSubAppInstanceWorkload, sourceSlot) {
  let workloadNodeResourceMap = Object.fromEntries(
    Object.entries(uuSubAppInstanceWorkload.data.uuAppResourceMap)
      .filter(([key, value]) => key.startsWith("uuNodeSetMap/"))
  );
  let slotNodeResourceMap = Object.fromEntries(
    Object.entries(uuSubAppInstanceWorkload.data.slotMap[sourceSlot].uuAppResourceMap)
      .filter(([key, value]) => key.startsWith("uuNodeSetMap/"))
  );

  let uuNodeResourceMap = {};
  Object.entries(slotNodeResourceMap).forEach(([resourceKey, slotNodeResource]) => {
    let workloadNodeResource = workloadNodeResourceMap[resourceKey];
    let workloadNodeResourceCount = uuSubAppInstanceWorkload.uuAppResourceDataMap.uuNodeResource[workloadNodeResource.oid].allocatedCapacityMap.nodeCount;
    let slotNodeResourceCount = uuSubAppInstanceWorkload.uuAppResourceDataMap.uuNodeResource[slotNodeResource.oid].allocatedCapacityMap.nodeCount;

    if (slotNodeResourceCount !== workloadNodeResourceCount) {
      uuNodeResourceMap[resourceKey] = { targetNodeCount: workloadNodeResourceCount };
    }
  });

  return uuNodeResourceMap;
};

module.exports = async function (environment, ...args) {
  let env = new Environment(environment, ...args);
  if (env.getArgumentValue("help") !== undefined) {
    printHelp(env.isInProjectScope());
    return;
  }

  let workloadOid = env.getArgumentValue("uuSubAppInstanceWorkloadOid") || env.getDevkitConfig()["uuSubAppInstanceWorkloadOid"];
  if (!workloadOid) {
    throw new DevkitBaseError("Missing parameter: uuSubAppInstanceWorkloadOid");
  }
  let sourceSlot = env.getArgumentValue("sourceSlot") || env.getCloudg02Descriptor().uuSubAppDeploymentConfig && env.getCloudg02Descriptor().uuSubAppDeploymentConfig.targetSlot || "preview";

  let consoleClient = new ConsoleClient(env);
  let resourcePool = new ResourcePool(env);
  let instanceWorkload = new InstanceWorkload(env);

  let uuSubAppInstanceWorkload = await instanceWorkload.loadWorkload(workloadOid);
  if (!uuSubAppInstanceWorkload) {
    throw new DevkitBaseError(`UuSubAppInstanceWorkload ${workloadOid} does not exist.`);
  }

  let { slotMap } = await resourcePool.getAvailableSlotMap(uuSubAppInstanceWorkload.data.uuAppResourcePoolOid);
  if (!Object.keys(slotMap).includes(sourceSlot)) {
    throw new DevkitBaseError(`UuSubAppInstanceWorkload does not contain slot '${sourceSlot}'.`);
  }

  console.log(`\nUuApp deployment slots are going to be swapped. Source slot: ${sourceSlot}\n`);
  instanceWorkload.printWorkloadDetailUri(workloadOid, true);

  let uuNodeResourceMapToScale = getNodeResourceMapToScale(uuSubAppInstanceWorkload, sourceSlot);
  if (Object.keys(uuNodeResourceMapToScale).length) {
    let nodeCountNotMatchMsg = `Node count on ${sourceSlot} slot and uuSubAppInstanceWorkload does not match.`;
    if (env.getArgumentValue("scaleSourceSlot") === undefined) {
      throw new DevkitBaseError(`${nodeCountNotMatchMsg} Run this task with '--scaleSourceSlot' argument to scale the slot.`);
    }
    
    console.log(nodeCountNotMatchMsg + " The slot will be scaled first.");
    const scaleDtoOut = await instanceWorkload.scaleSlot(workloadOid, uuNodeResourceMapToScale, sourceSlot);
    let progressMap = scaleDtoOut.progressMap;

    console.log("> Waiting for slot to scale...");
    await consoleClient.waitForProgressBus(progressMap.uuConsoleBaseUri, progressMap.progressBusCode);
    console.log("Slot successfully scaled.");
  }

  const swapDtoOut = await instanceWorkload.swap(workloadOid, sourceSlot);
  let progressMap = swapDtoOut.progressMap;

  console.log("> Waiting for deployment slots swap...");
  await consoleClient.waitForProgressBus(progressMap.uuConsoleBaseUri, progressMap.progressBusCode);
  
  console.log("UuApp deployment slots successfully swapped.");
};
