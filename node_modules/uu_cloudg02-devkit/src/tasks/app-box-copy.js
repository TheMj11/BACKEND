"use strict";

const Fs = require("fs");
const Path = require("path");
const ChildProcess = require("child_process");
const Environment = require("../environment.js");
const DevkitBaseError = require("../errors/devkit-base-error.js");
const ChildProcessError = require("../errors/child-process-error");
const Help = require("../utils/help.js");
const AppBox = require("../client/app-box.js");
const AppPackRepository = require("../client/app-pack-repository.js");

const printHelp = function(isInProjectScope) {
  Help.print(
    "The task copies uuAppBox from one registrty into another one. Task parameters are:",
    isInProjectScope ?
      [
        ["environment", "Environment for which to execute the task."],
        ["targetUuAppBoxRegistryBaseUri", "Address of target uuAppBoxRegistry."],
        ["targetUuAppImageRegistryUri", "Address of target docker registry."],
        [],
        ["targetCredentialsFile", "Path to credentials file containing accessCodes to receive call token for target uuAppBox registry."],
        ["targetIdentityProviderUri", "Uri of identity provider used to issue token for target uuAppBox registry."],
        [],
        ["uuAppPackBuildTool", "Preferred uuAppPack build tool used for building the image (one of [\"docker\", \"podman\"])."],
      ]
    :
      [
        ["uuAppBoxUri", "URI of source uuAppBox"],
        ["targetUuAppBoxRegistryBaseUri", "Address of target uuAppBoxRegistry."],
        ["targetUuAppImageRegistryUri", "Address of target docker registry."],
        ["targetUuAppBoxJsonOut", "Optional path where to store target AppBox in json format."],
        [],
        ["credentialsFile", "Path to credentials file containing accessCodes to receive call token from identity provider."],
        ["identityProviderUri", "Uri of identity provider used to issue call token."],
        [],
        ["targetCredentialsFile", "Custom credentials for target uuAppBox registry. If not set, uses value from credentialsFile parameter."],
        ["targetIdentityProviderUri", "Custom uri of identity provider for target uuAppBox registry. If not set, uses value from identityProviderUri parameter."],
        [],
        ["uuAppPackBuildTool", "Preferred uuAppPack build tool used for building the image (one of [\"docker\", \"podman\"])."],
      ],
    {paramPrefix: "--"}
  );
}

module.exports = async function (environment, ...args) {
  let env = new Environment(environment, ...args);
  if (env.getArgumentValue("help") !== undefined) {
    printHelp(env.isInProjectScope());
    return;
  }

  let sourceAppBoxUri = env.getArgumentValue("uuAppBoxUri") || env.getDevkitConfig().uuAppBoxUri;
  if (!sourceAppBoxUri || sourceAppBoxUri === Environment.REQUIRED_VALUE_PLACEHOLDER) {
    throw new DevkitBaseError("Missing parameter: uuAppBoxUri");
  }
  let sourceCredentialsFile = env.getArgumentValue("credentialsFile") || env.getDevkitConfig()["credentialsFile"];
  let sourceIdentityProviderUri = env.getArgumentValue("identityProviderUri") || env.getDevkitConfig()["identityProviderUri"];
  let targetAppBoxRegistryUri = env.getArgumentValue("targetUuAppBoxRegistryBaseUri") || env.getDevkitConfig["targetUuAppBoxRegistryBaseUri"];
  if (!targetAppBoxRegistryUri) {
    throw new DevkitBaseError("Missing parameter: targetUuAppBoxRegistryBaseUri");
  }
  if (!AppBox.isSupported(targetAppBoxRegistryUri)) {
    throw new DevkitBaseError("Parameter targetAppBoxRegistryUri refers to unsupported storage type.");
  }
  let useAbsoluteUri = !targetAppBoxRegistryUri.includes(AppBox.APPBOX_REGISTRY);
  let targetAppPackRepositoryClient;
  let targetCredentialsFile = env.getArgumentValue("targetCredentialsFile") || env.getDevkitConfig()["targetCredentialsFile"] || sourceCredentialsFile;
  let targetIdentityProviderUri = env.getArgumentValue("targetIdentityProviderUri") || env.getDevkitConfig()["targetIdentityProviderUri"] || sourceIdentityProviderUri;
  let targetImageRegistryUri = env.getArgumentValue("targetUuAppImageRegistryUri");
  if (!targetImageRegistryUri) {
    if (targetAppBoxRegistryUri.includes(AppBox.APPBOX_REGISTRY)) {
      targetAppPackRepositoryClient = new AppPackRepository(env, {baseUri: targetAppBoxRegistryUri, credentialsFile: targetCredentialsFile, identityProviderUri: targetIdentityProviderUri});
    } else {
      throw new DevkitBaseError("Missing parameter: targetUuAppImageRegistryUri");
    }
  }
  let containerRuntime = env.getContainerRuntime();
  if (!containerRuntime) {
    throw new DevkitBaseError("Either docker or podman must be installed to be able to copy uuAppBox.");
  }
  // For source client, we need some valid baseUri (as it is not required to be set on environment for this task),
  // but it can by any uri as we are using source client to download appbox via full appBox uri
  let sourceAppBoxClient = new AppBox(env, {baseUri: targetAppBoxRegistryUri, credentialsFile: sourceCredentialsFile, identityProviderUri: sourceIdentityProviderUri});
  let targetAppBoxClient = new AppBox(env, {baseUri: targetAppBoxRegistryUri, credentialsFile: targetCredentialsFile, identityProviderUri: targetIdentityProviderUri});

  console.log("\nDownloading source uuAppBox...\n");
  let { data: appBox } = await sourceAppBoxClient.get(sourceAppBoxUri);

  for (let [appPackCode, appPackData] of Object.entries(appBox.uuAppPackMap)) {
    console.log(`\nCopying appPack ${appPackCode}...\n`);

    let sourceImage = appPackData.uri;
    if (sourceImage.includes("://")) {
      sourceImage = sourceImage.split("://")[1];
    }
    try {
      ChildProcess.execSync(`${containerRuntime} pull ${sourceImage}`, {stdio: 'inherit' });
    } catch (e) {
      throw new ChildProcessError(`Reading of image ${sourceImage} failed.`, e.message);
    }

    if (!targetImageRegistryUri) {
      let targetAppPackRepository = await targetAppPackRepositoryClient.get(appPackData.type);
      targetImageRegistryUri = targetAppPackRepository.uri.replace(/\/$/, "");
    }
    if (targetImageRegistryUri.includes("://")) {
      targetImageRegistryUri = targetImageRegistryUri.split("://")[1];
    }
    let appPackRelativeUri = `${appBox.code}-${appPackCode}:${appBox.version}`.toLowerCase();
    let targetImage = `${targetImageRegistryUri}/${appPackRelativeUri}`;
    try {
      ChildProcess.execSync(`${containerRuntime} tag ${sourceImage} ${targetImage}`, {stdio: 'inherit' });
    } catch (e) {
      throw new ChildProcessError(`Tagging image ${sourceImage} to tag ${targetImage} has failed.`, e.message);
    }

    try {
      ChildProcess.execSync(`${containerRuntime} push ${targetImage}`, {stdio: 'inherit' });
    } catch (e) {
      throw new ChildProcessError(`Copying of image ${targetImage} failed.`, e.message);
    }
    appPackData.uri = useAbsoluteUri ? `docker://${targetImage}` : appPackRelativeUri;
    // TODO "RepoDigest" checksum cannot be obtained before image is pushed to repository.
    //   Which checksum should be added to appbox? It will not be availabe if image will be
    //   uploaded via appbox registry.
    try {
      let imageInfo = JSON.parse(ChildProcess.execSync(`${containerRuntime} inspect ${targetImage}`).toString());
      appPackData.checksum = imageInfo[0].RepoDigests[0].split("sha256:")[1];
    } catch (e) {
      console.error(`Unable to get image checkum: ${e.message}`);
      delete appPackData.checksum;
    }

  }

  let targetAppBoxJsonPath = env.getArgumentValue("targetUuAppBoxJsonOut");
  if (!targetAppBoxJsonPath && env.isInProjectScope()) {
    targetAppBoxJsonPath = Path.join(env.getWorkdir(), "target", `${env.getPackageConfig().name}-${appBox.version}-appbox_copy.json`);
  }
  if (targetAppBoxJsonPath) {
    Fs.writeFileSync(targetAppBoxJsonPath, JSON.stringify(appBox, null, 2));
  }

  console.log(`\nPublishing copy of uuAppBox (descriptor)...\n`);
  let targetAppBoxUri = await targetAppBoxClient.create(appBox);

  console.log(`\nUuAppBox successfully copied from ${sourceAppBoxUri} to ${targetAppBoxUri}.\n`);
};
