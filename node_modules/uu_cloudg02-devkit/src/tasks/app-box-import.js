const Help = require("../utils/help");
const Environment = require("../environment");
const DevkitBaseError = require("../errors/devkit-base-error");
const AppBox = require("../client/app-box.js");
const os = require("os");
const fs = require("fs");
const path = require("path");
const AdmZip = require("adm-zip");
const childProcess = require("child_process");
const ChildProcessError = require("../errors/child-process-error");
const EnvParamHelper = require("../utils/env-param-helper");

const printHelp = function (isInProjectScope) {
  Help.print(
    "The task import uuAppBox from local zip file created by export task into uuAppBoxRegistry. Task parameters are:",
    isInProjectScope
      ? [
          ["environment", "Environment for which to execute the task."],
          ["uuAppBoxPath", "Path where the uuAppBox export can be found, required parameter."],
          [],
          [
            "uuAppPackBuildTool",
            'Preferred uuAppPack build tool used for building the image (one of ["docker", "podman"]).',
          ],
        ]
      : [
          ["uuAppBoxPath", "Path where the uuAppBox export can be found."],
          ["uuAppBoxRegistryBaseUri", "Address of uuAppBoxRegistry."],
          ["uuAppImageRegistryUri", "Address of target docker registry."],
          [],
          [
            "credentialsFile",
            "Path to credentials file containing accessCodes to receive call token from identity provider.",
          ],
          ["identityProviderUri", "Uri of identity provider used to issue call token."],
          [],
          [
            "uuAppPackBuildTool",
            'Preferred uuAppPack build tool used for building the image (one of ["docker", "podman"]).',
          ],
        ],
    { paramPrefix: "--" }
  );
};

async function validateParameters(env) {
  const appBoxRegistryBaseUri = EnvParamHelper.validateSingleParameter(env, "uuAppBoxRegistryBaseUri");
  const appImageRegistryUri = EnvParamHelper.validateSingleParameter(env, "uuAppImageRegistryUri");

  const appBoxPath = EnvParamHelper.validateSingleParameter(env, "uuAppBoxPath");
  if (!fs.existsSync(appBoxPath)) {
    throw new DevkitBaseError("Exported uuAppBox not found at path: " + appBoxPath);
  }

  let containerRuntime = env.getContainerRuntime();
  if (!containerRuntime) {
    throw new DevkitBaseError("Either docker or podman must be installed to be able to export uuAppBox.");
  }

  return { appBoxPath, containerRuntime, appBoxRegistryBaseUri, appImageRegistryUri };
}

/**
 * Method creates temporary directory and makes sure that it is deleted after the lambda call
 *
 * @param {function} lambda Logic to be executed
 * @returns {Promise<void>}
 */
async function withTmpDir(lambda) {
  const tmpDirName = path.join(os.tmpdir(), "appbox");
  const tmpDir = await fs.promises.mkdtemp(tmpDirName);
  try {
    return await lambda(tmpDir);
  } finally {
    await fs.promises.rm(tmpDir, { recursive: true });
  }
}

async function unzipAppBox(appBoxPath, tmpDir) {
  console.log(`Extracting uuAppBox from ${appBoxPath}...\n`);
  const zipWithTgz = new AdmZip(appBoxPath);
  zipWithTgz.extractAllTo(tmpDir);
}

async function getUuAppBoxData(appBoxFldPath) {
  const appBoxDataPath = path.join(appBoxFldPath, "uuAppBox.json");
  return JSON.parse(await fs.promises.readFile(appBoxDataPath, "utf8"));
}

function extractPackInfo(uuAppBoxData, uuAppPackKey, appImageRegistryUri) {
  const uuAppPackData = uuAppBoxData.uuAppPackMap[uuAppPackKey];
  const packCode = uuAppPackData.uri.split("/").at(-1); // last part after slash

  // normalize uris to remove https:// from beginning
  let oldPackUri = uuAppPackData.uri;
  if (oldPackUri && oldPackUri.includes("://")) {
    oldPackUri = oldPackUri.split("://")[1];
  }

  let packUri = `${appImageRegistryUri}/${packCode}`;
  if (appImageRegistryUri && appImageRegistryUri.includes("://")) {
    packUri = packUri.split("://")[1];
  }

  return { uuAppPackData, oldPackUri, packUri, packCode };
}

async function uploadUuAppPacks(appBoxFldPath, appImageRegistryUri, containerRuntime) {
  const uuAppBoxData = await getUuAppBoxData(appBoxFldPath);

  // TODO implement uu5 library uuAppPacks import
  const newUuAppPackMap = {};
  for (const uuAppPackKey of Object.keys(uuAppBoxData.uuAppPackMap)) {
    const { uuAppPackData, oldPackUri, packUri, packCode } = extractPackInfo(
      uuAppBoxData,
      uuAppPackKey,
      appImageRegistryUri
    );

    console.log(`Loading uuAppPack from ${uuAppPackKey} as ${packCode}...\n`);
    try {
      childProcess.execSync(`${containerRuntime} load --input ${uuAppPackKey}.tar`, {
        cwd: appBoxFldPath,
        stdio: "inherit",
      });
    } catch (e) {
      throw new ChildProcessError(`Loading of image ${uuAppPackKey} failed.`, e.message);
    }

    console.log(`Pushing uuAppPack ${packUri}...\n`);

    // we have to tag it first to make sure that it will get pushed to correct registry
    try {
      childProcess.execSync(`${containerRuntime} tag ${oldPackUri} ${packUri}`, {
        cwd: appBoxFldPath,
        stdio: "inherit",
      });
    } catch (e) {
      throw new ChildProcessError(`Tagging of image ${uuAppPackKey} failed.`, e.message);
    }

    // then we can push the image
    try {
      childProcess.execSync(`${containerRuntime} push ${packUri}`, {
        cwd: appBoxFldPath,
        stdio: "inherit",
      });
    } catch (e) {
      throw new ChildProcessError(`Pushing of image ${uuAppPackKey} failed.`, e.message);
    }

    newUuAppPackMap[uuAppPackKey] = {
      type: uuAppPackData.type,
      uri: packCode,
    };
  }

  return newUuAppPackMap;
}

async function createUuAppBox(env, appBoxFldPath, appBoxRegistryBaseUri, appPackMap) {
  const appBoxData = await getUuAppBoxData(appBoxFldPath);
  appBoxData.uuAppPackMap = appPackMap;

  const appBoxClient = new AppBox(env);
  return await appBoxClient.create(appBoxData);
}

async function importUuAppBox(environment, ...args) {
  let env = new Environment(environment, ...args);
  if (env.getArgumentValue("help") !== undefined) {
    printHelp(env.isInProjectScope());
    return;
  }

  const { appBoxPath, containerRuntime, appBoxRegistryBaseUri, appImageRegistryUri } = await validateParameters(env);

  // create tmpdir to save uuAppBox json and the subsequent uuAppPacks
  const appBoxUri = await withTmpDir(async (tmpDir) => {
    // unzip the appBoxPath into tmpDir
    await unzipAppBox(appBoxPath, tmpDir);

    // get first folder within the readdir -> in the zip file there is a nested folder with the json and uuAppPacks
    const appboxFolders = await fs.promises.readdir(tmpDir);
    const appBoxFldPath = path.join(tmpDir, appboxFolders[0]);

    // load uuAppPacks to local registry (every file besides uuAppBox.json) and upload them
    const appPackMap = await uploadUuAppPacks(appBoxFldPath, appImageRegistryUri, containerRuntime);

    // create uuAppBox
    try {
      return await createUuAppBox(env, appBoxFldPath, appBoxRegistryBaseUri, appPackMap);
    } catch (e) {
      const dupAppBoxE =
        e.cause.paramMap.dtoOut.uuAppErrorMap["uu-cloud-appboxregistry/uuAppBox/create/uuAppBoxAlreadyExists"];
      if (dupAppBoxE) {
        console.log(`uuAppBox ${dupAppBoxE.paramMap.code} already exists for version ${dupAppBoxE.paramMap.version}.`);
      } else {
        throw e;
      }
    }
  });

  if (appBoxUri) {
    console.log(`uuAppBox imported to ${appBoxUri}`);
  }
}

module.exports = importUuAppBox;
