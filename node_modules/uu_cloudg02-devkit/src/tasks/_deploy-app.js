"use strict";

const ChildProcess = require('child_process');
const Environment = require("../environment.js");
const DevkitBaseError = require("../errors/devkit-base-error.js");
const ChildProcessError = require("../errors/child-process-error");
const ConsoleClient = require("../client/console-client.js");
const AppBox = require("../client/app-box.js");
const Resource = require("../client/resource.js");
const ResourceIfc = require("../client/resource-ifc.js");
const ResourcePool = require("../client/resource-pool.js");
const InstanceWorkload = require("../client/instance-workload.js");
const Help = require("../utils/help.js");

const printHelp = function(isInProjectScope) {
  Help.print(
    "The task deploys the application according to user set parameters. Task parameters are:",
    isInProjectScope ?
      [
        ["environment", "Environment for which to execute the task."],
        ["uuCloudResourceOid", "The oid of uuCloudResource used for uuGatewayResource allocation."],
        ["skipUuAppBoxBuild", "Flag whether to skip building of uuAppBox before deployment."]
      ]
    :
      [
        ["uuSubAppInstanceDescriptor", "The uuSubAppInstanceDescriptor (uucloudg02-{env}.json) file [mandatory]."],
        ["uuAppBoxUri", "The uuApp Box URI of the app you want to deploy [mandatory]."],
        ["uuSubAppInstanceWorkloadOid","The oid of uuSubAppInstanceWorkload."],
        ["uuAppResourcePoolOid", "The oid of uuAppResourcePool"],
        ["uuCloudResourceOid", "The oid of uuCloudResource used for uuGatewayResource allocation."],
        ["targetSlot", "The uuSubAppInstanceWorkload slot."],
        [],
        ["credentialsFile", "Path to credentials file containing accessCodes to receive call token from identity provider."],
        ["identityProviderUri", "Uri of identity provider used to issue call token."]
      ],
    {paramPrefix: "--"}
  );
}

const getUuAppResourceTypeMaps = function(deliverySpec) {
  let uuAppResourceTypeMaps = [];

  const getUuAppResourceTypeLists = function(deliverySpec) {
    let uuAppResourceCount = 0;
    let uuAppResourceTypeLists = {
      uuNodeResource: [],
      uuGatewayResource: [],
      uuAppObjectStoreResource: [],
      uu5LibraryRepositoryResource: [],
    };

    if (!deliverySpec) {
      return { uuAppResourceTypeLists, uuAppResourceCount };
    }

    if (deliverySpec.uuNodeSetMap) {
      Object.keys(deliverySpec.uuNodeSetMap).forEach(nodeSet => {
        uuAppResourceTypeLists.uuNodeResource.push(deliverySpec.uuNodeSetMap[nodeSet].uuNodeSetType);
        uuAppResourceCount++;
      });
    }

    if (deliverySpec.uuGatewayMap) {
      Object.keys(deliverySpec.uuGatewayMap).forEach(gateway => {
        uuAppResourceTypeLists.uuGatewayResource.push(deliverySpec.uuGatewayMap[gateway].uuGatewayType);
        uuAppResourceCount++;
      });
    }

    if (deliverySpec.uuAppObjectStoreMap) {
      Object.keys(deliverySpec.uuAppObjectStoreMap).forEach(objectStore => {
        uuAppResourceTypeLists.uuAppObjectStoreResource.push(deliverySpec.uuAppObjectStoreMap[objectStore].uuAppObjectStoreType);
        uuAppResourceCount++;
      });
    }

    // TODO add support for uu5LibraryRepositoryResource

    return { uuAppResourceTypeLists, uuAppResourceCount };
  }

  let { uuAppResourceTypeLists, uuAppResourceCount } = getUuAppResourceTypeLists(deliverySpec);

  Object.keys(uuAppResourceTypeLists).forEach(resourceType => {
    for (let i = 0; i < uuAppResourceTypeLists[resourceType].length; i++) {
      if (uuAppResourceTypeMaps.length <= i) uuAppResourceTypeMaps.push({});
      uuAppResourceTypeMaps[i][resourceType] = uuAppResourceTypeLists[resourceType][i];
    }
  });

  return { uuAppResourceTypeMaps, uuAppResourceCount };
}

const getUuAppResourceTypeMap = function(deliverySpec, existingUuAppResourceList, targetSlot = null) {
  let uuAppResourceTypeMap = {};
  let uuAppResourceCount = 0;

  let now = new Date();
  let remainingUuAppResourceList = existingUuAppResourceList.filter(uuAppResource =>
    // Use only resources allocated more than 5 minutes ago
    // to ensure seamless allocation for multiple concurrent deployments.
    now - new Date(uuAppResource.commitTs) > 1000 * 60 * 5
  );

  if (deliverySpec) {
    const isUuGatewayResource = function(resource) { return resource === "uuGateway" };
    const getUuAppResourceName = function(resource) { return resource === "uuNodeSet" ? "uuNode" : resource };

    // TODO add support for uu5LibraryRepositoryResource
    const supportedResourceList = ["uuNodeSet", "uuGateway", "uuAppObjectStore"];
    for (let supportedResource of supportedResourceList) {
      if (deliverySpec[`${supportedResource}Map`]) {
        let resourceList = [];

        Object.keys(deliverySpec[`${supportedResource}Map`]).forEach(resource => {
          let resourceType = deliverySpec[`${supportedResource}Map`][resource][`${supportedResource}Type`];
          let resourceSize = deliverySpec[`${supportedResource}Map`][resource][`${getUuAppResourceName(supportedResource)}Size`];

          let existingResourceIndex = remainingUuAppResourceList.findIndex(r =>
            r.uuAppResourceType === `${getUuAppResourceName(supportedResource)}Resource` &&
            r.type === resourceType &&
            r.size === resourceSize
          );
          if (existingResourceIndex !== -1) {
            remainingUuAppResourceList.splice(existingResourceIndex, 1);
          } else {
            let resourceIndex = resourceList.findIndex(r => r.type === resourceType && r.size === resourceSize);
            if (resourceIndex !== -1) {
              resourceList[resourceIndex].count += 1;
            } else {
              resourceList.push({
                type: resourceType,
                size: resourceSize,
                slot: (targetSlot && isUuGatewayResource(supportedResource)) ? targetSlot : undefined,
                count: 1,
              });
            }
          }

          uuAppResourceCount++;
        });

        if (resourceList.length) {
          uuAppResourceTypeMap[`${getUuAppResourceName(supportedResource)}Resource`] = resourceList;
        }
      }
    }
  }

  return { uuAppResourceTypeMap, remainingUuAppResourceList, uuAppResourceCount };
}

const deleteResources = async function(resourceClient, uuAppResourceList, close = true) {
  if (close) {
    for (const resource of uuAppResourceList) {
      try {
        await resourceClient.close(resource.uuAppResourceType, resource.oid);
      } catch (e) {
        resource.failedToClose = true;
        console.error(`Closing ${resource.uuAppResourceType} ${resource.oid} failed: ` + e);
      }
    }
  }

  for (const resource of uuAppResourceList) {
    if (resource.failedToClose) {
      continue;
    }

    try {
      await resourceClient.delete(resource.uuAppResourceType, resource.oid);
    } catch (e) {
      console.error(`Deleting ${resource.uuAppResourceType} ${resource.oid} failed: ` + e);
    }
  }
}

module.exports = async function ({ uuAppBox }, environment, ...args) {
  let env = new Environment(environment, ...args);
  if (env.getArgumentValue("help") !== undefined) {
    printHelp(env.isInProjectScope());
    return;
  }

  console.log("\nDeploying uuApp...\n");

  let cloudDescriptor = env.getCloudg02Descriptor(); // TODO needs to be validated
  let appResourcePoolOid = env.getArgumentValue("uuAppResourcePoolOid") || cloudDescriptor.uuSubAppDeploymentConfig && cloudDescriptor.uuSubAppDeploymentConfig.uuAppResourcePoolOid;
  if (!appResourcePoolOid || appResourcePoolOid === Environment.REQUIRED_VALUE_PLACEHOLDER) {
    throw new DevkitBaseError("Missing parameter: uuAppResourcePoolOid");
  }

  if (env.isInProjectScope() && env.getArgumentValue("skipUuAppBoxBuild") === undefined) {
    try {
      ChildProcess.execSync(`npm run uuCloudg02AppBox -- -e=${environment} ${args.join(" ")}`, {stdio: 'inherit' });
    } catch (e) {
      throw new ChildProcessError("Creating uuAppBox failed.", e.message);
    }
    env.reload() // Reload to load changes done by appBox
    cloudDescriptor = env.getCloudg02Descriptor();
  }

  let devkitConfig = env.getDevkitConfig();
  let appBoxUri = env.getArgumentValue("uuAppBoxUri") || devkitConfig.uuAppBoxUri;
  if (!appBoxUri || appBoxUri === Environment.REQUIRED_VALUE_PLACEHOLDER) {
    throw new DevkitBaseError("Missing parameter: uuAppBoxUri");
  }
  let workloadOid = env.getArgumentValue("uuSubAppInstanceWorkloadOid") || devkitConfig.uuSubAppInstanceWorkloadOid;
  let uuSubAppDeploymentConfig = cloudDescriptor.uuSubAppDeploymentConfig;
  let targetSlot = env.getArgumentValue("targetSlot") || uuSubAppDeploymentConfig && uuSubAppDeploymentConfig.targetSlot;
  if (targetSlot && targetSlot.toLowerCase() === "production") {
    targetSlot = null;
  }
  let uuAppServerEnvironment = { ...cloudDescriptor.uuAppServerEnvironment };
  let secretListMap = cloudDescriptor.secretListMap && Object.keys(cloudDescriptor.secretListMap).length
    ? { ...cloudDescriptor.secretListMap }
    : null;

  let consoleClient = new ConsoleClient(env);
  let resourceClient = new Resource(env);
  let resourceIfc = new ResourceIfc(env);
  let resourcePool = new ResourcePool(env);
  let instanceWorkload = new InstanceWorkload(env);

  // Check if resource pool has configured uuAppPackRepository
  let resourcePoolConfig = await resourcePool.get(appResourcePoolOid);
  if (!resourcePoolConfig?.uuAppResourcePool?.uuAppPackRepository?.uri) {
    throw new DevkitBaseError(`UuAppResourcePool ${appResourcePoolOid} is missing configuration of uuAppPackRepository (see https://uuapp.plus4u.net/uu-bookkit-maing01/b229ab71ca804c01b5dbe7d37e27f4cc/book/page?code=76790638 for details).`);
  }

  if (targetSlot) {
    let { slotMap } = await resourcePool.getAvailableSlotMap(appResourcePoolOid);
    if (!Object.keys(slotMap).includes(targetSlot)) {
      throw new DevkitBaseError(`UuAppResourcePool ${appResourcePoolOid} does not contain '${targetSlot}' slot.`);
    }
  }

  let progressMap;
  let uuSubAppInstanceWorkload;
  let allocatedUuAppResourceList = [];

  let appAlreadyDeployed = false;
  let slotAlreadyDeployed = false;
  if (workloadOid) {
    uuSubAppInstanceWorkload = await instanceWorkload.loadWorkload(workloadOid);
  }
  if (!uuSubAppInstanceWorkload) {
    uuSubAppInstanceWorkload = await instanceWorkload.loadWorkloadByAsid(appResourcePoolOid, uuSubAppDeploymentConfig.asid)
  }
  if (uuSubAppInstanceWorkload) {
    workloadOid = uuSubAppInstanceWorkload.data.oid;
    progressMap = uuSubAppInstanceWorkload.progressMap;
    appAlreadyDeployed = true;
    slotAlreadyDeployed = targetSlot && uuSubAppInstanceWorkload.data.slotMap && uuSubAppInstanceWorkload.data.slotMap.hasOwnProperty(targetSlot);

    instanceWorkload.printWorkloadDetailUri(workloadOid, true);

    if (devkitConfig.uuSubAppInstanceWorkloadOid !== workloadOid) {
      env.updateProjectDevkitConfig("uuSubAppInstanceWorkloadOid", workloadOid);
    }
  }

  if (targetSlot && !appAlreadyDeployed) {
    throw new DevkitBaseError(`UuSubAppInstanceWorkload ${workloadOid ? workloadOid : ""} does not exist.`);
  }

  if (!appAlreadyDeployed || (targetSlot && !slotAlreadyDeployed)) {
    let { itemList: existingUuAppResourceList } = await resourceIfc.listAllocatedResources(appResourcePoolOid);
    console.log("> Allocating uuApp resources...");
    if (!cloudDescriptor.uuAppBoxDescriptor) {
      if (!uuAppBox) {
        let appBoxClient = new AppBox(env, { baseUri: appBoxUri });
        uuAppBox = await appBoxClient.get(appBoxUri);
      }
      let { data: appBox } = uuAppBox;
      cloudDescriptor.uuAppBoxDescriptor = { ...appBox };
    }
    let deliverySpec = { ...cloudDescriptor.uuAppBoxDescriptor.deliverySpec };
    if (targetSlot) {
      deliverySpec = {
        uuNodeSetMap: deliverySpec.uuNodeSetMap,
        uuGatewayMap: deliverySpec.uuGatewayMap,
      };
    }
    let { uuAppResourceTypeMap, remainingUuAppResourceList, uuAppResourceCount } = getUuAppResourceTypeMap(deliverySpec, existingUuAppResourceList, targetSlot);
    try {
      await resourcePool.allocateUuAppResources(appResourcePoolOid, uuAppResourceTypeMap);
    } catch (e) {
      if (e.cause && e.cause.responseBody && e.cause.responseBody.replaceAll(" ", "").includes("uu-cloud-universe/uuAppResourcePool/allocateUuAppResources/invalidDtoIn")) {
        // Support for uuCloudg02 < 0.16.0
        // TODO Remove with next major version.
        remainingUuAppResourceList = existingUuAppResourceList.map(uuAppResource => uuAppResource);
        let { uuAppResourceTypeMaps } = getUuAppResourceTypeMaps(deliverySpec);
        for (let uuAppResourceTypeMap of uuAppResourceTypeMaps) {
          let uuCloudResourceOidMap = {};
          if (uuAppResourceTypeMap.uuGatewayResource) {
            let uuCloudResourceOid = env.getArgumentValue("uuCloudResourceOid");
            uuCloudResourceOidMap.uuGatewayResource = uuCloudResourceOid;
          }
          await resourcePool.allocateUuAppResources(appResourcePoolOid, uuAppResourceTypeMap, uuCloudResourceOidMap);
        }
      } else {
        throw e;
      }
    }

    /**
     * Workaround for obtaining list of newly allocated resources, as "uuAppResourcePool/allocateUuAppResources" does not return them.
     * Allocating resources also takes some time after the response is obtained and there is no way how to observe the state in which the allocation is.
     */
    let time = 0;
    while (true) {
      await new Promise(resolve => setTimeout(resolve, 5000));
      time += 5;
      console.log(" ..." + time + "s");
      let { itemList } = await resourceIfc.listAllocatedResources(appResourcePoolOid);
      allocatedUuAppResourceList = itemList.filter(
        newResource => !remainingUuAppResourceList.find(
          resource => newResource.oid === resource.oid
        )
      );
      if (allocatedUuAppResourceList.length >= uuAppResourceCount) {
        break;
      }
    }

    if (!targetSlot) {
      console.log("> Creating workload...");
      try {
        let workloadCreateDtoOut = await instanceWorkload.createWorkload(
          appResourcePoolOid,
          uuSubAppDeploymentConfig.asid,
          cloudDescriptor.uuAppBoxDescriptor.name,
          cloudDescriptor.uuAppBoxDescriptor.description
        );
        workloadOid = workloadCreateDtoOut.uuSubAppInstanceWorkload.oid;
        progressMap = workloadCreateDtoOut.progressMap;

        await consoleClient.waitForProgressBus(progressMap.uuConsoleBaseUri, progressMap.progressBusCode);
      } catch (e) {
        console.error(`\nCreating workload failed: ${e}\n`);
        console.log("> Removing allocated uuAppResources...");
        await deleteResources(resourceClient, allocatedUuAppResourceList)
        return;
      }

      console.log(`Workload with oid '${workloadOid}' successfully created.`);
      instanceWorkload.printWorkloadDetailUri(workloadOid);
      env.updateProjectDevkitConfig("uuSubAppInstanceWorkloadOid", workloadOid);
    }
  }

  let uuGatewayMap;
  if (targetSlot) {
    try {
      console.log("> Preparing slot for deployment...");
      const prepareSlotDtoOut = await instanceWorkload.prepareSlot(workloadOid, appBoxUri, targetSlot);
      progressMap = prepareSlotDtoOut.progressMap;
      await consoleClient.waitForProgressBus(progressMap.uuConsoleBaseUri, progressMap.progressBusCode);
    } catch (e) {
      throw new DevkitBaseError("Slot preparartion for deployment failed.", null, e);
    }

    try {
      console.log("> Deploying slot...");
      const deploySlotDtoOut = await instanceWorkload.deploySlot(workloadOid, targetSlot, uuAppServerEnvironment, secretListMap);
      progressMap = deploySlotDtoOut.progressMap;
      uuGatewayMap = deploySlotDtoOut.uuGatewayMap;
      await consoleClient.waitForProgressBus(progressMap.uuConsoleBaseUri, progressMap.progressBusCode);
    } catch (e) {
      throw new DevkitBaseError("Slot deployment failed.", null, e);
    }
  } else {
    console.log("> Preparing workload for deployment...");
    try {
      const prepareWorkloadForDeploymentDtoOut = await instanceWorkload.prepareWorkloadForDeployment(workloadOid, appBoxUri, uuSubAppDeploymentConfig.awidList);
      progressMap = prepareWorkloadForDeploymentDtoOut.progressMap;
      await consoleClient.waitForProgressBus(progressMap.uuConsoleBaseUri, progressMap.progressBusCode);
    } catch (e) {
      throw new DevkitBaseError("Workload preparartion for deployment failed.", null, e);
    }

    console.log("> Deploying workload...");
    try {
      let deployWorkloadDtoOut = await instanceWorkload.deployWorkload(workloadOid, uuAppServerEnvironment, secretListMap);
      progressMap = deployWorkloadDtoOut.progressMap;
      uuGatewayMap = deployWorkloadDtoOut.uuGatewayMap;
      await consoleClient.waitForProgressBus(progressMap.uuConsoleBaseUri, progressMap.progressBusCode);
    } catch (e) {
      throw new DevkitBaseError("Workload deployment failed.", null, e);
    }
  }

  console.log("App successfully deployed.");

  let uuSubAppSppList = [];
  Object.keys(uuGatewayMap).forEach(gw => {
    uuSubAppSppList = uuSubAppSppList.concat(uuGatewayMap[gw]);
  });
  console.log("List of uuSubAppSpp: ", uuSubAppSppList);

  if (targetSlot) {
    console.log(
      ` => Application was deployed to the ${targetSlot} slot.` +
      ` To make it available in the 'production' slot, either change the uuCloud configuration of the uuSubApp or` +
      ` run the ${env.isInProjectScope() ? "uuCloudg02Swap" : "swap"} task.`
    );
  }

};
