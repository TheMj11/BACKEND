"use strict";

const REQUIRED_VALUE_PLACEHOLDER = "----- VALUE REQUIRED -----";
const DEFAULT_NODE_STACK = "docker://uuapp-dev-repo.plus4u.net/runtimestacks/uu_appruntimestackg02-nodejs:1.0";
const DEFAULT_JAVA_STACK = "docker://uuapp-dev-repo.plus4u.net/runtimestacks/uu_appruntimestackg02-openjdk-x86:1.0";

class DescriptorConverter {

  static convert(cloudg01Descriptor, opts = {}) {
    let cloudg02Descriptor = this._prepareBasicStructure();
    let uuAppBoxDescriptor = cloudg02Descriptor.uuAppBoxDescriptor;
    uuAppBoxDescriptor.code = cloudg01Descriptor.uuSubApp.code.replace(/\./g, "-").toLowerCase();
    uuAppBoxDescriptor.name = cloudg01Descriptor.uuSubApp.name;
    uuAppBoxDescriptor.description = cloudg01Descriptor.uuSubApp.description;
    if (!opts || !opts.excludeVersion) {
      uuAppBoxDescriptor.version = cloudg01Descriptor.uuSubApp.version;
    }
    uuAppBoxDescriptor.deliverySpec.urlPath = uuAppBoxDescriptor.code;

    let stack;
    let nodeSetList = [];
    let appPackList = [];
    Object.entries(cloudg01Descriptor.uuSubApp.uuAppNodeSetMap).forEach(([nodeSetg01Code, nodeSetg01Data]) => {
      let asyncNodeSet = nodeSetg01Data.sppRoute && nodeSetg01Data.sppRoute.includes("async");

      let appPackNo = appPackList.indexOf(nodeSetg01Data.appPackUri || nodeSetg01Code);
      if (appPackNo === -1) {
        appPackList.push(nodeSetg01Data.appPackUri);
        appPackNo = appPackList.length - 1;
      }
      let appPackg02Code = `uuAppPack${`${appPackNo + 1}`.padStart(2, "0")}`;
      if (!uuAppBoxDescriptor.uuAppPackMap[appPackg02Code]) {
        uuAppBoxDescriptor.uuAppPackMap[appPackg02Code] = {
          type: "uuNodeImage"
        };
        if (!stack) stack = nodeSetg01Data.runtimeStack.includes("JAVA") ? "java" : "nodejs";
        cloudg02Descriptor.uuAppPackRuntimeStackMap[appPackg02Code] = nodeSetg01Data.runtimeStack.includes("JAVA") ? DEFAULT_JAVA_STACK : DEFAULT_NODE_STACK;
      }

      let nodeSetNo = nodeSetList.indexOf(nodeSetg01Code);
      if (nodeSetNo === -1) {
        nodeSetList.push(nodeSetg01Code);
        nodeSetNo = nodeSetList.length - 1;
      }
      let nodeSetg02Code = `nodeSet${`${nodeSetNo + 1}`.padStart(2, "0")}`;
      uuAppBoxDescriptor.deliverySpec.uuNodeSetMap[nodeSetg02Code] = {
        uuNodeSetType: asyncNodeSet ? "cmdAsync" : "cmdSync",
        uuNodeSize: nodeSetg01Data.nodeSize.replace(/^[A-Z]1_/g, (match) => {
          return `${match[0]}2_`;
        }),
        uuAppPackRef: appPackg02Code,
        uuAppRoutingList: [{
          uuGatewayRef: asyncNodeSet ? "gwCmdAsync01" : "gwCmdSync01",
          uuSubAppSpp: asyncNodeSet ? `${uuAppBoxDescriptor.deliverySpec.urlPath}-async` : "${urlPath}"
        }]
      };

      if (asyncNodeSet && !uuAppBoxDescriptor.deliverySpec.uuGatewayMap["gwCmdAsync01"]) {
        uuAppBoxDescriptor.deliverySpec.uuGatewayMap["gwCmdAsync01"] = {
          uuGatewayType: "cmdAsync"
        };
      }
    });

    let routesCount = cloudg01Descriptor.uuSubApp.awidCount || 0;
    routesCount += cloudg01Descriptor.uuSubApp.asidRequired == null || cloudg01Descriptor.uuSubApp.asidRequired ? 1 : 0;
    let gatewaySize = routesCount <= 10 ? "XXS" :
                      routesCount <= 50 ? "XS" :
                      routesCount <= 250 ? "S" :
                      routesCount <= 1000 ? "M" :
                      routesCount <= 5000 ? "L" :
                      routesCount <= 25000 ? "XL" :
                      "XXL";
    Object.values(uuAppBoxDescriptor.deliverySpec.uuGatewayMap).forEach((gwData) => gwData.uuGatewaySize = gatewaySize);

    let osidList = [];
    Object.entries(cloudg01Descriptor.uuSubApp.uuAppObjectStoreMap).forEach(([store01Code, storeg01Data]) => {
      let osidNo = osidList.indexOf(store01Code);
      if (osidNo === -1) {
        osidList.push(store01Code);
        osidNo = osidList.length - 1;
      }
      let osidCode = `osid${`${osidNo + 1}`.padStart(2, "0")}`;

      uuAppBoxDescriptor.deliverySpec.uuAppObjectStoreMap[osidCode] = {
        uuAppObjectStoreType: "uuAppObjectStoreg01",
        uuAppObjectStoreSize: !storeg01Data.size ? "G0_25" :
                              storeg01Data.size <= 0.25 ? "G0_25" :
                              storeg01Data.size <= 0.5 ? "G0_5" :
                              storeg01Data.size <= 1 ? "G1" :
                              storeg01Data.size <= 5 ? "G5" :
                              storeg01Data.size <= 10 ? "G10" :
                              storeg01Data.size <= 20 ? "G20" :
                              storeg01Data.size <= 30 ? "G30" :
                              storeg01Data.size <= 40 ? "G40" :
                              storeg01Data.size <= 50 ? "G50" :
                              "G75"
      };
      if (stack === "java") {
        uuAppBoxDescriptor.deliverySpec.uuAppServerEnvironment[`uuSubAppDataStore.${storeg01Data.alias}`] = `\${uuAppObjectStoreMap.${osidCode}}`;
      } else {
        if (!uuAppBoxDescriptor.deliverySpec.uuAppServerEnvironment.uuSubAppDataStoreMap) uuAppBoxDescriptor.deliverySpec.uuAppServerEnvironment.uuSubAppDataStoreMap = {};
        uuAppBoxDescriptor.deliverySpec.uuAppServerEnvironment.uuSubAppDataStoreMap[storeg01Data.alias] = `\${uuAppObjectStoreMap.${osidCode}}`;
      }
    });

    cloudg02Descriptor.uuSubAppDeploymentConfig.targetSlot = cloudg01Descriptor.uuSubApp.targetSlot && cloudg01Descriptor.uuSubApp.targetSlot.match(/^BETA$/i) ? "preview" : "production",
    cloudg02Descriptor.uuSubAppDeploymentConfig.asid = cloudg01Descriptor.uuSubAppInstance && cloudg01Descriptor.uuSubAppInstance.asid || REQUIRED_VALUE_PLACEHOLDER,
    cloudg02Descriptor.uuSubAppDeploymentConfig.awidList = cloudg01Descriptor.uuSubAppInstance && cloudg01Descriptor.uuSubAppInstance.awidList.map(awidObject => typeof awidObject === "string" ? awidObject : awidObject.awid) || [REQUIRED_VALUE_PLACEHOLDER]
    cloudg02Descriptor.uuAppServerEnvironment = cloudg01Descriptor.uuSubApp.uuConfigMap;

    return cloudg02Descriptor;
  }

  static _prepareBasicStructure() {
    return {
      uuAppBoxDescriptor: {
        schemaVersion: "2.0",
        code: null,
        version: "${projectVersion}",
        name: null,
        description: null,
        productUri: null,
        uuAppPackMap: {},
        deliverySpecType: "uusubappspec:2.0",
        deliverySpec: {
          urlPath: null,
          uuNodeSetMap: {},
          uuGatewayMap: {
            gwCmdSync01: {
              uuGatewayType: "cmdSync"
            },
          },
          uuAppObjectStoreMap: {},
          uuAppServerEnvironment: {}
        }
      },
      uuAppPackRuntimeStackMap: {},
      uuSubAppDeploymentConfig: {
        uuAppResourcePoolOid: "----- VALUE REQUIRED -----"
      },
      uuAppServerEnvironment: {},
      secretListMap: {}
    };
  }

}

module.exports = DescriptorConverter;
