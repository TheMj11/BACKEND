"use strict";

const Fs = require("fs");

const COLS = [
  { header: "VulnerabilityID", minWidth: "m" },
  { header: "PkgID", minWidth: "m" },
  { header: "PkgName" },
  { header: "PkgIdentifier", minWidth: "xl" },
  { header: "InstalledVersion", minWidth: "m" },
  { header: "FixedVersion", minWidth: "m" },
  { header: "Status", minWidth: "xs" },
  { header: "Layer", minWidth: "xl" },
  { header: "SeveritySource" },
  { header: "PrimaryURL", minWidth: "l" },
  { header: "DataSource", minWidth: "xl" },
  { header: "Title", minWidth: "l" },
  { header: "Description", minWidth: "xl" },
  { header: "Severity", minWidth: "xs" },
  { header: "CweIDs" },
  { header: "VendorSeverity", minWidth: "m" },
  { header: "CVSS", minWidth: "xl" },
  { header: "References", minWidth: "xl" },
  { header: "PublishedDate", minWidth: "m" },
  { header: "LastModifiedDate", minWidth: "m" },
];

class TrivyScanConverter {

  static jsonToUu5String(jsonPath) {
    const trivyScanObject = JSON.parse(Fs.readFileSync(jsonPath));
    const results = trivyScanObject.Results;
  
    let uu5String =
      `<UU5.Bricks.Section header='Vulnerability Evaluation - Overview'>\n` +
      `  <UU5.RichText.Block uu5string='<uu5string/><UU5.Bricks.Ul>` +
      `<UU5.Bricks.Li>Created at: ${trivyScanObject.CreatedAt}</UU5.Bricks.Li>` +
      `<UU5.Bricks.Li>Image name: ${trivyScanObject.ArtifactName.replace("/tmp/reports/", "")}</UU5.Bricks.Li>` +
      `<UU5.Bricks.Li>Image id: ${trivyScanObject.Metadata.ImageID}</UU5.Bricks.Li>` +
      `<UU5.Bricks.Li>Image labels:<UU5.Bricks.Ul><UU5.Bricks.Li>` +
      Object.entries(trivyScanObject.Metadata.ImageConfig.config.Labels)
        .map(([key, value]) => {
          return TrivyScanConverter._formatValue(`${key}: ${value}`, 1).replaceAll("\\\\", "");
        })
        .join("</UU5.Bricks.Li><UU5.Bricks.Li>") +
      `</UU5.Bricks.Li></UU5.Bricks.Ul></UU5.Bricks.Li></UU5.Bricks.Ul>'/>\n`;
  
    let rows = [];
    for (const result of results) {
      const vulnerabilities = result.Vulnerabilities;
      if (!vulnerabilities || !vulnerabilities.length) {
        continue;
      }
  
      uu5String += `  <UU5.Bricks.Section header='${result.Target.replace("/tmp/reports/", "")}'>\n`;
  
      for (const vulnerability of vulnerabilities) {
        let row = [];
        COLS.forEach(col => {
          if (vulnerability[col.header]) {
            row.push(`"${TrivyScanConverter._formatValue(vulnerability[col.header]).replaceAll(/(?<!\\)['"]/g, m => `\\${m}`)}"`);
          } else {
            row.push(`""`);
          }
        });
        rows.push(`[${row}]`);
      }
  
      uu5String += `    <Uu5TilesBricks.Table data='<uu5json/>[${rows}]' columns='<uu5json/>${JSON.stringify(COLS)}'/>\n  </UU5.Bricks.Section>\n`;
    }
  
    return uu5String + "</UU5.Bricks.Section>";
  }

  static _formatValue(value, depth = 0) {
    switch (typeof value) {
      case "string": {
        if (value.includes("\n") || value.includes("\r") || value.includes("http")) {
          return (depth === 0 ? `<uu5string/>${value}` : value)
            .replaceAll(/(?<!\\)'/g, "\\'")
            .replaceAll(
              /https?:\/\/\S*(?=\s|$)/g,
              m => `<UuContentKit.Links.Link tempContent=\\\\"${m}\\\\" src=\\\\"${m}\\\\" target=\\\\"_blank\\\\"/>`
            )
            .replaceAll(/\r\n|\r|\n\r|\n/g, "<br/>");
        } else {
          return value.replaceAll(/(?<!\\)'/g, "\\'");
        }
      }
      case "object": {
        if (Array.isArray(value)) {
          return (depth === 0 ? "<uu5string/>" : "") +
            "<UU5.Bricks.Ul><UU5.Bricks.Li>" +
            value
              .map(item => TrivyScanConverter._formatValue(item, depth + 1))
              .join("</UU5.Bricks.Li><UU5.Bricks.Li>") +
            "</UU5.Bricks.Li></UU5.Bricks.Ul>";
        } else {
          if (depth === 0 && Object.keys(value).length === 1 && typeof Object.values(value)[0] === "string") {
            return TrivyScanConverter._formatValue(`${Object.keys(value)[0]}: ${Object.values(value)[0]}`);
          } else {
            return (depth === 0 ? "<uu5string/>" : "") +
              "<UU5.Bricks.Ul><UU5.Bricks.Li>" +
              Object.keys(value)
                .map(key => {
                  return typeof value[key] !== "object"
                    ? `${key}: ${TrivyScanConverter._formatValue(value[key], depth + 1)}`
                    : `${key}${TrivyScanConverter._formatValue(value[key], depth + 1)}`;
                })
                .join("</UU5.Bricks.Li><UU5.Bricks.Li>") +
              "</UU5.Bricks.Li></UU5.Bricks.Ul>";
          }
        }
      }
      case "number": {
        return value;
      }
      default: {
        return TrivyScanConverter._formatValue(`${value}`, depth);
      }
    }
  }
}

module.exports = TrivyScanConverter;
