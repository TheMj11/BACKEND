"use strict";

const CloudClient = require("./cloud-client.js");
const DevkitBaseError = require("../errors/devkit-base-error.js");

const APPBOX_REGISTRY = "uu-cloud-appboxregistryg01";

class AppPackRepository extends CloudClient {

  constructor(environment, opts = {}) {
    let baseUri = (opts && opts.baseUri) || environment.getArgumentValue("uuAppBoxRegistryBaseUri") || environment.getDevkitConfig()["uuAppBoxRegistryBaseUri"] || "UNDEFINED";
    if (!baseUri || baseUri === "UNDEFINED") {
      throw new DevkitBaseError("Missing parameter: uuAppBoxRegistryBaseUri");
    }
    if (!baseUri.includes(APPBOX_REGISTRY)) {
      throw new DevkitBaseError("Parameter uuAppBoxRegistryBaseUri refers to unsupported storage type.");
    }
    super(environment, {...opts, baseUri}, "uuAppPackRepository");
  }

  async get(uuAppPackType) {
    let result;
    try {
      result = await this._get("get", {uuAppPackType});
    } catch (e) {
      throw new DevkitBaseError("Getting of uuAppPackRepository failed.", null, e);
    }
    return result.uuAppPackRepository;
  }

  async uploadPack(uuAppPackType, uuAppPackKey, data, overwrite = false) {
    let uploadStrategy = overwrite ? "overwrite" : "createNonExisting";
    try {
      return await this._upload("pack/upload", {uuAppPackType, uuAppPackKey, uploadStrategy, data});
    } catch (e) {
      throw new DevkitBaseError("Uploading of uuAppPack failed.", null, e);
    }
  }

}

module.exports = AppPackRepository;
