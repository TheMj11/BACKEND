"use strict";

const CloudClient = require("./cloud-client.js");
const DevkitBaseError = require("../errors/devkit-base-error.js");

class InstanceWorkload extends CloudClient {

  constructor(environment, opts = {}) {
    super(environment, opts, "uuSubAppInstanceWorkload");
  }

  printWorkloadDetailUri(oid, addNewLine = false) {
    let detailUri = this._getUseCaseUrl(null, {id: oid}).replace("uuSubAppInstanceWorkload", "uuSubAppInstanceWorkloadDetail");
    console.log(`Visit ${detailUri} for detailed information about workload.${addNewLine ? "\n" : ""}`);
  }

  async getWorkload(oid) {
    try {
      let dtoOut = await this._get("get", {oid});
      return dtoOut ? dtoOut.uuSubAppInstanceWorkload : null;
    } catch (e) {
      if (e.status === 404) {
        return null;
      }
      throw new DevkitBaseError("Getting workload failed.", null, e);
    }
  }

  async getWorkloadByAsid(uuAppResourcePoolOid, asid) {
    try {
      return await this._findByAsid(uuAppResourcePoolOid, asid);
    } catch (e) {
      throw new DevkitBaseError("Getting workload failed.", null, e);
    }
  }

  async loadWorkload(oid) {
    try {
      return await this._get("load", {oid});
    } catch (e) {
      if (e.status === 404) {
        return null;
      }
      throw new DevkitBaseError("Loading workload failed.", null, e);
    }
  }

  async loadWorkloadByAsid(uuAppResourcePoolOid, asid) {
    try {
      let workload = await this._findByAsid(uuAppResourcePoolOid, asid);
      return workload ? await this.loadWorkload(workload.oid) : null;
    } catch (e) {
      throw new DevkitBaseError("Loading workload failed.", null, e);
    }
  }

  async createWorkload(uuAppResourcePoolOid, asid, name, desc) {
    try {
      return await this._post("create", {uuAppResourcePoolOid, asid, name, desc});
    } catch (e) {
      throw new DevkitBaseError("Creating workload failed.", null, e);
    }
  }

  async prepareWorkloadForDeployment(oid, uuAppBoxUri, awidList) {
    try {
      return await this._post("prepareForDeployment", {oid, uuAppBoxUri, awidList});
    } catch (e) {
      throw new DevkitBaseError("Preparing workload for deployment failed.", null, e);
    }
  }

  async deployWorkload(oid, uuAppServerEnvironment, secretListMap = null) {
    try {
      return await this._post("deploy", {oid, uuAppServerEnvironment, secretListMap});
    } catch (e) {
      throw new DevkitBaseError("Deploying workload failed.", null, e);
    }
  }

  async undeployWorkload(oid) {
    try {
      return await this._post("undeploy", {oid});
    } catch (e) {
      throw new DevkitBaseError("Undeploying workload failed.", null, e);
    }
  }

  async suspendWorkload(oid) {
    try {
      return await this._post("suspend", {oid});
    } catch (e) {
      throw new DevkitBaseError("Suspending workload failed.", null, e);
    }
  }

  async cancelWorkload(oid) {
    try {
      return await this._post("cancel", {oid});
    } catch (e) {
      throw new DevkitBaseError("Canceling workload failed.", null, e);
    }
  }

  async closeWorkload(oid) {
    try {
      return await this._post("close", {oid});
    } catch (e) {
      throw new DevkitBaseError("Closing workload failed.", null, e);
    }
  }

  async deleteWorkload(oid) {
    try {
      return await this._post("delete", {oid});
    } catch (e) {
      throw new DevkitBaseError("Deleting workload failed.", null, e);
    }
  }

  async prepareSlot(oid, uuAppBoxUri, slot) {
    try {
      return await this._post("slot/prepare", {oid, uuAppBoxUri, slot});
    } catch (e) {
      throw new DevkitBaseError("Preparing slot failed.", null, e);
    }
  }

  async scaleSlot(oid, uuNodeResourceMap, slot) {
    try {
      return await this._post("slot/scale", {oid, uuNodeResourceMap, slot});
    } catch (e) {
      throw new DevkitBaseError("Slot scaling failed.", null, e);
    }
  }

  async deploySlot(oid, slot, uuAppServerEnvironment, secretListMap = null) {
    try {
      return await this._post("slot/deploy", {oid, slot, uuAppServerEnvironment, secretListMap});
    } catch (e) {
      throw new DevkitBaseError("Deploying slot failed.", null, e);
    }
  }

  async undeploySlot(oid, slot) {
    try {
      return await this._post("slot/undeploy", {oid, slot});
    } catch (e) {
      throw new DevkitBaseError("Undeploying slot failed.", null, e);
    }
  }

  async deleteSlot(oid, slot) {
    try {
      return await this._post("slot/delete", {oid, slot});
    } catch (e) {
      throw new DevkitBaseError("Undeploying slot failed.", null, e);
    }
  }

  async swap(oid, sourceSlot) {
    try {
      return await this._post("swap", {oid, sourceSlot});
    } catch (e) {
      throw new DevkitBaseError("Swap failed.", null, e);
    }
  }

  async list(uuAppResourcePoolOid) {
    try {
      return await this._get("list", {uuAppResourcePoolOid});
    } catch (e) {
      throw new DevkitBaseError("List failed.", null, e);
    }
  }

  async _findByAsid(uuAppResourcePoolOid, asid, pageIndex = 0) {
    try {
      let pageSize = 1000;
      let listDtoOut = await this._get("list", {
        uuAppResourcePoolOid,
        "pageInfo.pageSize": pageSize,
        "pageInfo.pageIndex": pageIndex,
      });
      let workload = listDtoOut.itemList.find(workload => workload.asid === asid);
      if (workload) {
        return workload;
      } else if ((pageIndex + 1) * pageSize < listDtoOut.pageInfo.total) {
        return await this._findByAsid(uuAppResourcePoolOid, asid, pageIndex + 1);
      } else {
        return null;
      }
    } catch (e) {
      throw new DevkitBaseError("List failed.", null, e);
    }
  }

}

module.exports = InstanceWorkload;
