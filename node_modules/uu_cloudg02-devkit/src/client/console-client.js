"use strict";

const OidcClient = require("./oidc-client.js");
const UuAppClient = require("./uu-app-client.js");
const DevkitBaseError = require("../errors/devkit-base-error.js");

const PROGRESS_STATES = {
  completed: "completed",
  completedWithWarning: "completedWithWarning",
  completedWithError: "completedWithError",
  cancelled: "cancelled",
  finished: "finished",
  waiting: "waiting",
  running: "running",
  runningWithWarning: "runningWithWarning",
  runningWithError: "runningWithError",
  failed: "failed",
  started: "started",
  final: "final",
  alternativeFinal: "alternativeFinal",
  suspended: "suspended",
};

const PROGRESS_RUNNING_STATES = [
  PROGRESS_STATES.running,
  PROGRESS_STATES.runningWithWarning,
  PROGRESS_STATES.runningWithError,
];

const PROGRESS_SUCCESSFUL_FINAL_STATES = [
  PROGRESS_STATES.completed,
  PROGRESS_STATES.completedWithWarning,
  PROGRESS_STATES.finished,
  PROGRESS_STATES.final,
  PROGRESS_STATES.alternativeFinal,
];

const PROGRESS_UNSUCCESSFUL_FINAL_STATES = [
  PROGRESS_STATES.completedWithError,
  PROGRESS_STATES.cancelled,
  PROGRESS_STATES.failed,
  PROGRESS_STATES.suspended,
];

class ConsoleClient {

  constructor(environment, opts = {}) {
    let verifySsl = (opts && opts.verifySsl !== undefined) ? opts.verifySsl : (environment.getArgumentValue("verifySsl") !== "false");
    let oidcClient = new OidcClient(environment, opts);
    this._appClient = new UuAppClient({oidcClient, verifySsl});
  }

  async waitForProgressBus(uuConsoleBaseUri, progressBusCode, acceptUnsuccessfulStates = false) {
    let url = `${uuConsoleBaseUri}/progressBus/load`;

    let progressBusLoad = () => this._appClient.get(url, {code: progressBusCode});

    let time = 0;

    while (true) {
      await new Promise(resolve => setTimeout(resolve, 5000));
      time += 5;
      console.log(" ..." + time + "s");

      let result;
      try {
        result = await progressBusLoad();
      } catch (e) {
        throw new DevkitBaseError("Error while waiting for progressBus.", null, e);
      }

      let progressStateMap = {};
      result.progressList && result.progressList.forEach(progress => progressStateMap[progress.code] = progress.state);

      if (Object.values(progressStateMap).every(state => PROGRESS_SUCCESSFUL_FINAL_STATES.includes(state))) {
        return { progressStateMap, withError: false };
      }

      if (
        Object.values(progressStateMap).some(state => PROGRESS_UNSUCCESSFUL_FINAL_STATES.includes(state)) &&
        !Object.values(progressStateMap).some(state => PROGRESS_RUNNING_STATES.includes(state))
        ) {
        if (acceptUnsuccessfulStates) {
          return { progressStateMap, withError: true };
        } else {
          throw new DevkitBaseError("Error while waiting for progressBus.", { paramMap: { progressStateMap } });
        }
      }
    }
  }

}

module.exports = ConsoleClient;
