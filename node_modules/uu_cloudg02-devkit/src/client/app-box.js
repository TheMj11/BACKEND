"use strict";

const { Readable } = require("stream");
const CloudClient = require("./cloud-client.js");
const DevkitBaseError = require("../errors/devkit-base-error.js");

const APPBOX_REGISTRY = "uu-cloud-appboxregistryg01";
const BOOKKIT = "uu-bookkit-maing01";
const DOCKIT = "uu-dockit-maing02";

class AppBox extends CloudClient {
  static isSupported(uuAppBoxRegistryBaseUri) {
    return (
      uuAppBoxRegistryBaseUri &&
      (uuAppBoxRegistryBaseUri.includes(APPBOX_REGISTRY) ||
        uuAppBoxRegistryBaseUri.includes(BOOKKIT) ||
        uuAppBoxRegistryBaseUri.includes(DOCKIT))
    );
  }

  static getBaseUri(uuAppBoxUri) {
    // split after awid
    return uuAppBoxUri.split(/(?<=[a-f0-9]{32})\//)[0];
  }

  constructor(environment, opts = {}) {
    let baseUri =
      (opts && opts.baseUri) ||
      environment.getArgumentValue("uuAppBoxRegistryBaseUri") ||
      environment.getDevkitConfig()["uuAppBoxRegistryBaseUri"] ||
      "UNDEFINED";
    let entity, documentId;
    if (baseUri.includes(APPBOX_REGISTRY)) {
      entity = "uuAppBox";
    } else if (baseUri.includes(DOCKIT)) {
      let dockitUriMatch = baseUri.match(/(^https?:\/\/[^\/]+\/[^\/]+\/[^\/\?]+).*documentId=([^&]+)/);
      if (!dockitUriMatch || !dockitUriMatch[2]) {
        throw new DevkitBaseError("uuAppBoxRegistryBaseUri is missing documentId.");
      }
      baseUri = dockitUriMatch[1];
      documentId = dockitUriMatch[2];
      entity = "document";
    } else if (!baseUri.includes(BOOKKIT)) {
      throw new DevkitBaseError("Parameter uuAppBoxRegistryBaseUri refers to unsupported storage type.");
    }
    super(environment, { ...opts, baseUri }, entity);
    this._baseUri = baseUri;
    this._documentId = documentId;
  }

  get baseUri() {
    return this._baseUri;
  }

  async create(appBoxDescriptor, { extendedResult = false } = {}) {
    let appBoxCode = `appbox-${appBoxDescriptor.code}-${appBoxDescriptor.version}`;
    let attachmentContent = JSON.stringify(appBoxDescriptor, null, 2);
    let attachmentData = Readable.from(attachmentContent);
    attachmentData.contentType = "application/json";
    attachmentData.filename = `${appBoxCode}.json`;

    let uri;
    let uuAppBox;
    if (this._baseUri.includes(APPBOX_REGISTRY)) {
      let result;
      try {
        result = await this._upload("create", { data: attachmentData });
      } catch (e) {
        throw new DevkitBaseError("Creating of uuAppBox failed.", null, e);
      }
      uuAppBox = result.uuAppBox;
      uri = `${this._getUseCaseUrl("get", { id: uuAppBox.id, extended: true })}`;
    } else if (this._baseUri.includes(BOOKKIT)) {
      // TODO Temporary fallback, upload as bookkit attachment
      let attachmentCode = appBoxCode.replace(/[\-\.]/g, "_");
      try {
        await this._upload("createBinary", { code: attachmentCode, data: attachmentData });
      } catch (e) {
        if (e.responseBody && e.responseBody.includes("uu-appbinarystore/duplicateCode")) {
          try {
            attachmentData = Readable.from(attachmentContent);
            attachmentData.contentType = "application/json";
            attachmentData.filename = `${appBoxCode}.json`;
            await this._upload("updateBinaryData", { code: attachmentCode, data: attachmentData });
          } catch (ei) {
            throw new DevkitBaseError("Uploading of uuAppBox failed.", null, ei);
          }
        } else {
          throw new DevkitBaseError("Uploading of uuAppBox failed.", null, e);
        }
      }
      uri = `${this._getUseCaseUrl("getBinaryData", { code: attachmentCode })}`;
    } else {
      // TODO Temporary fallback, upload as dockit attachment
      let attachmentCode = appBoxCode.replace(/[\-\.]/g, "_");
      try {
        await this._upload("attachment/create", {
          code: attachmentCode,
          documentId: this._documentId,
          data: attachmentData,
        });
      } catch (e) {
        if (e.responseBody && e.responseBody.includes("uu-dockit-main/attachment/create/duplicateCode")) {
          try {
            attachmentData = Readable.from(attachmentContent);
            attachmentData.contentType = "application/json";
            attachmentData.filename = `${appBoxCode}.json`;
            await this._upload("attachment/updateData", {
              code: attachmentCode,
              documentId: this._documentId,
              "sys.rev": Date.now(),
              data: attachmentData,
            });
          } catch (ei) {
            throw new DevkitBaseError("Uploading of uuAppBox failed.", null, ei);
          }
        } else {
          throw new DevkitBaseError("Uploading of uuAppBox failed.", null, e);
        }
      }
      uri = `${this._getUseCaseUrl("attachment/getData", { code: attachmentCode, documentId: this._documentId })}`;
    }
    return extendedResult ? { uri, uuAppBox } : uri;
  }

  async get(uuAppBoxUri) {
    if (uuAppBoxUri.includes(APPBOX_REGISTRY)) {
      if (!uuAppBoxUri.includes("extended=")) {
        uuAppBoxUri += "&extended=true";
      } else if (uuAppBoxUri.includes("extended=false")) {
        uuAppBoxUri = uuAppBoxUri.replace("extended=false", "extended=true");
      }
      let result;
      try {
        result = await this._get(uuAppBoxUri);
      } catch (e) {
        throw new DevkitBaseError("Getting of uuAppBox failed.", null, e);
      }
      return result.uuAppBox;
    } else if (uuAppBoxUri.includes(DOCKIT) || uuAppBoxUri.includes(BOOKKIT)) {
      let stream;
      try {
        stream = await this._download(uuAppBoxUri);
      } catch (e) {
        throw new DevkitBaseError("Getting of uuAppBox failed.", null, e);
      }
      return new Promise((resolve, reject) => {
        let content = "";
        stream.on("error", (e) => {
          reject(new DevkitBaseError("Getting of uuAppBox failed.", null, e));
        });
        stream.on("end", () => {
          resolve(JSON.parse(content));
        });
        stream.on("data", (chunk) => {
          content += chunk;
        });
      });
    } else {
      throw new Error("UuAppBoxUri refers to unsupported storage type.");
    }
  }

  async list() {
    try {
      return await this._get("list", {});
    } catch (e) {
      throw new DevkitBaseError("Listing uu5Library appbox failed.", null, e);
    }
  }

  async delete(id) {
    try {
      return await this._post("delete", { id });
    } catch (e) {
      throw new DevkitBaseError("Deleting uu5Library appbox failed.", null, e);
    }
  }

  async close(id) {
    try {
      return await this._post("close", { id });
    } catch (e) {
      throw new DevkitBaseError("Closing uu5Library appbox failed.", null, e);
    }
  }

  async suspend(id) {
    try {
      return await this._post("suspend", { id });
    } catch (e) {
      throw new DevkitBaseError("Suspending uu5Library appbox failed.", null, e);
    }
  }

  async cancel(id) {
    try {
      return await this._post("cancel", { id });
    } catch (e) {
      console.error(e);
      throw new Error("Cancelling uu5Library appbox failed.", null, e);
    }
  }
}

AppBox.APPBOX_REGISTRY = APPBOX_REGISTRY;

module.exports = AppBox;
