"use strict";

class DevkitBaseError extends Error {

  /**
   * `DevkitBaseError` class for representing generic errors.
   * 
   * @class
   * @classdesc Represents a base error class from which other error classes can inherit.
   * @param {string} message - A description of the error.
   * @param {object} [options={}] - An optional options object.
   * @param {object} [options.paramMap={}] - A map of parameters associated with the error (optional).
   * @param {number} [options.exitCode=1] - The exit code of the process (defaults to 1).
   * @param {*} [cause=null] - The underlying cause of the error (optional).
   * @extends {Error}
   */
  constructor(message, options = {}, cause = null) {
    super(message);
    this.paramMap = (options && options.paramMap) || {};
    this.exitCode = (options && options.exitCode) || 1;
    this.cause = cause;

    if (Object.keys(this.paramMap).length && this.paramMap.toString === Object.prototype.toString) {
      this.paramMap.toString = () => {
        try {
          return JSON.stringify(this.paramMap, null, 2);
        } catch (_) {
          return Object.prototype.toString.call(this.paramMap);
        }
      }
    }
  }

  /**
   * Prints a string representation of the object to `stderr`.
   * 
   * @function
   * @memberof DevkitBaseError
   * @instance
   * @returns {void}
   */
  logError() {
    const originalCause = this._getOriginalCause();
    if (!originalCause || originalCause instanceof DevkitBaseError) {
      // If error has no cause, or original cause is instance of DevkitBaseError
      // method toString() can be used to log the error without loss of information.
      console.error(`\n${this._toString()}\n`);
    } else {
      // If error has cause and original cause is not instance of DevkitBaseError
      // the original cause has to be passed as an additional parameter to console.error() method
      // to avoid information loss caused by calling the toString() method with unknown behavior.
      console.error(`\n${this._toString(true)}\n\n${this._getIndent(2)}caused by:`, originalCause, "\n");
    }
  }

  /**
   * Returns a string representation of the object.
   * 
   * @function
   * @memberof DevkitBaseError
   * @instance
   * @returns {string} A string representation of the object.
   */
  toString() {
    return this._toString();
  }

  _toString(omitNonDevkitBaseErrorCause = false) {
    const paramMapIndent = this._getIndent(4);
    const causeIndent = this._getIndent(2);

    let errorMessage = `${this.hasOwnProperty("name") ? this.name : "Error"}: ${this.message}`;

    let paramMapSection = this.paramMap && Object.keys(this.paramMap).length
      ? `\n${paramMapIndent}paramMap: ${this.paramMap.toString().replaceAll("\n", `\n${paramMapIndent}`)}`
      : "";

    let causeSection = "";
    if (this.cause) {
      if (this.cause instanceof DevkitBaseError) {
        causeSection = `\n\n${causeIndent}caused by: ${this.cause._toString(omitNonDevkitBaseErrorCause)}`;
      } else if (!omitNonDevkitBaseErrorCause) {
        causeSection = `\n\n${causeIndent}caused by: ${this.cause}`;
      }
    }

    return `${errorMessage}${paramMapSection}${causeSection}`;
  }

  _getIndent(indentLength) {
    return " ".repeat(indentLength);
  }

  _getOriginalCause() {
    if (!this.cause) {
      return null;
    }

    if (this.cause instanceof DevkitBaseError) {
      return this.cause._getOriginalCause() || this.cause;
    }

    return this.cause;
  }

}

module.exports = DevkitBaseError;
