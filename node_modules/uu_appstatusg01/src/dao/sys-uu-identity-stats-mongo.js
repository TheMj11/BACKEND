"use strict";

const { Config } = require("uu_appg01_core-utils");
const { DbConnection } = require("uu_appg01_datastore");
const {
  UuObjectDao,
  MissingRevision,
  ObjectNotFound,
  InvalidRevision,
  ObjectLocked,
  UnexpectedError,
  DuplicateKey,
  ObjectStoreError,
} = require("uu_appg01_objectstore");

const ASID = Config.get("asid");

class SysUuIdentityStatsMongo extends UuObjectDao {
  async createSchema() {
    await super.createIndex({ asid: 1 }, { unique: true });
  }

  async create(uuObject) {
    uuObject.asid = ASID;
    return await super.insertOne(uuObject);
  }

  async getByAsid(asid) {
    return await super.findOne({ asid });
  }

  async replaceByAsid(uuObject, atTime = new Date()) {
    const filter = { asid: uuObject.asid };
    let replacement = { ...uuObject };
    replacement = this._convertId(replacement);

    super._checkSoi(replacement);

    let replaceFilter = {
      $and: [filter],
    };

    const replaceTs = new Date();
    const lockPart = {
      $or: [
        {
          "sys.lockHash": {
            $exists: false,
          },
        },
        {
          "sys.lockHash": {
            $exists: true,
          },
          "sys.lockExpTs": {
            $lt: replaceTs,
          },
        },
      ],
    };

    replaceFilter["$and"].push(lockPart);

    if (replacement.sys?.rev == null) {
      throw new MissingRevision();
    }
    const revisionPart = {
      "sys.rev": replacement.sys.rev,
    };

    replacement.sys.mts = atTime;
    replacement.sys.rev++;
    replaceFilter["$and"].push(revisionPart);

    const db = await DbConnection.get(this.customUri);
    return await db
      .collection(this.collectionName)
      .replaceOne(replaceFilter, replacement)
      .then((result) => {
        if (result.matchedCount && result.modifiedCount) {
          return result;
        } else {
          return super._findWrapper(filter).then((res) => {
            if (!res || res.length === 0) {
              throw new ObjectNotFound();
            } else if (res[0].sys.rev !== revisionPart["sys.rev"]) {
              throw new InvalidRevision();
            } else if (res[0]["sys"] && res[0]["sys"]["lockHash"] && res[0]["sys"]["lockExpTs"] > replaceTs) {
              throw new ObjectLocked();
            } else {
              throw new UnexpectedError();
            }
          });
        }
      })
      .catch((e) => {
        if (e.message.match(/(^|\s)E1100[01]/)) {
          throw new DuplicateKey(e);
        } else if (e instanceof ObjectStoreError) {
          throw e;
        } else {
          throw new UnexpectedError(e);
        }
      });
  }
}

module.exports = SysUuIdentityStatsMongo;
