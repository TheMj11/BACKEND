"use strict";

const Process = require("process");
const { LoggerFactory } = require("uu_appg01_core-logging");
const { Config } = require("uu_appg01_core-utils");
const statusUpdater = require("../status-updater");

const UU_APP_METRICS_ENABLED = Config.getBoolean("uu_app_metrics_enabled");
const LOGGER = LoggerFactory.get("Uu.AppStatus.MetricsConfigurator");

class MetricsConfigurator {
  async onStartup() {
    if (UU_APP_METRICS_ENABLED && statusUpdater.metricsProgressUri) {
      const { MeterProviderFactory } = require("uu_app_metricsg01");
      const meterProvider = MeterProviderFactory.get();

      try {
        await statusUpdater.update({ metrics: {
          period: {
            endTime: new Date(),
          },
          attributes: {},
          metricSet: []
        } });
      } catch (e) {
        return LOGGER.error("Failed to update progress.", e);
      }

      const uuAppRuntimeMeter = meterProvider.getMeter("uuAppRuntime");
      const memoryRss = uuAppRuntimeMeter.getInstrument("MemoryRss");
      const memoryHeapTotal = uuAppRuntimeMeter.getInstrument("MemoryHeapTotal");
      const memoryHeapUsed = uuAppRuntimeMeter.getInstrument("MemoryHeapUsed");
      const memoryExternal = uuAppRuntimeMeter.getInstrument("MemoryExternal");
      const memoryArrayBuffers = uuAppRuntimeMeter.getInstrument("MemoryArrayBuffers");

      uuAppRuntimeMeter.addBatchObservableCallback(
        (batchObservableResult) => {
          const memoryUsage = Process.memoryUsage();
          batchObservableResult.observe(memoryRss, memoryUsage.rss, {});
          batchObservableResult.observe(memoryHeapTotal, memoryUsage.heapTotal, {});
          batchObservableResult.observe(memoryHeapUsed, memoryUsage.heapUsed, {});
          batchObservableResult.observe(memoryExternal, memoryUsage.external, {});
          batchObservableResult.observe(memoryArrayBuffers, memoryUsage.arrayBuffers, {});
        },
        [memoryRss, memoryHeapTotal, memoryHeapUsed, memoryExternal, memoryArrayBuffers],
      );
    }
  }
}

module.exports = MetricsConfigurator;